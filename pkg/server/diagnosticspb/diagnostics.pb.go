// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: server/diagnosticspb/diagnostics.proto

/*
	Package diagnosticspb is a generated protocol buffer package.

	It is generated from these files:
		server/diagnosticspb/diagnostics.proto

	It has these top-level messages:
		DiagnosticReport
		NodeInfo
		StoreInfo
*/
package diagnosticspb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import cockroach_sql "github.com/cockroachdb/cockroach/pkg/roachpb"
import cockroach_sql_sqlbase1 "github.com/cockroachdb/cockroach/pkg/sql/sqlbase"
import cockroach_roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"

import github_com_cockroachdb_cockroach_pkg_roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"

import sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type DiagnosticReport struct {
	Node                 NodeInfo                                     `protobuf:"bytes,1,opt,name=node" json:"node"`
	Stores               []StoreInfo                                  `protobuf:"bytes,2,rep,name=stores" json:"stores"`
	Schema               []cockroach_sql_sqlbase1.TableDescriptor     `protobuf:"bytes,3,rep,name=schema" json:"schema"`
	SqlStats             []cockroach_sql.CollectedStatementStatistics `protobuf:"bytes,4,rep,name=sql_stats,json=sqlStats" json:"sql_stats"`
	UnimplementedErrors  map[string]int64                             `protobuf:"bytes,5,rep,name=unimplemented_errors,json=unimplementedErrors" json:"unimplemented_errors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	AlteredSettings      map[string]string                            `protobuf:"bytes,6,rep,name=altered_settings,json=alteredSettings" json:"altered_settings,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ErrorCounts          map[string]int64                             `protobuf:"bytes,7,rep,name=error_counts,json=errorCounts" json:"error_counts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                                     `json:"-"`
	XXX_sizecache        int32                                        `json:"-"`
}

func (m *DiagnosticReport) Reset()                    { *m = DiagnosticReport{} }
func (m *DiagnosticReport) String() string            { return proto.CompactTextString(m) }
func (*DiagnosticReport) ProtoMessage()               {}
func (*DiagnosticReport) Descriptor() ([]byte, []int) { return fileDescriptorDiagnostics, []int{0} }
func (dst *DiagnosticReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiagnosticReport.Merge(dst, src)
}
func (m *DiagnosticReport) XXX_Size() int {
	return xxx_messageInfo_DiagnosticReport.Size(m)
}
func (m *DiagnosticReport) XXX_DiscardUnknown() {
	xxx_messageInfo_DiagnosticReport.DiscardUnknown(m)
}

var xxx_messageInfo_DiagnosticReport proto.InternalMessageInfo

type NodeInfo struct {
	NodeID               github_com_cockroachdb_cockroach_pkg_roachpb.NodeID `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.NodeID" json:"node_id,omitempty"`
	Bytes                int64                                               `protobuf:"varint,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
	KeyCount             int64                                               `protobuf:"varint,3,opt,name=key_count,json=keyCount,proto3" json:"key_count,omitempty"`
	RangeCount           int64                                               `protobuf:"varint,4,opt,name=range_count,json=rangeCount,proto3" json:"range_count,omitempty"`
	Locality             cockroach_roachpb.Locality                          `protobuf:"bytes,5,opt,name=locality" json:"locality"`
	XXX_NoUnkeyedLiteral struct{}                                            `json:"-"`
	XXX_sizecache        int32                                               `json:"-"`
}

func (m *NodeInfo) Reset()                    { *m = NodeInfo{} }
func (m *NodeInfo) String() string            { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()               {}
func (*NodeInfo) Descriptor() ([]byte, []int) { return fileDescriptorDiagnostics, []int{1} }
func (dst *NodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInfo.Merge(dst, src)
}
func (m *NodeInfo) XXX_Size() int {
	return xxx_messageInfo_NodeInfo.Size(m)
}
func (m *NodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInfo proto.InternalMessageInfo

type StoreInfo struct {
	NodeID               github_com_cockroachdb_cockroach_pkg_roachpb.NodeID  `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.NodeID" json:"node_id,omitempty"`
	StoreID              github_com_cockroachdb_cockroach_pkg_roachpb.StoreID `protobuf:"varint,2,opt,name=store_id,json=storeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.StoreID" json:"store_id,omitempty"`
	Bytes                int64                                                `protobuf:"varint,3,opt,name=bytes,proto3" json:"bytes,omitempty"`
	KeyCount             int64                                                `protobuf:"varint,4,opt,name=key_count,json=keyCount,proto3" json:"key_count,omitempty"`
	RangeCount           int64                                                `protobuf:"varint,5,opt,name=range_count,json=rangeCount,proto3" json:"range_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                             `json:"-"`
	XXX_sizecache        int32                                                `json:"-"`
}

func (m *StoreInfo) Reset()                    { *m = StoreInfo{} }
func (m *StoreInfo) String() string            { return proto.CompactTextString(m) }
func (*StoreInfo) ProtoMessage()               {}
func (*StoreInfo) Descriptor() ([]byte, []int) { return fileDescriptorDiagnostics, []int{2} }
func (dst *StoreInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreInfo.Merge(dst, src)
}
func (m *StoreInfo) XXX_Size() int {
	return xxx_messageInfo_StoreInfo.Size(m)
}
func (m *StoreInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StoreInfo proto.InternalMessageInfo

func init() {
	proto.RegisterType((*DiagnosticReport)(nil), "cockroach.server.diagnosticspb.DiagnosticReport")
	proto.RegisterMapType((map[string]string)(nil), "cockroach.server.diagnosticspb.DiagnosticReport.AlteredSettingsEntry")
	proto.RegisterMapType((map[string]int64)(nil), "cockroach.server.diagnosticspb.DiagnosticReport.ErrorCountsEntry")
	proto.RegisterMapType((map[string]int64)(nil), "cockroach.server.diagnosticspb.DiagnosticReport.UnimplementedErrorsEntry")
	proto.RegisterType((*NodeInfo)(nil), "cockroach.server.diagnosticspb.NodeInfo")
	proto.RegisterType((*StoreInfo)(nil), "cockroach.server.diagnosticspb.StoreInfo")
}
func (m *DiagnosticReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiagnosticReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintDiagnostics(dAtA, i, uint64(m.Node.Size()))
	n1, err := m.Node.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Stores) > 0 {
		for _, msg := range m.Stores {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDiagnostics(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Schema) > 0 {
		for _, msg := range m.Schema {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintDiagnostics(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.SqlStats) > 0 {
		for _, msg := range m.SqlStats {
			dAtA[i] = 0x22
			i++
			i = encodeVarintDiagnostics(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.UnimplementedErrors) > 0 {
		keysForUnimplementedErrors := make([]string, 0, len(m.UnimplementedErrors))
		for k := range m.UnimplementedErrors {
			keysForUnimplementedErrors = append(keysForUnimplementedErrors, string(k))
		}
		sortkeys.Strings(keysForUnimplementedErrors)
		for _, k := range keysForUnimplementedErrors {
			dAtA[i] = 0x2a
			i++
			v := m.UnimplementedErrors[string(k)]
			mapSize := 1 + len(k) + sovDiagnostics(uint64(len(k))) + 1 + sovDiagnostics(uint64(v))
			i = encodeVarintDiagnostics(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintDiagnostics(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			i = encodeVarintDiagnostics(dAtA, i, uint64(v))
		}
	}
	if len(m.AlteredSettings) > 0 {
		keysForAlteredSettings := make([]string, 0, len(m.AlteredSettings))
		for k := range m.AlteredSettings {
			keysForAlteredSettings = append(keysForAlteredSettings, string(k))
		}
		sortkeys.Strings(keysForAlteredSettings)
		for _, k := range keysForAlteredSettings {
			dAtA[i] = 0x32
			i++
			v := m.AlteredSettings[string(k)]
			mapSize := 1 + len(k) + sovDiagnostics(uint64(len(k))) + 1 + len(v) + sovDiagnostics(uint64(len(v)))
			i = encodeVarintDiagnostics(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintDiagnostics(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintDiagnostics(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.ErrorCounts) > 0 {
		keysForErrorCounts := make([]string, 0, len(m.ErrorCounts))
		for k := range m.ErrorCounts {
			keysForErrorCounts = append(keysForErrorCounts, string(k))
		}
		sortkeys.Strings(keysForErrorCounts)
		for _, k := range keysForErrorCounts {
			dAtA[i] = 0x3a
			i++
			v := m.ErrorCounts[string(k)]
			mapSize := 1 + len(k) + sovDiagnostics(uint64(len(k))) + 1 + sovDiagnostics(uint64(v))
			i = encodeVarintDiagnostics(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintDiagnostics(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			i = encodeVarintDiagnostics(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func (m *NodeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NodeID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDiagnostics(dAtA, i, uint64(m.NodeID))
	}
	if m.Bytes != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDiagnostics(dAtA, i, uint64(m.Bytes))
	}
	if m.KeyCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDiagnostics(dAtA, i, uint64(m.KeyCount))
	}
	if m.RangeCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDiagnostics(dAtA, i, uint64(m.RangeCount))
	}
	dAtA[i] = 0x2a
	i++
	i = encodeVarintDiagnostics(dAtA, i, uint64(m.Locality.Size()))
	n2, err := m.Locality.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	return i, nil
}

func (m *StoreInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NodeID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDiagnostics(dAtA, i, uint64(m.NodeID))
	}
	if m.StoreID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDiagnostics(dAtA, i, uint64(m.StoreID))
	}
	if m.Bytes != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDiagnostics(dAtA, i, uint64(m.Bytes))
	}
	if m.KeyCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDiagnostics(dAtA, i, uint64(m.KeyCount))
	}
	if m.RangeCount != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDiagnostics(dAtA, i, uint64(m.RangeCount))
	}
	return i, nil
}

func encodeVarintDiagnostics(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DiagnosticReport) Size() (n int) {
	var l int
	_ = l
	l = m.Node.Size()
	n += 1 + l + sovDiagnostics(uint64(l))
	if len(m.Stores) > 0 {
		for _, e := range m.Stores {
			l = e.Size()
			n += 1 + l + sovDiagnostics(uint64(l))
		}
	}
	if len(m.Schema) > 0 {
		for _, e := range m.Schema {
			l = e.Size()
			n += 1 + l + sovDiagnostics(uint64(l))
		}
	}
	if len(m.SqlStats) > 0 {
		for _, e := range m.SqlStats {
			l = e.Size()
			n += 1 + l + sovDiagnostics(uint64(l))
		}
	}
	if len(m.UnimplementedErrors) > 0 {
		for k, v := range m.UnimplementedErrors {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDiagnostics(uint64(len(k))) + 1 + sovDiagnostics(uint64(v))
			n += mapEntrySize + 1 + sovDiagnostics(uint64(mapEntrySize))
		}
	}
	if len(m.AlteredSettings) > 0 {
		for k, v := range m.AlteredSettings {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDiagnostics(uint64(len(k))) + 1 + len(v) + sovDiagnostics(uint64(len(v)))
			n += mapEntrySize + 1 + sovDiagnostics(uint64(mapEntrySize))
		}
	}
	if len(m.ErrorCounts) > 0 {
		for k, v := range m.ErrorCounts {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDiagnostics(uint64(len(k))) + 1 + sovDiagnostics(uint64(v))
			n += mapEntrySize + 1 + sovDiagnostics(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *NodeInfo) Size() (n int) {
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovDiagnostics(uint64(m.NodeID))
	}
	if m.Bytes != 0 {
		n += 1 + sovDiagnostics(uint64(m.Bytes))
	}
	if m.KeyCount != 0 {
		n += 1 + sovDiagnostics(uint64(m.KeyCount))
	}
	if m.RangeCount != 0 {
		n += 1 + sovDiagnostics(uint64(m.RangeCount))
	}
	l = m.Locality.Size()
	n += 1 + l + sovDiagnostics(uint64(l))
	return n
}

func (m *StoreInfo) Size() (n int) {
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovDiagnostics(uint64(m.NodeID))
	}
	if m.StoreID != 0 {
		n += 1 + sovDiagnostics(uint64(m.StoreID))
	}
	if m.Bytes != 0 {
		n += 1 + sovDiagnostics(uint64(m.Bytes))
	}
	if m.KeyCount != 0 {
		n += 1 + sovDiagnostics(uint64(m.KeyCount))
	}
	if m.RangeCount != 0 {
		n += 1 + sovDiagnostics(uint64(m.RangeCount))
	}
	return n
}

func sovDiagnostics(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDiagnostics(x uint64) (n int) {
	return sovDiagnostics(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DiagnosticReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiagnostics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiagnosticReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiagnosticReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiagnostics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiagnostics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiagnostics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiagnostics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stores = append(m.Stores, StoreInfo{})
			if err := m.Stores[len(m.Stores)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiagnostics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiagnostics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schema = append(m.Schema, cockroach_sql_sqlbase1.TableDescriptor{})
			if err := m.Schema[len(m.Schema)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SqlStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiagnostics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiagnostics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SqlStats = append(m.SqlStats, cockroach_sql.CollectedStatementStatistics{})
			if err := m.SqlStats[len(m.SqlStats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnimplementedErrors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiagnostics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiagnostics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnimplementedErrors == nil {
				m.UnimplementedErrors = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDiagnostics
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDiagnostics
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDiagnostics
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDiagnostics
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDiagnostics(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthDiagnostics
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.UnimplementedErrors[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlteredSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiagnostics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiagnostics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AlteredSettings == nil {
				m.AlteredSettings = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDiagnostics
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDiagnostics
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDiagnostics
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDiagnostics
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthDiagnostics
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDiagnostics(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthDiagnostics
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AlteredSettings[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiagnostics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiagnostics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ErrorCounts == nil {
				m.ErrorCounts = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDiagnostics
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDiagnostics
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDiagnostics
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDiagnostics
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDiagnostics(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthDiagnostics
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ErrorCounts[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiagnostics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiagnostics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiagnostics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiagnostics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= (github_com_cockroachdb_cockroach_pkg_roachpb.NodeID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			m.Bytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiagnostics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bytes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyCount", wireType)
			}
			m.KeyCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiagnostics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeCount", wireType)
			}
			m.RangeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiagnostics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locality", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiagnostics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDiagnostics
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Locality.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDiagnostics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiagnostics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDiagnostics
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiagnostics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= (github_com_cockroachdb_cockroach_pkg_roachpb.NodeID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			m.StoreID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiagnostics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreID |= (github_com_cockroachdb_cockroach_pkg_roachpb.StoreID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			m.Bytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiagnostics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bytes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyCount", wireType)
			}
			m.KeyCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiagnostics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeCount", wireType)
			}
			m.RangeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDiagnostics
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDiagnostics(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDiagnostics
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDiagnostics(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDiagnostics
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDiagnostics
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDiagnostics
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDiagnostics
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDiagnostics
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDiagnostics(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDiagnostics = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDiagnostics   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("server/diagnosticspb/diagnostics.proto", fileDescriptorDiagnostics) }

var fileDescriptorDiagnostics = []byte{
	// 674 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0x4d, 0x6f, 0xd3, 0x4c,
	0x10, 0xc7, 0xeb, 0xbc, 0x38, 0xc9, 0xe6, 0x79, 0x44, 0x64, 0x22, 0xb0, 0x52, 0xe4, 0x54, 0x3d,
	0x94, 0x20, 0x24, 0x5b, 0x6a, 0x39, 0x20, 0x24, 0x90, 0x9a, 0xa6, 0xa0, 0x4a, 0xa8, 0x07, 0x17,
	0x2e, 0x3d, 0x10, 0xad, 0xed, 0xc1, 0xb5, 0xe2, 0x78, 0x9d, 0xdd, 0x75, 0xa5, 0x48, 0x7c, 0x08,
	0xee, 0x7c, 0xa1, 0x1e, 0xb9, 0xc1, 0x29, 0x82, 0xf0, 0x29, 0xe0, 0x84, 0x3c, 0x76, 0x52, 0x37,
	0xd0, 0x56, 0x39, 0x70, 0xdb, 0x9d, 0x99, 0xff, 0x6f, 0x5e, 0xec, 0x59, 0xb2, 0x23, 0x80, 0x9f,
	0x03, 0xb7, 0xbc, 0x80, 0xfa, 0x11, 0x13, 0x32, 0x70, 0x45, 0xec, 0x14, 0x6f, 0x66, 0xcc, 0x99,
	0x64, 0x9a, 0xe1, 0x32, 0x77, 0xc4, 0x19, 0x75, 0xcf, 0xcc, 0x4c, 0x61, 0x5e, 0x51, 0x74, 0xda,
	0x3e, 0xf3, 0x19, 0x86, 0x5a, 0xe9, 0x29, 0x53, 0x75, 0xee, 0xa3, 0x22, 0x76, 0x2c, 0x1a, 0xc7,
	0x43, 0x21, 0xa9, 0xcc, 0x71, 0x9d, 0x07, 0x62, 0x12, 0x5a, 0x62, 0x12, 0x3a, 0x54, 0x80, 0x25,
	0x24, 0x4f, 0x5c, 0x99, 0x70, 0xf0, 0x72, 0xef, 0xbd, 0x85, 0x6c, 0x0c, 0x92, 0x7a, 0x54, 0xd2,
	0xcc, 0xbe, 0xfd, 0x45, 0x25, 0xad, 0xc1, 0x32, 0xad, 0x0d, 0x31, 0xe3, 0x52, 0xeb, 0x93, 0x4a,
	0xc4, 0x3c, 0xd0, 0x95, 0x2d, 0xa5, 0xd7, 0xdc, 0xed, 0x99, 0x37, 0x17, 0x6a, 0x1e, 0x33, 0x0f,
	0x8e, 0xa2, 0xf7, 0xac, 0x5f, 0xb9, 0x98, 0x75, 0x37, 0x6c, 0xd4, 0x6a, 0xaf, 0x88, 0x2a, 0x24,
	0xe3, 0x20, 0xf4, 0xd2, 0x56, 0xb9, 0xd7, 0xdc, 0x7d, 0x74, 0x1b, 0xe5, 0x24, 0x8d, 0x2e, 0x60,
	0x72, 0xb9, 0x36, 0x20, 0xaa, 0x70, 0xcf, 0x60, 0x4c, 0xf5, 0x32, 0x82, 0x76, 0x8a, 0xa0, 0x49,
	0x68, 0xe6, 0x2d, 0x9b, 0x6f, 0xa8, 0x13, 0xc2, 0x00, 0x84, 0xcb, 0x83, 0x58, 0x32, 0xbe, 0xa4,
	0xa0, 0x56, 0x3b, 0x26, 0x0d, 0x31, 0x09, 0xb3, 0x81, 0xe9, 0x15, 0x04, 0x3d, 0x5e, 0x01, 0x1d,
	0xb0, 0x30, 0x04, 0x57, 0x82, 0x77, 0x22, 0xa9, 0x84, 0x31, 0x44, 0x32, 0x3d, 0x04, 0x58, 0x5f,
	0x4e, 0xab, 0x8b, 0x49, 0x98, 0x1a, 0x85, 0xf6, 0x81, 0xb4, 0x93, 0x28, 0x18, 0xc7, 0x21, 0x06,
	0x82, 0x37, 0x04, 0xce, 0x19, 0x17, 0x7a, 0x15, 0xd1, 0x47, 0xb7, 0x35, 0xbb, 0x3a, 0x72, 0xf3,
	0x6d, 0x11, 0x76, 0x88, 0xac, 0xc3, 0x48, 0xf2, 0xa9, 0x7d, 0x37, 0xf9, 0xd3, 0xa3, 0xc5, 0xa4,
	0x45, 0x43, 0x09, 0x1c, 0xbc, 0xa1, 0x00, 0x29, 0x83, 0xc8, 0x17, 0xba, 0x8a, 0x99, 0x0f, 0xd7,
	0xce, 0xbc, 0x9f, 0x81, 0x4e, 0x72, 0x4e, 0x96, 0xf5, 0x0e, 0xbd, 0x6a, 0xd5, 0x3c, 0xf2, 0x1f,
	0x76, 0x38, 0x74, 0x59, 0x12, 0x49, 0xa1, 0xd7, 0x30, 0xdb, 0xfe, 0xda, 0xd9, 0xb0, 0x81, 0x03,
	0x64, 0x64, 0x99, 0x9a, 0x70, 0x69, 0xe9, 0xbc, 0x24, 0xfa, 0x75, 0x83, 0xd0, 0x5a, 0xa4, 0x3c,
	0x82, 0x29, 0xfe, 0x93, 0x0d, 0x3b, 0x3d, 0x6a, 0x6d, 0x52, 0x3d, 0xa7, 0x61, 0x02, 0x7a, 0x69,
	0x4b, 0xe9, 0x95, 0xed, 0xec, 0xf2, 0xac, 0xf4, 0x54, 0xe9, 0xf4, 0x49, 0xfb, 0x6f, 0x6d, 0xdd,
	0xc6, 0x68, 0x14, 0x19, 0x2f, 0x48, 0x6b, 0xb5, 0xd8, 0x75, 0x6a, 0xd8, 0xfe, 0xa9, 0x90, 0xfa,
	0x62, 0x33, 0xb4, 0x53, 0x52, 0x4b, 0xb7, 0x62, 0x18, 0x78, 0x28, 0xae, 0xf6, 0xf7, 0xe7, 0xb3,
	0xae, 0x8a, 0xee, 0xc1, 0xaf, 0x59, 0x77, 0xcf, 0x0f, 0xe4, 0x59, 0xe2, 0x98, 0x2e, 0x1b, 0x5b,
	0xcb, 0x89, 0x7a, 0xce, 0xe5, 0xd9, 0x8a, 0x47, 0xbe, 0x95, 0xaf, 0x70, 0xb6, 0x6f, 0x03, 0x5b,
	0x4d, 0x89, 0x47, 0x5e, 0x5a, 0x82, 0x33, 0x95, 0xb8, 0x68, 0x58, 0x02, 0x5e, 0xb4, 0x4d, 0xd2,
	0x18, 0xc1, 0x34, 0xfb, 0x5c, 0x7a, 0x19, 0x3d, 0xf5, 0x11, 0x4c, 0xb1, 0x1b, 0xad, 0x4b, 0x9a,
	0x9c, 0x46, 0x3e, 0xe4, 0xee, 0x0a, 0xba, 0x09, 0x9a, 0xb2, 0x80, 0xe7, 0xa4, 0x1e, 0x32, 0x97,
	0x86, 0x81, 0x9c, 0xea, 0x55, 0x7c, 0x05, 0x36, 0x0b, 0x9f, 0x7a, 0x51, 0xc8, 0xeb, 0x3c, 0x64,
	0xb1, 0x1d, 0x0b, 0xc9, 0xf6, 0xa7, 0x12, 0x69, 0x2c, 0xf7, 0xf9, 0x9f, 0x36, 0xff, 0x8e, 0xd4,
	0xf1, 0x9d, 0x48, 0xe1, 0x25, 0x84, 0x1f, 0xcc, 0x67, 0xdd, 0x5a, 0x96, 0x3c, 0xa5, 0x3f, 0x59,
	0x8b, 0x9e, 0xeb, 0xec, 0x1a, 0x42, 0x8b, 0xc3, 0x2d, 0x5f, 0x3b, 0xdc, 0xca, 0xcd, 0xc3, 0xad,
	0xae, 0x0e, 0xb7, 0xff, 0xf0, 0xe2, 0xbb, 0xb1, 0x71, 0x31, 0x37, 0x94, 0xcf, 0x73, 0x43, 0xf9,
	0x3a, 0x37, 0x94, 0x6f, 0x73, 0x43, 0xf9, 0xf8, 0xc3, 0xd8, 0x38, 0xfd, 0xff, 0xca, 0xf6, 0x38,
	0x2a, 0xbe, 0xd1, 0x7b, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xca, 0x04, 0xe3, 0x9d, 0x52, 0x06,
	0x00, 0x00,
}
