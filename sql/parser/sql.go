// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	if namePart, ok := u.val.(NamePart); ok {
		return namePart
	}
	return nil
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionName() FunctionName {
	return u.val.(FunctionName)
}
func (u *sqlSymUnion) normalizableFunctionName() NormalizableFunctionName {
	return NormalizableFunctionName{u.val.(FunctionName)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}

//line sql.y:309
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BEGIN = 57376
const BETWEEN = 57377
const BIGINT = 57378
const BIGSERIAL = 57379
const BIT = 57380
const BLOB = 57381
const BOOL = 57382
const BOOLEAN = 57383
const BOTH = 57384
const BY = 57385
const BYTEA = 57386
const BYTES = 57387
const CASCADE = 57388
const CASE = 57389
const CAST = 57390
const CHAR = 57391
const CHARACTER = 57392
const CHARACTERISTICS = 57393
const CHECK = 57394
const COALESCE = 57395
const COLLATE = 57396
const COLLATION = 57397
const COLUMN = 57398
const COLUMNS = 57399
const COMMIT = 57400
const COMMITTED = 57401
const CONCAT = 57402
const CONFLICT = 57403
const CONSTRAINT = 57404
const CONSTRAINTS = 57405
const COPY = 57406
const COVERING = 57407
const CREATE = 57408
const CROSS = 57409
const CUBE = 57410
const CURRENT = 57411
const CURRENT_CATALOG = 57412
const CURRENT_DATE = 57413
const CURRENT_ROLE = 57414
const CURRENT_TIME = 57415
const CURRENT_TIMESTAMP = 57416
const CURRENT_USER = 57417
const CYCLE = 57418
const DATA = 57419
const DATABASE = 57420
const DATABASES = 57421
const DATE = 57422
const DAY = 57423
const DEC = 57424
const DECIMAL = 57425
const DEFAULT = 57426
const DEALLOCATE = 57427
const DEFERRABLE = 57428
const DELETE = 57429
const DESC = 57430
const DISTINCT = 57431
const DO = 57432
const DOUBLE = 57433
const DROP = 57434
const ELSE = 57435
const ENCODING = 57436
const END = 57437
const ESCAPE = 57438
const EXCEPT = 57439
const EXISTS = 57440
const EXECUTE = 57441
const EXPLAIN = 57442
const EXTRACT = 57443
const FALSE = 57444
const FAMILY = 57445
const FETCH = 57446
const FILTER = 57447
const FIRST = 57448
const FLOAT = 57449
const FLOORDIV = 57450
const FOLLOWING = 57451
const FOR = 57452
const FORCE_INDEX = 57453
const FOREIGN = 57454
const FROM = 57455
const FULL = 57456
const GRANT = 57457
const GRANTS = 57458
const GREATEST = 57459
const GROUP = 57460
const GROUPING = 57461
const HAVING = 57462
const HIGH = 57463
const HOUR = 57464
const IF = 57465
const IFNULL = 57466
const ILIKE = 57467
const IN = 57468
const INTERLEAVE = 57469
const INDEX = 57470
const INDEXES = 57471
const INITIALLY = 57472
const INNER = 57473
const INSERT = 57474
const INT = 57475
const INT8 = 57476
const INT64 = 57477
const INTEGER = 57478
const INTERSECT = 57479
const INTERVAL = 57480
const INTO = 57481
const IS = 57482
const ISOLATION = 57483
const JOIN = 57484
const KEY = 57485
const KEYS = 57486
const LATERAL = 57487
const LEADING = 57488
const LEAST = 57489
const LEFT = 57490
const LEVEL = 57491
const LIKE = 57492
const LIMIT = 57493
const LOCAL = 57494
const LOCALTIME = 57495
const LOCALTIMESTAMP = 57496
const LOW = 57497
const LSHIFT = 57498
const MATCH = 57499
const MINUTE = 57500
const MONTH = 57501
const NAME = 57502
const NAMES = 57503
const NATURAL = 57504
const NEXT = 57505
const NO = 57506
const NO_INDEX_JOIN = 57507
const NORMAL = 57508
const NOT = 57509
const NOTHING = 57510
const NULL = 57511
const NULLIF = 57512
const NULLS = 57513
const NUMERIC = 57514
const OF = 57515
const OFF = 57516
const OFFSET = 57517
const ON = 57518
const ONLY = 57519
const OR = 57520
const ORDER = 57521
const ORDINALITY = 57522
const OUT = 57523
const OUTER = 57524
const OVER = 57525
const OVERLAPS = 57526
const OVERLAY = 57527
const PARENT = 57528
const PARTIAL = 57529
const PARTITION = 57530
const PLACING = 57531
const POSITION = 57532
const PRECEDING = 57533
const PRECISION = 57534
const PREPARE = 57535
const PRIMARY = 57536
const PRIORITY = 57537
const RANGE = 57538
const READ = 57539
const REAL = 57540
const RECURSIVE = 57541
const REF = 57542
const REFERENCES = 57543
const RENAME = 57544
const REPEATABLE = 57545
const RELEASE = 57546
const RESTRICT = 57547
const RETURNING = 57548
const REVOKE = 57549
const RIGHT = 57550
const ROLLBACK = 57551
const ROLLUP = 57552
const ROW = 57553
const ROWS = 57554
const RSHIFT = 57555
const SAVEPOINT = 57556
const SEARCH = 57557
const SECOND = 57558
const SELECT = 57559
const SERIAL = 57560
const SERIALIZABLE = 57561
const SESSION = 57562
const SESSION_USER = 57563
const SET = 57564
const SHOW = 57565
const SIMILAR = 57566
const SIMPLE = 57567
const SMALLINT = 57568
const SMALLSERIAL = 57569
const SNAPSHOT = 57570
const SOME = 57571
const SPLIT = 57572
const SQL = 57573
const START = 57574
const STDIN = 57575
const STRICT = 57576
const STRING = 57577
const STORING = 57578
const SUBSTRING = 57579
const SYMMETRIC = 57580
const SYSTEM = 57581
const TABLE = 57582
const TABLES = 57583
const TEXT = 57584
const THEN = 57585
const TIME = 57586
const TIMESTAMP = 57587
const TIMESTAMPTZ = 57588
const TO = 57589
const TRAILING = 57590
const TRANSACTION = 57591
const TREAT = 57592
const TRIM = 57593
const TRUE = 57594
const TRUNCATE = 57595
const TYPE = 57596
const UNBOUNDED = 57597
const UNCOMMITTED = 57598
const UNION = 57599
const UNIQUE = 57600
const UNKNOWN = 57601
const UPDATE = 57602
const UPSERT = 57603
const USER = 57604
const USING = 57605
const VALID = 57606
const VALIDATE = 57607
const VALUE = 57608
const VALUES = 57609
const VARCHAR = 57610
const VARIADIC = 57611
const VIEW = 57612
const VARYING = 57613
const WHEN = 57614
const WHERE = 57615
const WINDOW = 57616
const WITH = 57617
const WITHIN = 57618
const WITHOUT = 57619
const YEAR = 57620
const ZONE = 57621
const NOT_LA = 57622
const WITH_LA = 57623
const AS_LA = 57624
const POSTFIXOP = 57625
const UMINUS = 57626

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4736

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 26,
	303, 26,
	-2, 365,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 43,
	1, 340,
	176, 340,
	206, 340,
	301, 340,
	303, 340,
	-2, 350,
	-1, 56,
	1, 343,
	176, 343,
	206, 343,
	301, 343,
	303, 343,
	-2, 349,
	-1, 65,
	1, 26,
	303, 26,
	-2, 365,
	-1, 282,
	1, 168,
	303, 168,
	-2, 863,
	-1, 316,
	151, 375,
	175, 375,
	-2, 346,
	-1, 319,
	151, 374,
	175, 374,
	-2, 344,
	-1, 450,
	151, 374,
	175, 374,
	-2, 347,
	-1, 506,
	300, 802,
	-2, 795,
	-1, 507,
	300, 803,
	-2, 796,
	-1, 513,
	5, 510,
	300, 510,
	-2, 953,
	-1, 536,
	5, 476,
	-2, 928,
	-1, 537,
	5, 504,
	300, 504,
	-2, 930,
	-1, 538,
	5, 484,
	-2, 931,
	-1, 539,
	5, 483,
	-2, 932,
	-1, 540,
	5, 504,
	300, 504,
	-2, 935,
	-1, 541,
	5, 504,
	300, 504,
	-2, 936,
	-1, 542,
	5, 505,
	-2, 939,
	-1, 543,
	5, 470,
	-2, 940,
	-1, 544,
	5, 470,
	-2, 941,
	-1, 545,
	5, 486,
	-2, 944,
	-1, 546,
	5, 471,
	-2, 949,
	-1, 547,
	5, 472,
	-2, 950,
	-1, 548,
	5, 473,
	-2, 951,
	-1, 549,
	5, 474,
	-2, 952,
	-1, 550,
	5, 470,
	-2, 956,
	-1, 551,
	5, 477,
	-2, 961,
	-1, 552,
	5, 475,
	-2, 964,
	-1, 553,
	5, 502,
	300, 502,
	-2, 966,
	-1, 554,
	5, 506,
	-2, 969,
	-1, 555,
	5, 508,
	-2, 970,
	-1, 556,
	5, 501,
	300, 501,
	-2, 974,
	-1, 884,
	97, 350,
	137, 350,
	151, 350,
	175, 350,
	179, 350,
	257, 350,
	-2, 622,
	-1, 892,
	300, 780,
	-2, 769,
	-1, 1089,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 545,
	-1, 1090,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 546,
	-1, 1091,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 547,
	-1, 1095,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 551,
	-1, 1096,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 552,
	-1, 1097,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 553,
	-1, 1100,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 558,
	-1, 1106,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 560,
	-1, 1109,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 565,
	-1, 1110,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 566,
	-1, 1111,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 567,
	-1, 1136,
	184, 693,
	-2, 696,
	-1, 1304,
	97, 350,
	137, 350,
	151, 350,
	175, 350,
	179, 350,
	257, 350,
	-2, 423,
	-1, 1308,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 559,
	-1, 1309,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 561,
	-1, 1314,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 562,
	-1, 1332,
	184, 692,
	-2, 695,
	-1, 1494,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 563,
	-1, 1499,
	140, 0,
	-2, 577,
	-1, 1507,
	184, 694,
	-2, 697,
	-1, 1541,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 603,
	-1, 1542,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 604,
	-1, 1543,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 605,
	-1, 1547,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 609,
	-1, 1548,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 610,
	-1, 1549,
	13, 0,
	14, 0,
	15, 0,
	283, 0,
	284, 0,
	285, 0,
	-2, 611,
	-1, 1653,
	140, 0,
	-2, 578,
	-1, 1656,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 581,
	-1, 1657,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 583,
	-1, 1743,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 582,
	-1, 1744,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 584,
	-1, 1751,
	140, 0,
	-2, 612,
	-1, 1796,
	140, 0,
	-2, 613,
	-1, 1848,
	35, 0,
	125, 0,
	150, 0,
	224, 0,
	280, 0,
	-2, 927,
}

const sqlNprod = 1069
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 24417

var sqlAct = [...]int{

	507, 687, 1847, 1870, 1461, 1828, 1802, 1829, 1696, 977,
	969, 1830, 811, 1518, 1719, 1846, 1731, 887, 320, 1645,
	835, 354, 813, 1632, 42, 1619, 1618, 1061, 72, 505,
	504, 283, 497, 1301, 592, 1639, 1578, 72, 72, 72,
	341, 1042, 72, 700, 1232, 72, 1473, 1300, 1387, 73,
	469, 1388, 557, 72, 1039, 889, 18, 1335, 816, 1291,
	72, 72, 572, 1041, 72, 1008, 1069, 72, 72, 72,
	978, 1070, 569, 992, 938, 947, 1483, 1285, 1182, 1146,
	1122, 831, 1119, 325, 1073, 327, 55, 25, 353, 764,
	1001, 1034, 244, 499, 437, 14, 7, 748, 574, 1071,
	588, 438, 470, 479, 355, 356, 745, 919, 775, 923,
	373, 369, 366, 837, 9, 319, 8, 971, 6, 4,
	242, 55, 368, 249, 1045, 330, 453, 452, 56, 454,
	270, 248, 250, 280, 766, 57, 261, 762, 680, 744,
	328, 362, 1738, 689, 970, 1739, 1185, 689, 1299, 324,
	251, 55, 246, 457, 245, 247, 324, 1862, 1844, 689,
	1065, 1718, 1836, 338, 1826, 1065, 344, 998, 1821, 584,
	1798, 1065, 974, 998, 1792, 1243, 1782, 1065, 1772, 1718,
	1011, 1065, 1745, 308, 317, 998, 1742, 1005, 1330, 1065,
	347, 316, 1728, 1331, 1726, 1718, 473, 1065, 1786, 1717,
	1701, 332, 1718, 1065, 1700, 1678, 1658, 1065, 1011, 1011,
	1655, 1605, 1604, 998, 1011, 1011, 1590, 838, 1503, 1065,
	61, 1011, 840, 841, 1447, 1288, 1441, 966, 1006, 966,
	1405, 1329, 1289, 1406, 1358, 1359, 1011, 1721, 1554, 72,
	72, 72, 72, 63, 376, 843, 1403, 1358, 1359, 1011,
	1376, 1377, 1378, 701, 1288, 1402, 1401, 72, 1011, 1011,
	1244, 839, 1506, 1652, 1007, 1004, 842, 1269, 325, 936,
	64, 1271, 72, 371, 1334, 72, 72, 1332, 59, 1277,
	1011, 1011, 1065, 1066, 60, 1020, 1065, 1010, 1011, 997,
	1011, 965, 998, 377, 966, 935, 378, 1373, 934, 1065,
	1013, 695, 690, 58, 696, 61, 690, 65, 72, 1130,
	72, 1060, 72, 72, 1028, 72, 465, 804, 690, 803,
	848, 756, 1009, 840, 841, 755, 402, 337, 63, 357,
	72, 61, 1364, 358, 436, 451, 357, 559, 363, 464,
	358, 72, 358, 444, 446, 1364, 843, 789, 422, 1845,
	1842, 1835, 374, 72, 63, 64, 1793, 1727, 1683, 595,
	72, 72, 72, 59, 72, 1679, 1671, 842, 858, 60,
	1670, 692, 410, 1669, 450, 590, 1664, 1379, 564, 411,
	1374, 64, 1663, 1662, 1003, 563, 1616, 1569, 973, 840,
	841, 1564, 1563, 1374, 1562, 72, 1509, 1492, 1273, 1610,
	1472, 693, 72, 1451, 72, 688, 1002, 1127, 596, 443,
	1468, 597, 843, 1410, 58, 376, 376, 807, 1407, 1395,
	1386, 848, 1357, 595, 72, 859, 72, 72, 72, 72,
	72, 72, 72, 842, 1354, 1352, 72, 1375, 441, 857,
	1340, 72, 1339, 1270, 806, 1199, 1358, 1359, 72, 809,
	1375, 1243, 838, 1153, 1152, 895, 317, 790, 464, 363,
	463, 812, 1520, 316, 377, 377, 72, 378, 378, 72,
	466, 351, 596, 1812, 1785, 597, 460, 461, 1764, 1762,
	1753, 357, 1735, 1449, 1724, 358, 1715, 848, 1693, 1676,
	707, 1648, 840, 841, 697, 1626, 1128, 1498, 1491, 1469,
	682, 679, 852, 844, 845, 846, 847, 849, 325, 869,
	892, 785, 1366, 1367, 1368, 1360, 1361, 1362, 1363, 1365,
	1370, 1371, 1372, 1609, 1369, 1366, 1367, 1368, 1360, 1361,
	1362, 1363, 1365, 1466, 1464, 858, 842, 1358, 1359, 751,
	1421, 1420, 1385, 752, 1364, 742, 1348, 1347, 1326, 1322,
	840, 841, 786, 779, 1124, 754, 1258, 791, 1224, 1223,
	795, 796, 797, 798, 799, 794, 1211, 1210, 72, 802,
	1211, 805, 1192, 843, 1151, 1064, 72, 840, 841, 819,
	72, 821, 924, 820, 72, 72, 317, 927, 931, 317,
	317, 833, 859, 827, 842, 917, 828, 829, 916, 915,
	843, 914, 913, 912, 844, 845, 846, 847, 849, 911,
	869, 910, 909, 840, 841, 908, 907, 941, 906, 905,
	904, 842, 903, 902, 893, 891, 58, 342, 468, 408,
	886, 398, 396, 1615, 1168, 1364, 843, 439, 840, 841,
	1614, 840, 841, 890, 870, 871, 872, 1252, 921, 922,
	1251, 952, 954, 826, 925, 580, 565, 842, 352, 416,
	928, 843, 1740, 874, 1409, 1408, 853, 850, 851, 852,
	844, 845, 846, 847, 849, 848, 869, 932, 1613, 957,
	1467, 1245, 842, 1055, 72, 1307, 72, 72, 857, 72,
	432, 417, 72, 900, 72, 72, 273, 376, 929, 970,
	944, 1633, 930, 1521, 1147, 558, 961, 1343, 920, 1239,
	314, 848, 1808, 1858, 1859, 323, 1265, 1598, 565, 808,
	1019, 840, 841, 858, 301, 987, 371, 1360, 1361, 1362,
	1363, 1365, 302, 1771, 730, 1709, 848, 972, 307, 972,
	306, 1708, 1435, 1413, 843, 940, 377, 72, 72, 378,
	896, 1432, 244, 867, 875, 322, 993, 1412, 784, 783,
	940, 777, 772, 1310, 1257, 842, 939, 1256, 1015, 1255,
	1254, 1107, 1012, 512, 575, 1448, 576, 963, 865, 869,
	859, 55, 960, 249, 858, 55, 440, 995, 1733, 1196,
	595, 248, 250, 414, 72, 994, 996, 324, 1195, 561,
	976, 1078, 435, 948, 986, 374, 988, 990, 72, 72,
	251, 985, 246, 72, 245, 247, 989, 394, 310, 848,
	1362, 1363, 1365, 235, 1033, 1770, 1636, 1121, 1436, 1228,
	1121, 415, 586, 1052, 925, 1810, 928, 869, 787, 596,
	72, 859, 597, 72, 1698, 577, 922, 921, 1067, 1009,
	1867, 1022, 868, 1014, 1016, 1017, 683, 1021, 844, 845,
	846, 847, 849, 951, 869, 582, 1049, 858, 236, 1823,
	1058, 1059, 311, 1024, 1077, 321, 1233, 595, 575, 1026,
	576, 1423, 1358, 1359, 1290, 1824, 1147, 1858, 1439, 1241,
	315, 1005, 736, 581, 1873, 1027, 846, 847, 849, 1037,
	869, 1226, 312, 1237, 1025, 1036, 788, 1038, 866, 590,
	585, 1125, 1266, 1264, 590, 853, 850, 851, 852, 844,
	845, 846, 847, 849, 859, 869, 596, 239, 869, 597,
	1453, 1294, 1006, 1233, 707, 707, 1430, 1832, 72, 72,
	72, 1068, 1765, 1198, 72, 950, 1134, 72, 1297, 577,
	689, 937, 413, 72, 72, 72, 72, 72, 918, 1292,
	575, 72, 576, 412, 72, 1295, 1454, 72, 1007, 1004,
	1866, 405, 407, 68, 72, 1749, 72, 240, 433, 1293,
	1364, 1358, 1359, 72, 1456, 1206, 1143, 1126, 1247, 560,
	1248, 252, 72, 1641, 1346, 1716, 238, 237, 325, 850,
	851, 852, 844, 845, 846, 847, 849, 1200, 869, 949,
	1833, 1424, 1871, 72, 72, 1699, 1235, 413, 578, 72,
	1221, 1158, 883, 67, 1009, 1296, 1009, 1484, 1374, 376,
	324, 577, 434, 1312, 54, 1201, 1120, 1131, 1135, 707,
	1138, 1831, 1009, 1857, 1855, 778, 773, 72, 1834, 72,
	1631, 72, 1865, 1872, 72, 1053, 1177, 72, 425, 1222,
	34, 403, 1189, 1190, 1191, 401, 72, 456, 35, 1272,
	1874, 1274, 509, 72, 1238, 72, 1477, 1703, 377, 1364,
	1640, 378, 1275, 1246, 1882, 1375, 1702, 492, 1003, 241,
	1550, 1249, 707, 1674, 1075, 1076, 455, 1691, 1161, 325,
	1294, 1104, 729, 1759, 1260, 1169, 1594, 1415, 1276, 690,
	1262, 1261, 1452, 1205, 1263, 70, 1054, 1297, 1267, 818,
	456, 993, 578, 1268, 253, 254, 255, 1374, 1482, 272,
	810, 1319, 284, 1803, 1295, 66, 455, 259, 1283, 1162,
	272, 573, 1282, 1646, 1317, 801, 1306, 331, 331, 325,
	55, 70, 995, 1692, 70, 70, 350, 1333, 757, 1305,
	994, 996, 1368, 1360, 1361, 1362, 1363, 1365, 1551, 1881,
	706, 1213, 761, 1212, 1552, 1163, 1160, 1675, 730, 730,
	1642, 262, 1479, 1597, 1375, 61, 1313, 1311, 262, 1593,
	1596, 1102, 1105, 412, 1296, 1478, 732, 1647, 325, 1208,
	361, 360, 267, 447, 578, 322, 759, 263, 63, 267,
	1462, 1315, 72, 1617, 263, 1320, 1101, 760, 1474, 1427,
	1689, 1429, 1286, 1150, 1752, 1342, 1117, 1673, 1800, 1389,
	264, 1497, 1419, 1164, 1353, 64, 1321, 264, 1229, 1115,
	1690, 1018, 964, 59, 72, 72, 431, 266, 430, 60,
	1390, 429, 1250, 1443, 266, 428, 427, 426, 1392, 1393,
	1394, 423, 1360, 1361, 1362, 1363, 1365, 359, 58, 901,
	72, 1325, 72, 1595, 72, 1327, 1411, 793, 1149, 1827,
	72, 1575, 1428, 730, 1438, 1417, 1426, 1337, 1338, 72,
	1103, 1414, 1442, 72, 1316, 1159, 1465, 1431, 1279, 72,
	595, 1318, 1056, 72, 1113, 72, 1112, 1050, 991, 694,
	1118, 1445, 1221, 691, 1444, 686, 1169, 1169, 1446, 583,
	1384, 1455, 1457, 1458, 579, 1515, 70, 364, 70, 284,
	1290, 1397, 265, 817, 1488, 1463, 730, 1710, 1859, 265,
	1471, 458, 335, 781, 399, 419, 1487, 72, 940, 596,
	1712, 956, 597, 1481, 955, 1511, 1512, 1513, 1440, 404,
	1476, 1062, 284, 284, 1480, 1721, 1500, 1169, 1169, 1169,
	1433, 1434, 1485, 1486, 1795, 268, 1475, 1294, 940, 1767,
	3, 462, 268, 959, 953, 258, 731, 1508, 1586, 1114,
	958, 1787, 1051, 975, 1297, 272, 1116, 70, 834, 284,
	284, 753, 448, 699, 1527, 1292, 1522, 1000, 459, 336,
	300, 1295, 1879, 72, 72, 72, 707, 331, 1063, 1880,
	1587, 72, 72, 1570, 420, 1293, 269, 72, 70, 72,
	1459, 72, 72, 72, 1358, 1359, 72, 1558, 1450, 1557,
	70, 1591, 1592, 1404, 707, 707, 343, 70, 70, 70,
	1253, 684, 707, 707, 840, 841, 1574, 1197, 1571, 1194,
	303, 304, 1030, 1029, 1193, 1144, 1031, 72, 72, 703,
	1788, 1296, 1660, 1504, 1514, 1280, 1032, 894, 309, 72,
	72, 1697, 70, 72, 260, 707, 792, 1627, 1612, 749,
	1607, 749, 72, 72, 1624, 1623, 1630, 1625, 1611, 1624,
	1623, 424, 1625, 1582, 1666, 1583, 1822, 1345, 1169, 1169,
	1748, 284, 1649, 749, 284, 284, 284, 284, 284, 800,
	1730, 72, 1628, 284, 1148, 1629, 1650, 899, 272, 33,
	1585, 1621, 1555, 485, 1576, 815, 1416, 1588, 1044, 1043,
	598, 782, 1654, 1565, 771, 508, 729, 729, 765, 774,
	1637, 1638, 1157, 331, 1643, 562, 836, 1169, 1169, 1169,
	1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1169,
	1169, 1169, 1169, 1169, 1169, 1169, 72, 1169, 72, 1672,
	72, 72, 510, 704, 511, 705, 926, 498, 702, 72,
	372, 1287, 707, 979, 1584, 1684, 1145, 1341, 480, 897,
	484, 1706, 1707, 490, 1524, 1525, 489, 1132, 395, 481,
	72, 1687, 1529, 1530, 706, 706, 1644, 1685, 1298, 45,
	409, 278, 1635, 279, 1236, 1608, 69, 1057, 822, 1425,
	1711, 313, 72, 1355, 72, 397, 1722, 1175, 1720, 1167,
	732, 732, 1165, 72, 1156, 1561, 442, 568, 980, 72,
	421, 729, 1242, 1725, 1713, 70, 1624, 1623, 999, 1625,
	730, 467, 339, 945, 830, 346, 349, 70, 334, 1741,
	333, 70, 962, 1040, 1734, 418, 758, 1023, 305, 1761,
	1747, 1766, 1422, 1807, 62, 24, 22, 21, 730, 730,
	72, 20, 707, 19, 17, 16, 730, 730, 15, 23,
	13, 1763, 12, 11, 729, 10, 32, 31, 30, 72,
	72, 29, 1758, 72, 1737, 28, 5, 72, 2, 706,
	1754, 1, 72, 1757, 0, 0, 1775, 0, 0, 730,
	0, 0, 1783, 0, 0, 0, 72, 1784, 0, 0,
	325, 595, 590, 0, 1776, 732, 0, 1777, 1624, 1623,
	1779, 1625, 0, 1778, 1323, 1324, 1789, 0, 1790, 0,
	0, 0, 0, 72, 0, 72, 72, 1794, 72, 0,
	707, 70, 706, 983, 984, 1791, 70, 743, 0, 70,
	1813, 284, 284, 1811, 1169, 1805, 0, 72, 0, 1817,
	596, 1816, 0, 597, 0, 1814, 0, 1797, 732, 1809,
	1815, 1820, 0, 1819, 0, 1381, 1382, 1383, 0, 0,
	0, 72, 1818, 72, 0, 1624, 1623, 0, 1625, 1837,
	1839, 1843, 0, 0, 0, 0, 0, 0, 72, 0,
	731, 731, 0, 1840, 749, 836, 730, 339, 1856, 349,
	1852, 1854, 1841, 0, 1860, 0, 0, 707, 0, 0,
	1861, 1864, 1705, 1863, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1875, 1877, 0, 1876, 0, 1878, 0,
	1169, 1781, 0, 0, 0, 1586, 0, 1579, 0, 0,
	0, 1035, 1883, 0, 0, 1577, 0, 0, 0, 1581,
	0, 1358, 1359, 0, 0, 70, 945, 0, 0, 0,
	836, 0, 0, 0, 0, 0, 0, 1587, 339, 0,
	0, 0, 0, 703, 703, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1580, 70, 0, 0,
	284, 0, 0, 0, 0, 731, 730, 0, 0, 566,
	0, 1373, 1825, 0, 0, 0, 1495, 1496, 0, 1169,
	0, 589, 0, 0, 0, 0, 0, 0, 339, 681,
	681, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 731, 1364,
	1582, 0, 1583, 339, 0, 1531, 1532, 1533, 1534, 1535,
	1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544, 1545,
	1546, 1547, 1548, 1549, 730, 1553, 0, 1585, 703, 0,
	0, 0, 0, 0, 1588, 70, 1203, 1204, 729, 0,
	0, 945, 0, 0, 1209, 0, 0, 1374, 0, 0,
	1214, 1215, 1217, 1219, 1220, 0, 0, 0, 1225, 252,
	0, 1227, 0, 0, 70, 285, 729, 729, 0, 0,
	0, 70, 0, 1240, 729, 729, 0, 0, 0, 0,
	70, 703, 0, 298, 0, 0, 0, 0, 0, 70,
	0, 1584, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 730, 54, 0, 1375, 0, 706, 729, 0, 0,
	1035, 749, 0, 0, 0, 0, 1035, 0, 287, 0,
	0, 471, 471, 292, 293, 0, 0, 299, 34, 0,
	570, 0, 732, 0, 706, 706, 35, 0, 0, 286,
	288, 0, 706, 706, 815, 591, 815, 0, 284, 0,
	0, 70, 0, 0, 1281, 0, 0, 0, 0, 0,
	732, 732, 0, 1284, 0, 0, 0, 0, 732, 732,
	1303, 0, 70, 0, 0, 706, 933, 289, 1369, 1366,
	1367, 1368, 1360, 1361, 1362, 1363, 1365, 0, 339, 290,
	291, 0, 349, 0, 0, 0, 0, 0, 0, 0,
	0, 732, 0, 0, 0, 294, 0, 0, 0, 0,
	0, 0, 0, 0, 729, 0, 0, 0, 0, 0,
	0, 0, 1358, 1359, 0, 1376, 1377, 1378, 0, 0,
	0, 0, 1694, 0, 0, 0, 0, 0, 1651, 0,
	0, 0, 0, 823, 825, 0, 0, 0, 0, 0,
	832, 0, 0, 61, 0, 0, 0, 0, 0, 0,
	0, 0, 878, 879, 880, 881, 882, 0, 0, 0,
	0, 885, 1373, 0, 1358, 1359, 63, 1376, 1377, 1378,
	0, 0, 706, 0, 0, 0, 0, 0, 0, 0,
	1502, 898, 981, 0, 0, 0, 0, 349, 0, 0,
	349, 0, 295, 64, 0, 296, 0, 0, 732, 836,
	297, 59, 0, 0, 729, 0, 0, 60, 1751, 0,
	1364, 0, 731, 0, 1373, 0, 0, 0, 0, 0,
	0, 0, 840, 841, 0, 0, 243, 0, 0, 0,
	0, 70, 70, 0, 0, 0, 0, 0, 0, 0,
	731, 731, 1379, 0, 0, 843, 0, 0, 731, 731,
	0, 0, 0, 486, 43, 0, 0, 1460, 1374, 945,
	0, 815, 1364, 0, 0, 0, 842, 1470, 0, 0,
	0, 0, 706, 0, 0, 0, 70, 0, 0, 0,
	70, 731, 729, 0, 0, 0, 1303, 1796, 0, 43,
	1490, 0, 1303, 0, 1379, 703, 0, 0, 732, 0,
	0, 0, 0, 0, 0, 0, 339, 0, 0, 318,
	1374, 0, 326, 0, 0, 1375, 0, 0, 0, 43,
	848, 0, 0, 703, 703, 0, 0, 0, 0, 0,
	0, 703, 703, 0, 1519, 0, 0, 0, 339, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	706, 0, 0, 0, 0, 0, 0, 0, 0, 729,
	0, 0, 0, 0, 703, 0, 0, 1375, 858, 0,
	0, 0, 0, 0, 0, 0, 732, 0, 0, 0,
	0, 0, 0, 0, 0, 1370, 1371, 1372, 731, 1369,
	1366, 1367, 1368, 1360, 1361, 1362, 1363, 1365, 0, 0,
	1572, 1573, 945, 0, 0, 0, 0, 0, 836, 836,
	0, 0, 0, 0, 1599, 0, 1600, 0, 70, 1602,
	1603, 0, 0, 1606, 0, 859, 0, 706, 0, 0,
	0, 0, 0, 0, 0, 0, 1202, 1370, 1371, 1372,
	0, 1369, 1366, 1367, 1368, 1360, 1361, 1362, 1363, 1365,
	0, 0, 1620, 732, 836, 945, 0, 1620, 0, 0,
	0, 0, 0, 0, 0, 1230, 70, 70, 0, 0,
	70, 703, 589, 0, 0, 0, 0, 0, 0, 836,
	1303, 589, 1358, 1359, 0, 0, 0, 0, 731, 0,
	339, 0, 0, 0, 0, 0, 0, 326, 0, 853,
	850, 851, 852, 844, 845, 846, 847, 849, 1667, 869,
	0, 0, 0, 0, 0, 0, 471, 0, 0, 0,
	0, 0, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086,
	1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096,
	1097, 1098, 1099, 1100, 0, 1106, 0, 1108, 1109, 1110,
	1111, 0, 1278, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 945, 0, 1686, 731, 284, 1688, 0,
	0, 703, 0, 339, 0, 0, 70, 0, 0, 0,
	1364, 318, 1154, 1155, 0, 1166, 0, 1176, 1178, 1183,
	1186, 1187, 1188, 0, 0, 0, 0, 836, 0, 0,
	0, 1358, 1359, 0, 1376, 1377, 1378, 0, 0, 0,
	0, 0, 570, 0, 1620, 0, 0, 1501, 0, 70,
	0, 1732, 0, 0, 0, 0, 0, 0, 1374, 0,
	70, 0, 0, 0, 0, 0, 836, 0, 0, 0,
	0, 0, 0, 731, 0, 0, 1231, 0, 1234, 703,
	0, 1373, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 815, 0, 0,
	0, 0, 0, 0, 0, 1375, 0, 0, 0, 1259,
	0, 0, 0, 0, 0, 0, 1768, 1769, 0, 1364,
	1773, 0, 0, 0, 1774, 0, 1620, 0, 0, 284,
	0, 318, 0, 0, 318, 318, 0, 0, 0, 0,
	0, 0, 0, 836, 0, 0, 703, 0, 0, 0,
	0, 1379, 0, 0, 0, 0, 0, 884, 832, 0,
	0, 888, 981, 339, 0, 0, 0, 1374, 0, 0,
	1804, 0, 836, 70, 0, 284, 0, 0, 0, 1369,
	1366, 1367, 1368, 1360, 1361, 1362, 1363, 1365, 0, 0,
	0, 0, 0, 1620, 1732, 0, 0, 0, 0, 1308,
	1309, 0, 0, 0, 0, 1314, 0, 339, 0, 0,
	0, 339, 0, 0, 0, 0, 0, 0, 70, 0,
	836, 0, 0, 0, 1375, 0, 0, 0, 1328, 0,
	0, 0, 0, 0, 0, 1853, 0, 1336, 0, 0,
	0, 0, 0, 0, 0, 1344, 0, 840, 841, 1349,
	860, 861, 862, 870, 871, 872, 0, 0, 0, 0,
	0, 0, 0, 863, 0, 0, 0, 0, 0, 0,
	843, 885, 874, 0, 0, 0, 0, 1183, 1183, 1183,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 842, 0, 0, 1370, 1371, 1372, 857, 1369, 1366,
	1367, 1368, 1360, 1361, 1362, 1363, 1365, 0, 1418, 840,
	841, 0, 860, 861, 862, 870, 871, 872, 0, 0,
	0, 0, 0, 0, 0, 863, 0, 0, 0, 0,
	0, 471, 843, 0, 874, 0, 0, 0, 0, 471,
	0, 0, 0, 570, 0, 848, 0, 0, 0, 1601,
	0, 0, 0, 842, 43, 0, 43, 0, 0, 857,
	0, 0, 867, 875, 0, 0, 0, 0, 0, 43,
	0, 0, 0, 43, 0, 0, 0, 873, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 865, 0, 0,
	0, 0, 0, 858, 0, 0, 0, 339, 339, 0,
	0, 339, 0, 0, 0, 1493, 0, 848, 1494, 0,
	0, 0, 0, 0, 0, 864, 0, 0, 0, 1499,
	0, 0, 0, 0, 867, 875, 0, 0, 0, 0,
	0, 0, 1259, 0, 0, 0, 0, 0, 0, 873,
	0, 1516, 0, 0, 0, 0, 0, 0, 0, 865,
	859, 1526, 0, 0, 1528, 858, 0, 0, 0, 0,
	0, 868, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 864, 0, 0,
	0, 0, 0, 43, 0, 0, 0, 1559, 1560, 0,
	0, 0, 0, 0, 0, 0, 1566, 1567, 1568, 0,
	0, 0, 0, 0, 0, 0, 0, 1695, 0, 0,
	0, 0, 859, 1072, 0, 0, 0, 866, 0, 0,
	854, 855, 856, 868, 853, 850, 851, 852, 844, 845,
	846, 847, 849, 0, 869, 0, 967, 471, 0, 0,
	0, 0, 0, 0, 0, 968, 0, 0, 0, 1123,
	1729, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 339, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1634, 0, 0, 0, 0, 0, 0, 866,
	0, 0, 854, 855, 856, 0, 853, 850, 851, 852,
	844, 845, 846, 847, 849, 1653, 869, 0, 0, 1656,
	1657, 0, 0, 1680, 1659, 0, 840, 841, 1661, 860,
	861, 862, 870, 871, 872, 1665, 0, 0, 0, 1668,
	0, 0, 863, 0, 0, 0, 0, 0, 0, 843,
	0, 874, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 326, 0, 0,
	842, 0, 1677, 0, 0, 0, 857, 840, 841, 0,
	860, 861, 862, 870, 871, 872, 0, 0, 0, 0,
	0, 0, 0, 863, 0, 0, 0, 0, 0, 0,
	843, 0, 874, 0, 1806, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1704, 0, 0, 0, 0, 0,
	0, 842, 0, 0, 848, 0, 0, 857, 1358, 1359,
	0, 1376, 1377, 1378, 0, 0, 0, 0, 0, 0,
	1723, 867, 875, 0, 0, 43, 0, 0, 0, 981,
	0, 0, 0, 0, 0, 0, 873, 0, 43, 1736,
	0, 0, 0, 0, 0, 0, 865, 0, 1304, 1743,
	1744, 0, 858, 0, 0, 848, 0, 0, 1373, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 867, 875, 864, 0, 0, 0, 1756, 1123,
	0, 0, 0, 0, 0, 0, 0, 873, 0, 0,
	0, 1760, 0, 0, 0, 0, 0, 865, 884, 0,
	0, 0, 0, 858, 0, 0, 1364, 0, 0, 859,
	0, 0, 0, 570, 0, 0, 0, 0, 0, 0,
	868, 0, 0, 0, 1380, 864, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1379, 0,
	0, 0, 0, 0, 0, 0, 0, 884, 0, 0,
	0, 0, 0, 0, 1374, 0, 0, 0, 0, 0,
	859, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 868, 0, 0, 0, 0, 866, 0, 0, 854,
	855, 856, 0, 853, 850, 851, 852, 844, 845, 846,
	847, 849, 0, 869, 0, 0, 0, 0, 0, 0,
	1400, 0, 0, 0, 0, 0, 1838, 0, 0, 0,
	0, 1375, 0, 0, 0, 0, 0, 0, 1072, 0,
	0, 1851, 1851, 0, 0, 0, 0, 866, 0, 0,
	854, 855, 856, 0, 853, 850, 851, 852, 844, 845,
	846, 847, 849, 0, 869, 0, 1851, 0, 0, 0,
	0, 1399, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1072, 0, 0, 0, 1072, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1851, 0, 0,
	0, 1370, 1371, 1372, 0, 1369, 1366, 1367, 1368, 1360,
	1361, 1362, 1363, 1365, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 506, 495, 496, 493,
	494, 482, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 74, 75, 0, 76, 0, 0, 0, 0,
	522, 488, 0, 0, 0, 77, 78, 0, 536, 189,
	537, 79, 538, 539, 0, 80, 193, 194, 81, 503,
	521, 540, 541, 197, 0, 532, 0, 514, 0, 82,
	83, 84, 0, 85, 0, 86, 87, 88, 0, 381,
	89, 1850, 0, 515, 517, 0, 516, 518, 91, 92,
	93, 94, 542, 95, 543, 544, 0, 96, 0, 97,
	0, 0, 0, 535, 99, 0, 100, 0, 0, 0,
	487, 101, 102, 523, 501, 0, 0, 103, 104, 545,
	0, 105, 0, 106, 0, 43, 382, 0, 107, 533,
	0, 206, 0, 108, 109, 529, 531, 0, 0, 112,
	0, 110, 0, 383, 111, 546, 547, 548, 549, 0,
	513, 0, 43, 113, 386, 114, 115, 0, 0, 534,
	387, 116, 1072, 1072, 117, 0, 1072, 118, 0, 119,
	120, 121, 122, 123, 389, 124, 125, 128, 126, 477,
	127, 502, 530, 129, 550, 130, 131, 0, 0, 0,
	0, 0, 132, 217, 390, 133, 391, 524, 134, 135,
	136, 0, 525, 137, 220, 138, 0, 139, 140, 141,
	551, 142, 143, 0, 145, 146, 144, 147, 0, 148,
	392, 149, 150, 491, 151, 0, 152, 153, 154, 0,
	223, 155, 156, 519, 157, 158, 0, 159, 552, 225,
	160, 0, 166, 161, 162, 163, 165, 553, 164, 526,
	0, 167, 0, 168, 169, 0, 228, 554, 555, 0,
	0, 170, 527, 528, 500, 171, 172, 1849, 174, 0,
	0, 175, 176, 177, 520, 0, 178, 179, 180, 233,
	556, 0, 0, 181, 0, 0, 0, 0, 182, 183,
	184, 185, 0, 0, 0, 0, 0, 1714, 0, 0,
	0, 0, 0, 474, 475, 0, 0, 0, 0, 476,
	0, 0, 483, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1072, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 594, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	75, 599, 76, 600, 601, 602, 603, 186, 604, 605,
	606, 607, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 608, 80, 193, 194, 81, 609, 610, 195, 196,
	197, 611, 198, 612, 380, 613, 82, 83, 84, 884,
	85, 614, 86, 87, 88, 615, 381, 89, 90, 616,
	617, 618, 619, 620, 621, 91, 92, 93, 94, 199,
	95, 200, 201, 622, 96, 623, 97, 624, 625, 626,
	98, 99, 627, 100, 628, 0, 629, 202, 101, 102,
	203, 630, 631, 632, 103, 104, 204, 0, 105, 633,
	106, 634, 635, 382, 636, 107, 205, 637, 206, 638,
	108, 109, 207, 208, 384, 639, 112, 640, 110, 641,
	383, 111, 209, 210, 211, 212, 642, 213, 643, 385,
	113, 386, 114, 115, 644, 645, 214, 387, 116, 388,
	646, 117, 647, 648, 118, 0, 119, 120, 121, 122,
	123, 389, 124, 125, 128, 126, 649, 127, 650, 215,
	129, 216, 130, 131, 651, 652, 653, 654, 655, 132,
	217, 390, 133, 391, 218, 134, 135, 136, 656, 219,
	137, 220, 138, 657, 139, 140, 141, 221, 142, 143,
	658, 145, 146, 144, 147, 659, 148, 392, 149, 150,
	222, 151, 0, 152, 153, 154, 660, 223, 155, 156,
	661, 157, 158, 393, 159, 224, 225, 160, 662, 166,
	161, 162, 163, 165, 226, 164, 227, 663, 167, 664,
	168, 169, 665, 228, 229, 230, 666, 667, 170, 231,
	232, 668, 171, 172, 173, 174, 669, 670, 175, 176,
	177, 671, 672, 178, 179, 180, 233, 234, 673, 674,
	181, 675, 676, 677, 678, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	594, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1489, 74, 75, 599, 76,
	600, 601, 602, 603, 186, 604, 605, 606, 607, 77,
	78, 187, 188, 189, 190, 79, 191, 192, 608, 80,
	193, 194, 81, 609, 610, 195, 196, 197, 611, 198,
	612, 380, 613, 82, 83, 84, 0, 85, 614, 86,
	87, 88, 615, 381, 89, 90, 616, 617, 618, 619,
	620, 621, 91, 92, 93, 94, 199, 95, 200, 201,
	622, 96, 623, 97, 624, 625, 626, 98, 99, 627,
	100, 628, 0, 629, 202, 101, 102, 203, 630, 631,
	632, 103, 104, 204, 0, 105, 633, 106, 634, 635,
	382, 636, 107, 205, 637, 206, 638, 108, 109, 207,
	208, 384, 639, 112, 640, 110, 641, 383, 111, 209,
	210, 211, 212, 642, 213, 643, 385, 113, 386, 114,
	115, 644, 645, 214, 387, 116, 388, 646, 117, 647,
	648, 118, 0, 119, 120, 121, 122, 123, 389, 124,
	125, 128, 126, 649, 127, 650, 215, 129, 216, 130,
	131, 651, 652, 653, 654, 655, 132, 217, 390, 133,
	391, 218, 134, 135, 136, 656, 219, 137, 220, 138,
	657, 139, 140, 141, 221, 142, 143, 658, 145, 146,
	144, 147, 659, 148, 392, 149, 150, 222, 151, 0,
	152, 153, 154, 660, 223, 155, 156, 661, 157, 158,
	393, 159, 224, 225, 160, 662, 166, 161, 162, 163,
	165, 226, 164, 227, 663, 167, 664, 168, 169, 665,
	228, 229, 230, 666, 667, 170, 231, 232, 668, 171,
	172, 173, 174, 669, 670, 175, 176, 177, 671, 672,
	178, 179, 180, 233, 234, 673, 674, 181, 675, 676,
	677, 678, 182, 183, 184, 185, 594, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 593,
	0, 0, 74, 75, 599, 76, 600, 601, 602, 603,
	186, 604, 605, 606, 607, 77, 78, 187, 188, 189,
	190, 79, 191, 192, 608, 80, 193, 194, 81, 609,
	610, 195, 196, 197, 611, 198, 612, 380, 613, 82,
	83, 84, 0, 85, 614, 86, 87, 88, 615, 381,
	89, 90, 616, 617, 618, 619, 620, 621, 91, 92,
	93, 94, 199, 95, 200, 201, 622, 96, 623, 97,
	624, 625, 626, 98, 99, 627, 100, 628, 0, 629,
	202, 101, 102, 203, 630, 631, 632, 103, 104, 204,
	0, 105, 633, 106, 634, 635, 382, 636, 107, 205,
	637, 206, 638, 108, 109, 207, 208, 384, 639, 112,
	640, 110, 641, 383, 111, 209, 210, 211, 212, 642,
	213, 643, 385, 113, 386, 114, 115, 644, 645, 214,
	387, 116, 388, 646, 117, 647, 648, 118, 0, 119,
	120, 121, 122, 123, 389, 124, 125, 128, 126, 649,
	127, 650, 215, 129, 216, 130, 131, 651, 652, 653,
	654, 655, 132, 217, 390, 133, 391, 218, 134, 135,
	136, 656, 219, 137, 220, 138, 657, 139, 140, 141,
	221, 142, 143, 658, 145, 146, 144, 147, 659, 148,
	392, 149, 150, 222, 151, 0, 152, 153, 154, 660,
	223, 155, 156, 661, 157, 158, 393, 159, 224, 225,
	160, 662, 166, 161, 162, 163, 165, 226, 164, 227,
	663, 167, 664, 168, 169, 665, 228, 229, 230, 666,
	667, 170, 231, 232, 668, 171, 172, 173, 174, 669,
	670, 175, 176, 177, 671, 672, 178, 179, 180, 233,
	234, 673, 674, 181, 675, 676, 677, 678, 182, 183,
	184, 185, 506, 495, 496, 493, 494, 482, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 75,
	1140, 76, 0, 0, 0, 0, 522, 488, 0, 0,
	0, 77, 78, 187, 536, 189, 537, 79, 538, 539,
	0, 80, 193, 194, 81, 503, 521, 540, 541, 197,
	0, 532, 0, 514, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 381, 89, 90, 0, 515,
	517, 0, 516, 518, 91, 92, 93, 94, 542, 95,
	543, 544, 0, 96, 0, 97, 0, 1141, 0, 535,
	99, 0, 100, 0, 0, 0, 487, 101, 102, 523,
	501, 0, 0, 103, 104, 545, 0, 105, 0, 106,
	0, 0, 382, 0, 107, 533, 0, 206, 0, 108,
	109, 529, 531, 384, 0, 112, 0, 110, 0, 383,
	111, 546, 547, 548, 549, 0, 513, 0, 385, 113,
	386, 114, 115, 0, 0, 534, 387, 116, 388, 0,
	117, 0, 0, 118, 0, 119, 120, 121, 122, 123,
	389, 124, 125, 128, 126, 477, 127, 502, 530, 129,
	550, 130, 131, 0, 0, 0, 0, 0, 132, 217,
	390, 133, 391, 524, 134, 135, 136, 0, 525, 137,
	220, 138, 0, 139, 140, 141, 551, 142, 143, 0,
	145, 146, 144, 147, 0, 148, 392, 149, 150, 491,
	151, 0, 152, 153, 154, 0, 223, 155, 156, 519,
	157, 158, 393, 159, 552, 225, 160, 0, 166, 161,
	162, 163, 165, 553, 164, 526, 0, 167, 0, 168,
	169, 0, 228, 554, 555, 0, 0, 170, 527, 528,
	500, 171, 172, 173, 174, 0, 0, 175, 176, 177,
	520, 0, 178, 179, 180, 233, 556, 1139, 0, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 474,
	475, 1142, 0, 0, 0, 476, 0, 0, 483, 1137,
	506, 495, 496, 493, 494, 482, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 0, 0, 522, 488, 0, 0, 0, 77,
	78, 187, 536, 189, 537, 79, 538, 539, 0, 80,
	193, 194, 81, 503, 521, 540, 541, 197, 0, 532,
	0, 514, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 381, 89, 90, 0, 515, 517, 0,
	516, 518, 91, 92, 93, 94, 542, 95, 543, 544,
	571, 96, 0, 97, 0, 0, 0, 535, 99, 0,
	100, 0, 0, 0, 487, 101, 102, 523, 501, 0,
	0, 103, 104, 545, 0, 105, 0, 106, 0, 0,
	382, 0, 107, 533, 0, 206, 0, 108, 109, 529,
	531, 384, 0, 112, 0, 110, 0, 383, 111, 546,
	547, 548, 549, 0, 513, 0, 385, 113, 386, 114,
	115, 0, 0, 534, 387, 116, 388, 0, 117, 0,
	0, 118, 0, 119, 120, 121, 122, 123, 389, 124,
	125, 128, 126, 477, 127, 502, 530, 129, 550, 130,
	131, 0, 0, 0, 0, 0, 132, 217, 390, 133,
	391, 524, 134, 135, 136, 0, 525, 137, 220, 138,
	0, 139, 140, 141, 551, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 392, 149, 150, 491, 151, 0,
	152, 153, 154, 61, 223, 155, 156, 519, 157, 158,
	393, 159, 552, 225, 160, 0, 166, 161, 162, 163,
	165, 553, 164, 526, 0, 167, 63, 168, 169, 0,
	228, 554, 555, 0, 0, 170, 527, 528, 500, 171,
	172, 173, 174, 0, 0, 175, 176, 177, 520, 0,
	178, 179, 180, 379, 556, 0, 0, 181, 0, 0,
	0, 59, 182, 183, 184, 185, 478, 60, 506, 495,
	496, 493, 494, 482, 0, 0, 0, 474, 475, 0,
	0, 0, 0, 476, 74, 75, 483, 76, 0, 0,
	0, 0, 522, 488, 0, 0, 0, 77, 78, 187,
	536, 189, 537, 79, 538, 539, 0, 80, 193, 194,
	81, 503, 521, 540, 541, 197, 0, 532, 0, 514,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 381, 89, 90, 0, 515, 517, 0, 516, 518,
	91, 92, 93, 94, 542, 95, 543, 544, 0, 96,
	0, 97, 0, 0, 0, 535, 99, 0, 100, 0,
	0, 0, 487, 101, 102, 523, 501, 0, 0, 103,
	104, 545, 0, 105, 0, 106, 0, 0, 382, 0,
	107, 533, 0, 206, 0, 108, 109, 529, 531, 384,
	0, 112, 0, 110, 0, 383, 111, 546, 547, 548,
	549, 0, 513, 0, 385, 113, 386, 114, 115, 0,
	0, 534, 387, 116, 388, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 389, 124, 125, 128,
	126, 477, 127, 502, 530, 129, 550, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 390, 133, 391, 524,
	134, 135, 136, 0, 525, 137, 220, 138, 0, 139,
	140, 141, 551, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 392, 149, 150, 491, 151, 0, 152, 153,
	154, 61, 223, 155, 156, 519, 157, 158, 393, 159,
	552, 225, 160, 0, 166, 161, 162, 163, 165, 553,
	164, 526, 0, 167, 63, 168, 169, 0, 228, 554,
	555, 0, 0, 170, 527, 528, 500, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 520, 0, 178, 179,
	180, 379, 556, 0, 0, 181, 0, 0, 0, 59,
	182, 183, 184, 185, 478, 60, 506, 495, 496, 493,
	494, 482, 0, 0, 0, 474, 475, 0, 0, 0,
	0, 476, 74, 75, 483, 76, 0, 0, 0, 0,
	522, 488, 0, 0, 0, 77, 78, 187, 536, 189,
	537, 79, 538, 539, 1179, 80, 193, 194, 81, 503,
	521, 540, 541, 197, 0, 532, 0, 514, 0, 82,
	83, 84, 0, 85, 0, 86, 87, 88, 0, 381,
	89, 90, 0, 515, 517, 0, 516, 518, 91, 92,
	93, 94, 542, 95, 543, 544, 0, 96, 0, 97,
	0, 0, 0, 535, 99, 0, 100, 0, 0, 0,
	487, 101, 102, 523, 501, 0, 0, 103, 104, 545,
	0, 105, 0, 106, 0, 1184, 382, 0, 107, 533,
	0, 206, 0, 108, 109, 529, 531, 384, 0, 112,
	0, 110, 0, 383, 111, 546, 547, 548, 549, 0,
	513, 0, 385, 113, 386, 114, 115, 0, 1180, 534,
	387, 116, 388, 0, 117, 0, 0, 118, 0, 119,
	120, 121, 122, 123, 389, 124, 125, 128, 126, 477,
	127, 502, 530, 129, 550, 130, 131, 0, 0, 0,
	0, 0, 132, 217, 390, 133, 391, 524, 134, 135,
	136, 0, 525, 137, 220, 138, 0, 139, 140, 141,
	551, 142, 143, 0, 145, 146, 144, 147, 0, 148,
	392, 149, 150, 491, 151, 0, 152, 153, 154, 0,
	223, 155, 156, 519, 157, 158, 393, 159, 552, 225,
	160, 0, 166, 161, 162, 163, 165, 553, 164, 526,
	0, 167, 0, 168, 169, 0, 228, 554, 555, 0,
	1181, 170, 527, 528, 500, 171, 172, 173, 174, 0,
	0, 175, 176, 177, 520, 0, 178, 179, 180, 233,
	556, 0, 0, 181, 0, 0, 0, 0, 182, 183,
	184, 185, 478, 0, 506, 495, 496, 493, 494, 482,
	0, 0, 0, 474, 475, 0, 0, 0, 0, 476,
	74, 75, 483, 76, 0, 0, 0, 0, 522, 488,
	0, 0, 0, 77, 78, 187, 536, 189, 537, 79,
	538, 539, 0, 80, 193, 194, 81, 503, 521, 540,
	541, 197, 0, 532, 0, 514, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 381, 89, 90,
	0, 515, 517, 0, 516, 518, 91, 92, 93, 94,
	542, 95, 543, 544, 0, 96, 0, 97, 0, 0,
	0, 535, 99, 0, 100, 0, 0, 0, 487, 101,
	102, 523, 501, 0, 0, 103, 104, 545, 0, 105,
	0, 106, 0, 0, 382, 0, 107, 533, 0, 206,
	0, 108, 109, 529, 531, 384, 0, 112, 0, 110,
	0, 383, 111, 546, 547, 548, 549, 0, 513, 0,
	385, 113, 386, 114, 115, 0, 0, 534, 387, 116,
	388, 0, 117, 0, 0, 118, 0, 119, 120, 121,
	122, 123, 389, 124, 125, 128, 126, 477, 127, 502,
	530, 129, 550, 130, 131, 0, 0, 0, 0, 0,
	132, 217, 390, 133, 391, 524, 134, 135, 136, 0,
	525, 137, 220, 138, 0, 139, 140, 141, 551, 142,
	143, 0, 145, 146, 144, 147, 0, 148, 392, 149,
	150, 491, 151, 0, 152, 153, 154, 0, 223, 155,
	156, 519, 157, 158, 393, 159, 552, 225, 160, 0,
	166, 161, 162, 163, 165, 553, 164, 526, 0, 167,
	0, 168, 169, 0, 228, 554, 555, 0, 0, 170,
	527, 528, 500, 171, 172, 173, 174, 0, 0, 175,
	176, 177, 520, 0, 178, 179, 180, 233, 556, 0,
	0, 181, 0, 0, 0, 0, 182, 183, 184, 185,
	478, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 474, 475, 0, 0, 0, 0, 476, 0, 0,
	483, 1556, 506, 495, 496, 493, 494, 482, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 0, 0, 0, 0, 522, 488, 0, 0,
	0, 77, 78, 187, 536, 189, 537, 79, 538, 539,
	0, 80, 193, 194, 81, 503, 521, 540, 541, 197,
	0, 532, 0, 514, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 381, 89, 90, 0, 515,
	517, 0, 516, 518, 91, 92, 93, 94, 542, 95,
	543, 544, 0, 96, 0, 97, 0, 0, 0, 535,
	99, 0, 100, 0, 0, 0, 487, 101, 102, 523,
	501, 0, 0, 103, 104, 545, 0, 105, 0, 106,
	0, 0, 382, 0, 107, 533, 0, 206, 0, 108,
	109, 529, 531, 384, 0, 112, 0, 110, 0, 383,
	111, 546, 547, 548, 549, 0, 513, 0, 385, 113,
	386, 114, 115, 0, 0, 534, 387, 116, 388, 0,
	117, 0, 0, 118, 0, 119, 120, 121, 122, 123,
	389, 124, 125, 128, 126, 477, 127, 502, 530, 129,
	550, 130, 131, 0, 0, 0, 0, 0, 132, 217,
	390, 133, 391, 524, 134, 135, 136, 0, 525, 137,
	220, 138, 0, 139, 140, 141, 551, 142, 143, 0,
	145, 146, 144, 147, 0, 148, 392, 149, 150, 491,
	151, 0, 152, 153, 154, 0, 223, 155, 156, 519,
	157, 158, 393, 159, 552, 225, 160, 0, 166, 161,
	162, 163, 165, 553, 164, 526, 0, 167, 0, 168,
	169, 0, 228, 554, 555, 0, 0, 170, 527, 528,
	500, 171, 172, 173, 174, 0, 0, 175, 176, 177,
	520, 0, 178, 179, 180, 233, 556, 0, 0, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 478, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 474,
	475, 0, 0, 0, 0, 476, 0, 0, 483, 1505,
	506, 495, 496, 493, 494, 482, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 0, 0, 522, 488, 0, 0, 0, 77,
	78, 187, 536, 189, 537, 79, 538, 539, 0, 80,
	193, 194, 81, 503, 521, 540, 541, 197, 0, 532,
	0, 514, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 381, 89, 90, 0, 515, 517, 0,
	516, 518, 91, 92, 93, 94, 542, 95, 543, 544,
	0, 96, 0, 97, 0, 0, 0, 535, 99, 0,
	100, 0, 0, 0, 487, 101, 102, 523, 501, 0,
	0, 103, 104, 545, 0, 105, 0, 106, 0, 0,
	382, 0, 107, 533, 0, 206, 0, 108, 109, 529,
	531, 384, 0, 112, 0, 110, 0, 383, 111, 546,
	547, 548, 549, 0, 513, 0, 385, 113, 386, 114,
	115, 0, 0, 534, 387, 116, 388, 0, 117, 0,
	0, 118, 0, 119, 120, 121, 122, 123, 389, 124,
	125, 128, 126, 477, 127, 502, 530, 129, 550, 130,
	131, 0, 0, 0, 0, 0, 132, 217, 390, 133,
	391, 524, 134, 135, 136, 0, 525, 137, 220, 138,
	0, 139, 140, 141, 551, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 392, 149, 150, 491, 151, 0,
	152, 153, 154, 0, 223, 155, 156, 519, 157, 158,
	393, 159, 552, 225, 160, 0, 166, 161, 162, 163,
	165, 553, 164, 526, 0, 167, 0, 168, 169, 0,
	228, 554, 555, 0, 0, 170, 527, 528, 500, 171,
	172, 173, 174, 0, 0, 175, 176, 177, 520, 0,
	178, 179, 180, 233, 556, 0, 0, 181, 0, 0,
	0, 0, 182, 183, 184, 185, 478, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 474, 475, 0,
	0, 0, 0, 476, 0, 0, 483, 1136, 506, 495,
	496, 493, 494, 482, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 522, 488, 0, 0, 0, 77, 78, 187,
	536, 189, 537, 79, 538, 539, 0, 80, 193, 194,
	81, 503, 521, 540, 541, 197, 0, 532, 0, 514,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 381, 89, 90, 0, 515, 517, 0, 516, 518,
	91, 92, 93, 94, 542, 95, 543, 544, 0, 96,
	0, 97, 0, 0, 0, 535, 99, 0, 100, 0,
	0, 0, 487, 101, 102, 523, 501, 0, 0, 103,
	104, 545, 0, 105, 0, 106, 0, 0, 382, 0,
	107, 533, 0, 206, 0, 108, 109, 529, 531, 384,
	0, 112, 0, 110, 0, 383, 111, 546, 547, 548,
	549, 0, 513, 0, 385, 113, 386, 114, 115, 0,
	0, 534, 387, 116, 388, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 389, 124, 125, 128,
	126, 477, 127, 502, 530, 129, 550, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 390, 133, 391, 524,
	134, 135, 136, 0, 525, 137, 220, 138, 0, 139,
	140, 141, 551, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 392, 149, 150, 491, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 519, 157, 158, 393, 159,
	552, 225, 160, 0, 166, 161, 162, 163, 165, 553,
	164, 526, 0, 167, 0, 168, 169, 0, 228, 554,
	555, 0, 0, 170, 527, 528, 500, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 520, 0, 178, 179,
	180, 233, 556, 0, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 478, 0, 0, 0, 0, 506,
	495, 496, 493, 494, 482, 474, 475, 0, 0, 0,
	0, 476, 890, 1133, 483, 74, 75, 0, 76, 0,
	0, 0, 0, 522, 488, 0, 0, 0, 77, 78,
	187, 536, 189, 537, 79, 538, 539, 0, 80, 193,
	194, 81, 503, 521, 540, 541, 197, 0, 532, 0,
	514, 0, 82, 83, 84, 0, 85, 0, 86, 87,
	88, 0, 381, 89, 90, 0, 515, 517, 0, 516,
	518, 91, 92, 93, 94, 542, 95, 543, 544, 0,
	96, 0, 97, 0, 0, 0, 535, 99, 0, 100,
	0, 0, 0, 487, 101, 102, 523, 501, 0, 0,
	103, 104, 545, 0, 105, 0, 106, 0, 0, 382,
	0, 107, 533, 0, 206, 0, 108, 109, 529, 531,
	384, 0, 112, 0, 110, 0, 383, 111, 546, 547,
	548, 549, 0, 513, 0, 385, 113, 386, 114, 115,
	0, 0, 534, 387, 116, 388, 0, 117, 0, 0,
	118, 0, 119, 120, 121, 122, 123, 389, 124, 125,
	128, 126, 477, 127, 502, 530, 129, 550, 130, 131,
	0, 0, 0, 0, 0, 132, 217, 390, 133, 391,
	524, 134, 135, 136, 0, 525, 137, 220, 138, 0,
	139, 140, 141, 551, 142, 143, 0, 145, 146, 144,
	147, 0, 148, 392, 149, 150, 491, 151, 0, 152,
	153, 154, 0, 223, 155, 156, 519, 157, 158, 393,
	159, 552, 225, 160, 0, 166, 161, 162, 163, 165,
	553, 164, 526, 0, 167, 0, 168, 169, 0, 228,
	554, 555, 0, 0, 170, 527, 528, 500, 171, 172,
	173, 174, 0, 0, 175, 176, 177, 520, 0, 178,
	179, 180, 233, 556, 0, 0, 181, 0, 0, 0,
	0, 182, 183, 184, 185, 478, 0, 506, 495, 496,
	493, 494, 482, 0, 0, 0, 474, 475, 472, 0,
	0, 0, 476, 74, 75, 483, 76, 0, 0, 0,
	0, 522, 488, 0, 0, 0, 77, 78, 187, 536,
	189, 537, 79, 538, 539, 0, 80, 193, 194, 81,
	503, 521, 540, 541, 197, 0, 532, 0, 514, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	381, 89, 90, 0, 515, 517, 0, 516, 518, 91,
	92, 93, 94, 542, 95, 543, 544, 0, 96, 0,
	97, 0, 0, 0, 535, 99, 0, 100, 0, 0,
	0, 487, 101, 102, 523, 501, 0, 0, 103, 104,
	545, 0, 105, 0, 106, 0, 0, 382, 0, 107,
	533, 0, 206, 0, 108, 109, 529, 531, 384, 0,
	112, 0, 110, 0, 383, 111, 546, 547, 548, 549,
	0, 513, 0, 385, 113, 386, 114, 115, 0, 0,
	534, 387, 116, 388, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 123, 389, 124, 125, 128, 126,
	477, 127, 502, 530, 129, 550, 130, 131, 0, 0,
	0, 0, 0, 132, 217, 390, 133, 391, 524, 134,
	135, 136, 0, 525, 137, 220, 138, 0, 139, 140,
	141, 551, 142, 143, 0, 145, 146, 144, 147, 0,
	148, 392, 149, 150, 491, 151, 0, 152, 153, 154,
	0, 223, 155, 156, 519, 157, 158, 393, 159, 552,
	225, 160, 0, 166, 161, 162, 163, 165, 553, 164,
	526, 0, 167, 0, 168, 169, 0, 228, 554, 555,
	0, 0, 170, 527, 528, 500, 171, 172, 173, 174,
	0, 0, 175, 176, 177, 520, 0, 178, 179, 180,
	233, 556, 1510, 0, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 478, 0, 506, 495, 496, 493, 494,
	482, 0, 0, 0, 474, 475, 0, 0, 0, 0,
	476, 74, 75, 483, 76, 0, 0, 0, 0, 522,
	488, 0, 0, 0, 77, 78, 187, 536, 189, 537,
	79, 538, 539, 0, 80, 193, 194, 81, 503, 521,
	540, 541, 197, 0, 532, 0, 514, 0, 82, 83,
	84, 0, 85, 0, 86, 87, 88, 0, 381, 89,
	90, 0, 515, 517, 0, 516, 518, 91, 92, 93,
	94, 542, 95, 543, 544, 571, 96, 0, 97, 0,
	0, 0, 535, 99, 0, 100, 0, 0, 0, 487,
	101, 102, 523, 501, 0, 0, 103, 104, 545, 0,
	105, 0, 106, 0, 0, 382, 0, 107, 533, 0,
	206, 0, 108, 109, 529, 531, 384, 0, 112, 0,
	110, 0, 383, 111, 546, 547, 548, 549, 0, 513,
	0, 385, 113, 386, 114, 115, 0, 0, 534, 387,
	116, 388, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 389, 124, 125, 128, 126, 477, 127,
	502, 530, 129, 550, 130, 131, 0, 0, 0, 0,
	0, 132, 217, 390, 133, 391, 524, 134, 135, 136,
	0, 525, 137, 220, 138, 0, 139, 140, 141, 551,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 392,
	149, 150, 491, 151, 0, 152, 153, 154, 0, 223,
	155, 156, 519, 157, 158, 393, 159, 552, 225, 160,
	0, 166, 161, 162, 163, 165, 553, 164, 526, 0,
	167, 0, 168, 169, 0, 228, 554, 555, 0, 0,
	170, 527, 528, 500, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 520, 0, 178, 179, 180, 233, 556,
	0, 0, 181, 0, 0, 0, 0, 182, 183, 184,
	185, 478, 0, 506, 495, 496, 493, 494, 482, 0,
	0, 0, 474, 475, 0, 0, 0, 0, 476, 74,
	75, 483, 76, 0, 0, 0, 0, 522, 488, 0,
	0, 0, 77, 78, 187, 536, 189, 537, 79, 538,
	539, 0, 80, 193, 194, 81, 503, 521, 540, 541,
	197, 0, 532, 0, 514, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 381, 89, 90, 0,
	515, 517, 0, 516, 518, 91, 92, 93, 94, 542,
	95, 543, 544, 0, 96, 0, 97, 0, 0, 0,
	535, 99, 0, 100, 0, 0, 0, 487, 101, 102,
	523, 501, 0, 0, 103, 104, 545, 0, 105, 0,
	106, 0, 1184, 382, 0, 107, 533, 0, 206, 0,
	108, 109, 529, 531, 384, 0, 112, 0, 110, 0,
	383, 111, 546, 547, 548, 549, 0, 513, 0, 385,
	113, 386, 114, 115, 0, 0, 534, 387, 116, 388,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 389, 124, 125, 128, 126, 477, 127, 502, 530,
	129, 550, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 390, 133, 391, 524, 134, 135, 136, 0, 525,
	137, 220, 138, 0, 139, 140, 141, 551, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 392, 149, 150,
	491, 151, 0, 152, 153, 154, 0, 223, 155, 156,
	519, 157, 158, 393, 159, 552, 225, 160, 0, 166,
	161, 162, 163, 165, 553, 164, 526, 0, 167, 0,
	168, 169, 0, 228, 554, 555, 0, 0, 170, 527,
	528, 500, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 520, 0, 178, 179, 180, 233, 556, 0, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 478,
	0, 0, 0, 0, 506, 495, 496, 493, 494, 482,
	474, 475, 0, 0, 0, 0, 476, 0, 0, 483,
	74, 75, 824, 76, 0, 0, 0, 0, 522, 488,
	0, 0, 0, 77, 78, 187, 536, 189, 537, 79,
	538, 539, 0, 80, 193, 194, 81, 503, 521, 540,
	541, 197, 0, 532, 0, 514, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 381, 89, 90,
	0, 515, 517, 0, 516, 518, 91, 92, 93, 94,
	542, 95, 543, 544, 0, 96, 0, 97, 0, 0,
	0, 535, 99, 0, 100, 0, 0, 0, 487, 101,
	102, 523, 501, 0, 0, 103, 104, 545, 0, 105,
	0, 106, 0, 0, 382, 0, 107, 533, 0, 206,
	0, 108, 109, 529, 531, 384, 0, 112, 0, 110,
	0, 383, 111, 546, 547, 548, 549, 0, 513, 0,
	385, 113, 386, 114, 115, 0, 0, 534, 387, 116,
	388, 0, 117, 0, 0, 118, 0, 119, 120, 121,
	122, 123, 389, 124, 125, 128, 126, 477, 127, 502,
	530, 129, 550, 130, 131, 0, 0, 0, 0, 0,
	132, 217, 390, 133, 391, 524, 134, 135, 136, 0,
	525, 137, 220, 138, 0, 139, 140, 141, 551, 142,
	143, 0, 145, 146, 144, 147, 0, 148, 392, 149,
	150, 491, 151, 0, 152, 153, 154, 0, 223, 155,
	156, 519, 157, 158, 393, 159, 552, 225, 160, 0,
	166, 161, 162, 163, 165, 553, 164, 526, 0, 167,
	0, 168, 169, 0, 228, 554, 555, 0, 0, 170,
	527, 528, 500, 171, 172, 173, 174, 0, 0, 175,
	176, 177, 520, 0, 178, 179, 180, 233, 556, 0,
	0, 181, 0, 0, 0, 0, 182, 183, 184, 185,
	478, 0, 506, 495, 496, 493, 494, 482, 0, 0,
	0, 474, 475, 0, 0, 0, 0, 476, 74, 75,
	483, 76, 0, 0, 0, 0, 522, 488, 0, 0,
	0, 77, 78, 187, 536, 189, 537, 79, 538, 539,
	0, 80, 193, 194, 81, 503, 521, 540, 541, 197,
	0, 532, 0, 514, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 381, 89, 1850, 0, 515,
	517, 0, 516, 518, 91, 92, 93, 94, 542, 95,
	543, 544, 0, 96, 0, 97, 0, 0, 0, 535,
	99, 0, 100, 0, 0, 0, 487, 101, 102, 523,
	501, 0, 0, 103, 104, 545, 0, 105, 0, 106,
	0, 0, 382, 0, 107, 533, 0, 206, 0, 108,
	109, 529, 531, 384, 0, 112, 0, 110, 0, 383,
	111, 546, 547, 548, 549, 0, 513, 0, 385, 113,
	386, 114, 115, 0, 0, 534, 387, 116, 388, 0,
	117, 0, 0, 118, 0, 119, 120, 121, 122, 123,
	389, 124, 125, 128, 126, 477, 127, 502, 530, 129,
	550, 130, 131, 0, 0, 0, 0, 0, 132, 217,
	390, 133, 391, 524, 134, 135, 136, 0, 525, 137,
	220, 138, 0, 139, 140, 141, 551, 142, 143, 0,
	145, 146, 144, 147, 0, 148, 392, 149, 150, 491,
	151, 0, 152, 153, 154, 0, 223, 155, 156, 519,
	157, 158, 393, 159, 552, 225, 160, 0, 166, 161,
	162, 163, 165, 553, 164, 526, 0, 167, 0, 168,
	169, 0, 228, 554, 555, 0, 0, 170, 527, 528,
	500, 171, 172, 1849, 174, 0, 0, 175, 176, 177,
	520, 0, 178, 179, 180, 233, 556, 0, 0, 181,
	0, 0, 0, 0, 182, 183, 184, 185, 478, 0,
	506, 495, 496, 493, 494, 482, 0, 0, 0, 474,
	475, 0, 0, 0, 0, 476, 74, 75, 483, 76,
	0, 0, 0, 0, 522, 488, 0, 0, 0, 77,
	78, 1848, 536, 189, 537, 79, 538, 539, 0, 80,
	193, 194, 81, 503, 521, 540, 541, 197, 0, 532,
	0, 514, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 381, 89, 1850, 0, 515, 517, 0,
	516, 518, 91, 92, 93, 94, 542, 95, 543, 544,
	0, 96, 0, 97, 0, 0, 0, 535, 99, 0,
	100, 0, 0, 0, 487, 101, 102, 523, 501, 0,
	0, 103, 104, 545, 0, 105, 0, 106, 0, 0,
	382, 0, 107, 533, 0, 206, 0, 108, 109, 529,
	531, 384, 0, 112, 0, 110, 0, 383, 111, 546,
	547, 548, 549, 0, 513, 0, 385, 113, 386, 114,
	115, 0, 0, 534, 387, 116, 388, 0, 117, 0,
	0, 118, 0, 119, 120, 121, 122, 123, 389, 124,
	125, 128, 126, 477, 127, 502, 530, 129, 550, 130,
	131, 0, 0, 0, 0, 0, 132, 217, 390, 133,
	391, 524, 134, 135, 136, 0, 525, 137, 220, 138,
	0, 139, 140, 141, 551, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 392, 149, 150, 491, 151, 0,
	152, 153, 154, 0, 223, 155, 156, 519, 157, 158,
	393, 159, 552, 225, 160, 0, 166, 161, 162, 163,
	165, 553, 164, 526, 0, 167, 0, 168, 169, 0,
	228, 554, 555, 0, 0, 170, 527, 528, 500, 171,
	172, 1849, 174, 0, 0, 175, 176, 177, 520, 0,
	178, 179, 180, 233, 556, 0, 0, 181, 0, 0,
	0, 0, 182, 183, 184, 185, 478, 0, 506, 495,
	496, 493, 494, 482, 0, 0, 0, 474, 475, 0,
	0, 0, 0, 476, 74, 75, 483, 76, 0, 0,
	0, 0, 522, 488, 0, 0, 0, 77, 78, 187,
	536, 189, 537, 79, 538, 539, 0, 80, 193, 194,
	81, 503, 521, 540, 541, 197, 0, 532, 0, 514,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 381, 89, 90, 0, 515, 517, 0, 516, 518,
	91, 92, 93, 94, 542, 95, 543, 544, 0, 96,
	0, 97, 0, 0, 0, 535, 99, 0, 100, 0,
	0, 0, 487, 101, 102, 523, 501, 0, 0, 103,
	104, 545, 0, 105, 0, 106, 0, 0, 382, 0,
	107, 533, 0, 206, 0, 108, 109, 529, 531, 384,
	0, 112, 0, 110, 0, 383, 111, 546, 547, 548,
	549, 0, 513, 0, 385, 113, 386, 114, 115, 0,
	0, 534, 387, 116, 388, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 389, 124, 125, 128,
	126, 477, 127, 502, 530, 129, 550, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 390, 133, 391, 524,
	134, 135, 136, 0, 525, 137, 220, 138, 0, 139,
	140, 141, 551, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 392, 149, 150, 491, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 519, 157, 158, 393, 159,
	552, 225, 160, 0, 166, 161, 162, 163, 165, 553,
	164, 526, 0, 167, 0, 168, 169, 0, 228, 554,
	555, 0, 0, 170, 527, 528, 500, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 520, 0, 178, 179,
	180, 233, 556, 0, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 478, 0, 506, 495, 496, 493,
	494, 482, 0, 0, 0, 474, 475, 0, 0, 0,
	0, 476, 74, 75, 483, 76, 0, 0, 0, 0,
	522, 488, 0, 0, 0, 77, 78, 187, 536, 189,
	537, 79, 538, 539, 0, 80, 193, 194, 81, 503,
	521, 540, 541, 197, 0, 532, 0, 514, 0, 82,
	83, 84, 0, 85, 0, 86, 87, 88, 0, 381,
	89, 90, 0, 515, 517, 0, 516, 518, 91, 92,
	93, 94, 542, 95, 543, 544, 0, 96, 0, 97,
	0, 0, 0, 535, 99, 0, 100, 0, 0, 0,
	487, 101, 102, 523, 501, 0, 0, 103, 104, 545,
	0, 105, 0, 106, 0, 0, 382, 0, 107, 533,
	0, 206, 0, 108, 109, 529, 531, 384, 0, 112,
	0, 110, 0, 383, 111, 546, 547, 548, 549, 0,
	513, 0, 385, 113, 386, 114, 115, 0, 0, 534,
	387, 116, 388, 0, 117, 0, 0, 118, 0, 119,
	120, 121, 122, 123, 389, 124, 125, 128, 126, 0,
	127, 502, 530, 129, 550, 130, 131, 0, 0, 0,
	0, 0, 132, 217, 390, 133, 391, 524, 134, 135,
	136, 0, 525, 137, 220, 138, 0, 139, 140, 141,
	551, 142, 143, 0, 145, 146, 144, 147, 0, 148,
	392, 149, 150, 1174, 151, 0, 152, 153, 154, 0,
	223, 155, 156, 519, 157, 158, 393, 159, 552, 225,
	160, 0, 166, 161, 162, 163, 165, 553, 164, 526,
	0, 167, 0, 168, 169, 0, 228, 554, 555, 0,
	0, 170, 527, 528, 500, 171, 172, 173, 174, 0,
	0, 175, 176, 177, 520, 0, 178, 179, 180, 233,
	556, 0, 0, 181, 0, 0, 0, 0, 182, 183,
	184, 185, 0, 0, 506, 0, 0, 0, 0, 0,
	0, 0, 0, 1170, 1171, 0, 0, 0, 0, 1172,
	74, 75, 1173, 76, 0, 0, 0, 0, 522, 0,
	0, 0, 0, 77, 78, 187, 188, 189, 190, 79,
	191, 192, 0, 80, 193, 194, 81, 0, 521, 195,
	196, 197, 0, 532, 0, 514, 0, 82, 83, 84,
	0, 85, 0, 86, 87, 88, 0, 381, 89, 90,
	0, 515, 517, 0, 516, 518, 91, 92, 93, 94,
	199, 95, 200, 201, 0, 96, 0, 97, 0, 0,
	0, 98, 99, 0, 100, 0, 0, 0, 202, 101,
	102, 523, 0, 0, 0, 103, 104, 204, 0, 105,
	0, 106, 0, 0, 382, 0, 107, 533, 0, 206,
	0, 108, 109, 529, 531, 384, 0, 112, 0, 110,
	0, 383, 111, 209, 210, 211, 212, 0, 213, 0,
	385, 113, 386, 114, 115, 0, 0, 534, 387, 116,
	388, 0, 117, 0, 0, 118, 0, 119, 120, 121,
	122, 123, 389, 124, 125, 128, 126, 0, 127, 0,
	530, 129, 216, 130, 131, 0, 0, 0, 0, 0,
	132, 217, 390, 133, 391, 524, 134, 135, 136, 0,
	525, 137, 220, 138, 0, 139, 140, 141, 221, 142,
	143, 0, 145, 146, 144, 147, 0, 148, 392, 149,
	150, 222, 151, 0, 152, 153, 154, 0, 223, 155,
	156, 519, 157, 158, 393, 159, 224, 225, 160, 0,
	166, 161, 162, 163, 165, 226, 164, 526, 0, 167,
	0, 168, 169, 0, 228, 229, 230, 0, 0, 170,
	527, 528, 0, 171, 172, 173, 174, 0, 0, 175,
	176, 177, 520, 0, 178, 179, 180, 233, 234, 0,
	0, 181, 375, 0, 0, 0, 182, 183, 184, 185,
	0, 0, 0, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 0, 0, 0, 0, 186, 0, 0, 0,
	1622, 77, 78, 187, 188, 189, 190, 79, 191, 192,
	0, 80, 193, 194, 81, 0, 0, 195, 196, 197,
	0, 198, 0, 380, 0, 82, 83, 84, 0, 85,
	0, 86, 87, 88, 0, 381, 89, 90, 0, 0,
	0, 0, 0, 0, 91, 92, 93, 94, 199, 95,
	200, 201, 0, 96, 0, 97, 0, 0, 0, 98,
	99, 0, 100, 0, 0, 0, 202, 101, 102, 203,
	0, 0, 0, 103, 104, 204, 0, 105, 0, 106,
	0, 0, 382, 0, 107, 205, 0, 206, 0, 108,
	109, 207, 208, 384, 0, 112, 0, 110, 0, 383,
	111, 209, 210, 211, 212, 0, 213, 0, 385, 113,
	386, 114, 115, 0, 0, 214, 387, 116, 388, 0,
	117, 0, 0, 118, 0, 119, 120, 121, 122, 123,
	389, 124, 125, 128, 126, 0, 127, 0, 215, 129,
	216, 130, 131, 0, 0, 0, 0, 0, 132, 217,
	390, 133, 391, 218, 134, 135, 136, 0, 219, 137,
	220, 138, 0, 139, 140, 141, 221, 142, 143, 0,
	145, 146, 144, 147, 0, 148, 392, 149, 150, 222,
	151, 0, 152, 153, 154, 61, 223, 155, 156, 0,
	157, 158, 393, 159, 224, 225, 160, 0, 166, 161,
	162, 163, 165, 226, 164, 227, 0, 167, 63, 168,
	169, 0, 228, 229, 230, 0, 0, 170, 231, 232,
	0, 171, 172, 173, 174, 0, 0, 175, 176, 177,
	0, 0, 178, 179, 180, 379, 234, 0, 0, 181,
	0, 0, 0, 59, 182, 183, 184, 185, 0, 60,
	375, 776, 0, 777, 772, 767, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 75, 58, 76,
	0, 0, 0, 0, 186, 0, 0, 0, 0, 77,
	78, 187, 188, 189, 190, 79, 191, 192, 0, 80,
	193, 194, 81, 0, 0, 195, 196, 197, 0, 198,
	0, 380, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 381, 89, 90, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 94, 199, 95, 200, 201,
	780, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 202, 101, 102, 203, 769, 0,
	0, 103, 104, 204, 0, 105, 0, 106, 0, 0,
	382, 0, 107, 205, 0, 206, 0, 108, 109, 207,
	208, 384, 0, 112, 0, 110, 0, 383, 111, 209,
	210, 211, 212, 0, 213, 0, 385, 113, 386, 114,
	115, 0, 0, 214, 387, 116, 388, 0, 117, 0,
	0, 118, 0, 119, 120, 121, 122, 123, 389, 124,
	125, 128, 126, 0, 127, 0, 215, 129, 216, 130,
	131, 0, 770, 0, 0, 0, 132, 217, 390, 133,
	391, 218, 134, 135, 136, 0, 219, 137, 220, 138,
	0, 139, 140, 141, 221, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 392, 149, 150, 222, 151, 0,
	152, 153, 154, 0, 223, 155, 156, 0, 157, 158,
	393, 159, 224, 225, 160, 0, 166, 161, 162, 163,
	165, 226, 164, 227, 0, 167, 0, 168, 169, 0,
	228, 229, 230, 0, 0, 170, 231, 232, 768, 171,
	172, 173, 174, 0, 0, 175, 176, 177, 0, 0,
	178, 179, 180, 233, 234, 375, 776, 181, 777, 772,
	767, 0, 182, 183, 184, 185, 0, 0, 0, 0,
	0, 74, 75, 0, 76, 0, 0, 778, 773, 186,
	0, 0, 0, 0, 77, 78, 187, 188, 189, 190,
	79, 191, 192, 0, 80, 193, 194, 81, 0, 0,
	195, 196, 197, 0, 198, 0, 380, 0, 82, 83,
	84, 0, 85, 0, 86, 87, 88, 0, 381, 89,
	90, 0, 0, 0, 0, 0, 0, 91, 92, 93,
	94, 199, 95, 200, 201, 763, 96, 0, 97, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 202,
	101, 102, 203, 769, 0, 0, 103, 104, 204, 0,
	105, 0, 106, 0, 0, 382, 0, 107, 205, 0,
	206, 0, 108, 109, 207, 208, 384, 0, 112, 0,
	110, 0, 383, 111, 209, 210, 211, 212, 0, 213,
	0, 385, 113, 386, 114, 115, 0, 0, 214, 387,
	116, 388, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 389, 124, 125, 128, 126, 0, 127,
	0, 215, 129, 216, 130, 131, 0, 770, 0, 0,
	0, 132, 217, 390, 133, 391, 218, 134, 135, 136,
	0, 219, 137, 220, 138, 0, 139, 140, 141, 221,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 392,
	149, 150, 222, 151, 0, 152, 153, 154, 0, 223,
	155, 156, 0, 157, 158, 393, 159, 224, 225, 160,
	0, 166, 161, 162, 163, 165, 226, 164, 227, 0,
	167, 0, 168, 169, 0, 228, 229, 230, 0, 0,
	170, 231, 232, 768, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 0, 0, 178, 179, 180, 233, 234,
	375, 776, 181, 777, 772, 767, 0, 182, 183, 184,
	185, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 778, 773, 186, 0, 0, 0, 0, 77,
	78, 187, 188, 189, 190, 79, 191, 192, 0, 80,
	193, 194, 81, 0, 0, 195, 196, 197, 0, 198,
	0, 380, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 381, 89, 90, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 94, 199, 95, 200, 201,
	0, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 202, 101, 102, 203, 769, 0,
	0, 103, 104, 204, 0, 105, 0, 106, 0, 0,
	382, 0, 107, 205, 0, 206, 0, 108, 109, 207,
	208, 384, 0, 112, 0, 110, 0, 383, 111, 209,
	210, 211, 212, 0, 213, 0, 385, 113, 386, 114,
	115, 0, 0, 214, 387, 116, 388, 0, 117, 0,
	0, 118, 0, 119, 120, 121, 122, 123, 389, 124,
	125, 128, 126, 0, 127, 0, 215, 129, 216, 130,
	131, 0, 770, 0, 0, 0, 132, 217, 390, 133,
	391, 218, 134, 135, 136, 0, 219, 137, 220, 138,
	0, 139, 140, 141, 221, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 392, 149, 150, 222, 151, 0,
	152, 153, 154, 0, 223, 155, 156, 0, 157, 158,
	393, 159, 224, 225, 160, 0, 166, 161, 162, 163,
	165, 226, 164, 227, 0, 167, 0, 168, 169, 0,
	228, 229, 230, 0, 0, 170, 231, 232, 768, 171,
	172, 173, 174, 0, 0, 175, 176, 177, 0, 0,
	178, 179, 180, 233, 234, 71, 0, 181, 0, 0,
	0, 0, 182, 183, 184, 185, 0, 0, 0, 0,
	0, 74, 75, 0, 76, 0, 0, 778, 773, 186,
	0, 0, 0, 0, 77, 78, 187, 188, 189, 190,
	79, 191, 192, 0, 80, 193, 194, 81, 0, 0,
	195, 196, 197, 0, 198, 0, 0, 0, 82, 83,
	84, 0, 85, 0, 86, 87, 88, 0, 0, 89,
	90, 0, 0, 0, 0, 0, 0, 91, 92, 93,
	94, 199, 95, 200, 201, 0, 96, 0, 97, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 202,
	101, 102, 203, 0, 0, 0, 103, 104, 204, 0,
	105, 0, 106, 0, 0, 0, 0, 107, 205, 0,
	206, 0, 108, 109, 207, 208, 0, 0, 112, 0,
	110, 0, 0, 111, 209, 210, 211, 212, 0, 213,
	0, 0, 113, 0, 114, 115, 0, 0, 214, 0,
	116, 0, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 0, 124, 125, 128, 126, 0, 127,
	0, 215, 129, 216, 130, 131, 0, 0, 340, 0,
	0, 132, 217, 0, 133, 0, 218, 134, 135, 136,
	0, 219, 137, 220, 138, 0, 139, 140, 141, 221,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 0,
	149, 150, 222, 151, 0, 152, 153, 154, 61, 223,
	155, 156, 0, 157, 158, 0, 159, 224, 225, 160,
	0, 166, 161, 162, 163, 165, 226, 164, 227, 0,
	167, 63, 168, 169, 0, 228, 229, 230, 0, 0,
	170, 231, 232, 0, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 0, 0, 178, 179, 180, 379, 234,
	0, 0, 181, 71, 0, 0, 59, 182, 183, 184,
	185, 0, 60, 0, 0, 0, 0, 0, 0, 74,
	75, 0, 76, 0, 0, 0, 0, 186, 0, 0,
	0, 1074, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 0, 80, 193, 194, 81, 0, 0, 195, 196,
	197, 0, 198, 0, 0, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 0, 89, 90, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 94, 199,
	95, 200, 201, 0, 96, 0, 97, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 202, 101, 102,
	203, 0, 0, 0, 103, 104, 204, 0, 105, 0,
	106, 0, 0, 0, 0, 107, 205, 0, 206, 0,
	108, 109, 207, 208, 0, 0, 112, 0, 110, 0,
	0, 111, 209, 210, 211, 212, 0, 213, 0, 0,
	113, 0, 114, 115, 0, 0, 214, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 0, 124, 125, 128, 126, 0, 127, 0, 215,
	129, 216, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 0, 133, 0, 218, 134, 135, 136, 0, 219,
	137, 220, 138, 0, 139, 140, 141, 221, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	222, 151, 0, 152, 153, 154, 61, 223, 155, 156,
	0, 157, 158, 0, 159, 224, 225, 160, 0, 166,
	161, 162, 163, 165, 226, 164, 227, 0, 167, 63,
	168, 169, 0, 228, 229, 230, 0, 0, 170, 231,
	232, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 379, 234, 0, 0,
	181, 71, 0, 0, 59, 182, 183, 184, 185, 0,
	60, 0, 0, 0, 0, 0, 0, 74, 75, 0,
	76, 0, 0, 0, 0, 186, 0, 1302, 0, 58,
	77, 78, 187, 188, 189, 190, 79, 191, 192, 0,
	80, 193, 194, 81, 0, 0, 195, 196, 197, 0,
	198, 0, 0, 0, 82, 83, 84, 0, 85, 0,
	86, 87, 88, 0, 0, 89, 90, 0, 0, 0,
	0, 0, 0, 91, 92, 93, 94, 199, 95, 200,
	201, 0, 96, 0, 97, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 202, 101, 102, 203, 0,
	0, 0, 103, 104, 204, 0, 105, 0, 106, 0,
	0, 0, 0, 107, 205, 0, 206, 0, 108, 109,
	207, 208, 0, 0, 112, 0, 110, 0, 0, 111,
	209, 210, 211, 212, 0, 213, 0, 0, 113, 0,
	114, 115, 0, 0, 214, 0, 116, 0, 0, 117,
	0, 0, 118, 0, 119, 120, 121, 122, 123, 0,
	124, 125, 128, 126, 0, 127, 0, 215, 129, 216,
	130, 131, 0, 0, 0, 0, 0, 132, 217, 0,
	133, 0, 218, 134, 135, 136, 0, 219, 137, 220,
	138, 0, 139, 140, 141, 221, 142, 143, 0, 145,
	146, 144, 147, 0, 148, 0, 149, 150, 222, 151,
	0, 152, 153, 154, 0, 223, 155, 156, 0, 157,
	158, 0, 159, 224, 225, 160, 0, 166, 161, 162,
	163, 165, 226, 164, 227, 0, 167, 0, 168, 169,
	0, 228, 229, 230, 0, 0, 170, 231, 232, 0,
	171, 172, 173, 174, 0, 0, 175, 176, 177, 0,
	0, 178, 179, 180, 233, 234, 0, 0, 181, 0,
	71, 0, 0, 182, 183, 184, 185, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 75, 0, 76,
	0, 0, 0, 0, 186, 0, 0, 0, 464, 77,
	78, 187, 188, 189, 190, 79, 191, 192, 0, 80,
	193, 194, 81, 0, 0, 195, 196, 197, 0, 198,
	0, 0, 0, 82, 83, 84, 0, 85, 0, 86,
	87, 88, 0, 0, 89, 90, 0, 0, 0, 0,
	0, 0, 91, 92, 93, 94, 199, 95, 200, 201,
	0, 96, 0, 97, 0, 0, 0, 98, 99, 0,
	100, 0, 0, 0, 202, 101, 102, 203, 0, 0,
	0, 103, 104, 204, 0, 105, 0, 106, 0, 0,
	0, 0, 107, 205, 0, 206, 0, 108, 109, 207,
	208, 0, 0, 112, 0, 110, 0, 0, 111, 209,
	210, 211, 212, 0, 213, 0, 0, 113, 0, 114,
	115, 0, 0, 214, 0, 116, 0, 0, 117, 0,
	0, 118, 0, 119, 120, 121, 122, 123, 0, 124,
	125, 128, 126, 0, 127, 0, 215, 129, 216, 130,
	131, 0, 0, 340, 0, 0, 132, 217, 0, 133,
	0, 218, 134, 135, 136, 0, 219, 137, 220, 138,
	0, 139, 140, 141, 221, 142, 143, 0, 145, 146,
	144, 147, 0, 148, 0, 149, 150, 222, 151, 0,
	152, 153, 154, 0, 223, 155, 156, 0, 157, 158,
	0, 159, 224, 225, 160, 0, 166, 161, 162, 163,
	165, 226, 164, 227, 0, 167, 0, 168, 169, 0,
	228, 229, 230, 0, 0, 170, 231, 232, 0, 171,
	172, 173, 174, 0, 0, 175, 176, 177, 0, 0,
	178, 179, 180, 233, 234, 0, 0, 181, 71, 0,
	0, 0, 182, 183, 184, 185, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 186, 0, 0, 0, 1074, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 0, 0,
	107, 205, 0, 206, 0, 108, 109, 207, 208, 0,
	0, 112, 0, 110, 0, 0, 111, 209, 210, 211,
	212, 0, 213, 0, 0, 113, 0, 114, 115, 0,
	0, 214, 0, 116, 0, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 0, 124, 125, 128,
	126, 0, 127, 0, 215, 129, 216, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 0, 133, 0, 218,
	134, 135, 136, 0, 219, 137, 220, 138, 0, 139,
	140, 141, 221, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 0, 149, 150, 222, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 0, 157, 158, 0, 159,
	224, 225, 160, 0, 166, 161, 162, 163, 165, 226,
	164, 227, 0, 167, 0, 168, 169, 0, 228, 229,
	230, 0, 0, 170, 231, 232, 0, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 0, 0, 178, 179,
	180, 233, 234, 0, 0, 181, 0, 71, 0, 0,
	182, 183, 184, 185, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 74, 75, 0, 76, 0, 0, 0,
	0, 186, 0, 0, 0, 587, 77, 78, 187, 188,
	189, 190, 79, 191, 192, 0, 80, 193, 194, 81,
	0, 0, 195, 196, 197, 0, 198, 0, 0, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	0, 89, 90, 0, 0, 0, 0, 0, 0, 91,
	92, 93, 94, 199, 95, 200, 201, 0, 96, 0,
	97, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 202, 101, 102, 203, 0, 0, 0, 103, 104,
	204, 0, 105, 0, 106, 0, 0, 0, 0, 107,
	205, 0, 206, 0, 108, 109, 207, 208, 0, 0,
	112, 0, 110, 0, 0, 111, 209, 210, 211, 212,
	0, 213, 0, 0, 113, 0, 114, 115, 0, 0,
	214, 0, 116, 0, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 123, 0, 124, 125, 128, 126,
	0, 127, 0, 215, 129, 216, 130, 131, 0, 0,
	0, 0, 0, 132, 217, 0, 133, 0, 218, 134,
	135, 136, 0, 219, 137, 220, 138, 0, 139, 140,
	141, 221, 142, 143, 0, 145, 146, 144, 147, 0,
	148, 0, 149, 150, 222, 151, 0, 152, 153, 154,
	0, 223, 155, 156, 0, 157, 158, 0, 159, 224,
	225, 160, 0, 166, 161, 162, 163, 165, 226, 164,
	227, 0, 167, 0, 168, 169, 0, 228, 229, 230,
	0, 0, 170, 231, 232, 0, 171, 172, 173, 174,
	0, 0, 175, 176, 177, 0, 0, 178, 179, 180,
	233, 234, 0, 0, 181, 71, 0, 0, 0, 182,
	183, 184, 185, 0, 0, 0, 0, 0, 0, 0,
	0, 74, 75, 0, 76, 0, 0, 0, 0, 186,
	0, 0, 0, 982, 77, 78, 187, 188, 189, 190,
	79, 191, 192, 0, 80, 193, 194, 81, 0, 0,
	195, 196, 197, 0, 198, 0, 0, 0, 82, 83,
	84, 0, 85, 0, 86, 87, 88, 0, 0, 89,
	90, 0, 0, 0, 0, 0, 0, 91, 92, 93,
	94, 199, 95, 200, 201, 0, 96, 0, 97, 0,
	0, 0, 98, 99, 0, 100, 0, 0, 0, 202,
	101, 102, 203, 0, 0, 0, 103, 104, 204, 0,
	105, 0, 106, 0, 0, 0, 0, 107, 205, 0,
	206, 0, 108, 109, 207, 208, 0, 0, 112, 0,
	110, 0, 0, 111, 209, 210, 211, 212, 0, 213,
	0, 0, 113, 0, 114, 115, 0, 0, 214, 0,
	116, 0, 0, 117, 0, 0, 118, 0, 119, 120,
	121, 122, 123, 0, 124, 125, 128, 126, 0, 127,
	0, 215, 129, 216, 130, 131, 0, 0, 0, 0,
	0, 132, 217, 0, 133, 0, 218, 134, 135, 136,
	0, 219, 137, 220, 138, 0, 139, 140, 141, 221,
	142, 143, 0, 145, 146, 144, 147, 0, 148, 0,
	149, 150, 222, 151, 0, 152, 153, 154, 0, 223,
	155, 156, 0, 157, 158, 0, 159, 224, 225, 160,
	0, 166, 161, 162, 163, 165, 226, 164, 227, 0,
	167, 0, 168, 169, 0, 228, 229, 230, 0, 0,
	170, 231, 232, 0, 171, 172, 173, 174, 0, 0,
	175, 176, 177, 0, 0, 178, 179, 180, 233, 234,
	0, 0, 181, 71, 0, 0, 0, 182, 183, 184,
	185, 0, 0, 0, 0, 0, 0, 0, 0, 74,
	75, 0, 76, 0, 0, 0, 0, 186, 0, 0,
	0, 1520, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 0, 80, 193, 194, 81, 0, 0, 195, 196,
	197, 0, 198, 0, 0, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 0, 89, 90, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 94, 199,
	95, 200, 201, 0, 96, 0, 97, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 202, 101, 102,
	203, 0, 0, 0, 103, 104, 204, 0, 105, 0,
	106, 0, 0, 0, 0, 107, 205, 0, 206, 0,
	108, 109, 207, 208, 0, 0, 112, 0, 110, 0,
	0, 111, 209, 210, 211, 212, 0, 213, 0, 0,
	113, 0, 114, 115, 0, 0, 214, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 0, 124, 125, 128, 126, 0, 127, 0, 215,
	129, 216, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 0, 133, 0, 218, 134, 135, 136, 0, 219,
	137, 220, 138, 0, 139, 140, 141, 221, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	222, 151, 0, 152, 153, 154, 0, 223, 155, 156,
	0, 157, 158, 0, 159, 224, 225, 160, 0, 166,
	161, 162, 163, 165, 226, 164, 227, 0, 167, 0,
	168, 169, 0, 228, 229, 230, 0, 0, 170, 231,
	232, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 233, 234, 0, 0,
	181, 71, 0, 0, 0, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 0, 0, 0, 74, 75, 0,
	76, 0, 0, 0, 0, 186, 0, 0, 0, 567,
	77, 78, 187, 188, 189, 190, 79, 191, 192, 0,
	80, 193, 194, 81, 0, 0, 195, 196, 197, 0,
	198, 0, 0, 0, 82, 83, 84, 0, 85, 0,
	86, 87, 88, 0, 0, 89, 90, 0, 0, 0,
	0, 0, 0, 91, 92, 747, 94, 199, 95, 200,
	201, 0, 96, 0, 97, 0, 0, 0, 98, 99,
	0, 100, 0, 0, 0, 202, 101, 102, 203, 0,
	0, 0, 103, 104, 204, 0, 105, 0, 106, 0,
	0, 0, 0, 107, 205, 0, 206, 0, 108, 109,
	207, 208, 0, 0, 112, 0, 110, 0, 0, 111,
	209, 210, 211, 212, 0, 213, 0, 0, 113, 0,
	114, 115, 0, 0, 214, 0, 116, 0, 0, 117,
	0, 0, 118, 0, 119, 120, 121, 122, 123, 0,
	124, 125, 128, 126, 0, 127, 0, 215, 129, 216,
	130, 131, 0, 0, 0, 0, 0, 132, 217, 0,
	133, 0, 218, 134, 135, 136, 0, 219, 137, 220,
	138, 0, 139, 140, 141, 221, 142, 143, 0, 145,
	146, 144, 147, 0, 148, 0, 149, 150, 222, 151,
	0, 152, 153, 154, 0, 223, 155, 156, 0, 157,
	158, 0, 159, 224, 225, 160, 0, 166, 161, 162,
	163, 165, 226, 164, 227, 0, 167, 746, 168, 169,
	0, 228, 229, 230, 0, 0, 170, 231, 232, 0,
	171, 172, 173, 174, 0, 0, 175, 176, 177, 0,
	0, 178, 179, 180, 233, 234, 0, 71, 181, 0,
	0, 0, 0, 182, 183, 184, 185, 0, 0, 0,
	0, 0, 0, 74, 75, 0, 76, 0, 0, 0,
	750, 186, 0, 0, 0, 0, 77, 78, 187, 188,
	189, 190, 79, 191, 192, 0, 80, 193, 194, 81,
	0, 0, 195, 196, 197, 0, 198, 0, 0, 0,
	82, 83, 84, 0, 85, 0, 86, 87, 88, 0,
	0, 89, 90, 0, 0, 0, 0, 0, 0, 91,
	92, 93, 94, 199, 95, 200, 201, 0, 96, 0,
	97, 0, 0, 0, 98, 99, 0, 100, 0, 0,
	0, 202, 101, 102, 203, 0, 0, 0, 103, 104,
	204, 0, 105, 0, 106, 0, 0, 0, 0, 107,
	205, 0, 206, 0, 108, 109, 207, 208, 0, 0,
	112, 0, 110, 0, 0, 111, 209, 210, 211, 212,
	0, 213, 0, 0, 113, 0, 114, 115, 0, 0,
	214, 0, 116, 0, 0, 117, 0, 0, 118, 0,
	119, 120, 121, 122, 123, 0, 124, 125, 128, 126,
	0, 127, 0, 215, 129, 216, 130, 131, 0, 0,
	0, 0, 0, 132, 217, 0, 133, 0, 218, 134,
	135, 136, 0, 219, 137, 220, 138, 0, 139, 140,
	141, 221, 142, 143, 0, 145, 146, 144, 147, 0,
	148, 0, 149, 150, 222, 151, 0, 152, 153, 154,
	0, 223, 155, 156, 0, 157, 158, 0, 159, 224,
	225, 160, 0, 166, 161, 162, 163, 165, 226, 164,
	227, 0, 167, 0, 168, 169, 0, 228, 229, 230,
	0, 0, 170, 231, 232, 0, 171, 172, 173, 174,
	0, 0, 175, 176, 177, 0, 0, 178, 179, 180,
	233, 234, 0, 375, 181, 0, 0, 0, 0, 182,
	183, 184, 185, 0, 0, 0, 0, 0, 0, 74,
	75, 0, 76, 0, 0, 0, 750, 186, 0, 0,
	0, 0, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 0, 80, 193, 194, 81, 0, 0, 195, 196,
	197, 0, 198, 0, 380, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 381, 89, 90, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 94, 199,
	95, 200, 201, 0, 96, 0, 97, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 202, 101, 102,
	203, 0, 0, 0, 103, 104, 204, 0, 105, 0,
	106, 0, 0, 382, 0, 107, 205, 0, 206, 0,
	108, 109, 207, 208, 384, 0, 112, 0, 110, 0,
	383, 111, 209, 210, 211, 212, 0, 213, 0, 385,
	113, 386, 114, 115, 0, 0, 214, 387, 116, 388,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 389, 124, 125, 128, 126, 0, 127, 0, 215,
	129, 216, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 390, 133, 391, 218, 134, 135, 136, 0, 219,
	137, 220, 138, 0, 139, 140, 141, 221, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 392, 149, 150,
	222, 151, 0, 152, 153, 154, 0, 223, 155, 156,
	0, 157, 158, 393, 159, 224, 225, 160, 0, 166,
	161, 162, 163, 165, 226, 164, 227, 0, 167, 0,
	168, 169, 0, 228, 229, 230, 0, 0, 170, 231,
	232, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 233, 234, 71, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 948, 198, 0, 0,
	0, 82, 83, 84, 0, 85, 946, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 1048, 0, 103,
	104, 204, 0, 105, 0, 106, 951, 0, 0, 0,
	107, 205, 0, 206, 0, 108, 109, 207, 208, 0,
	0, 112, 1046, 110, 0, 0, 111, 209, 210, 211,
	212, 0, 213, 0, 0, 113, 0, 114, 115, 0,
	0, 214, 0, 116, 0, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 0, 124, 125, 128,
	126, 0, 127, 0, 215, 129, 216, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 0, 133, 0, 218,
	134, 135, 136, 0, 219, 137, 220, 138, 950, 139,
	140, 141, 221, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 0, 149, 150, 222, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 0, 157, 158, 0, 159,
	224, 225, 160, 0, 166, 161, 162, 163, 165, 226,
	164, 227, 0, 167, 0, 168, 169, 0, 228, 229,
	230, 0, 0, 170, 231, 232, 0, 171, 172, 173,
	174, 0, 1047, 175, 176, 177, 0, 0, 178, 179,
	180, 233, 234, 71, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 0, 0, 0, 74,
	75, 0, 76, 0, 0, 0, 0, 186, 0, 0,
	0, 0, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 0, 80, 193, 194, 81, 0, 0, 195, 196,
	197, 948, 198, 0, 0, 943, 82, 83, 84, 0,
	85, 946, 86, 87, 88, 0, 0, 89, 90, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 94, 199,
	95, 200, 201, 0, 96, 0, 97, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 202, 101, 102,
	203, 0, 0, 0, 103, 104, 204, 0, 105, 0,
	106, 951, 0, 0, 0, 107, 205, 0, 206, 0,
	108, 109, 942, 208, 0, 0, 112, 0, 110, 0,
	0, 111, 209, 210, 211, 212, 0, 213, 0, 0,
	113, 0, 114, 115, 0, 0, 214, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 0, 124, 125, 128, 126, 0, 127, 0, 215,
	129, 216, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 0, 133, 0, 218, 134, 135, 136, 0, 219,
	137, 220, 138, 950, 139, 140, 141, 221, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	222, 151, 0, 152, 153, 154, 0, 223, 155, 156,
	0, 157, 158, 0, 159, 224, 225, 160, 0, 166,
	161, 162, 163, 165, 226, 164, 227, 0, 167, 0,
	168, 169, 0, 228, 229, 230, 0, 0, 170, 231,
	232, 0, 171, 172, 173, 174, 0, 949, 175, 176,
	177, 0, 0, 178, 179, 180, 233, 234, 71, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 186, 0, 1302, 0, 0, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 0, 0,
	107, 205, 0, 206, 0, 108, 109, 207, 208, 0,
	0, 112, 0, 110, 0, 0, 111, 209, 210, 211,
	212, 0, 213, 0, 0, 113, 0, 114, 115, 0,
	0, 214, 0, 116, 0, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 0, 124, 125, 128,
	126, 0, 127, 0, 215, 129, 216, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 0, 133, 0, 218,
	134, 135, 136, 0, 219, 137, 220, 138, 0, 139,
	140, 141, 221, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 0, 149, 150, 222, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 0, 157, 158, 0, 159,
	224, 225, 160, 0, 166, 161, 162, 163, 165, 226,
	164, 227, 0, 167, 0, 168, 169, 0, 228, 229,
	230, 0, 0, 170, 231, 232, 0, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 0, 0, 178, 179,
	180, 233, 234, 71, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 0, 0, 0, 74,
	75, 0, 76, 0, 0, 0, 0, 186, 0, 0,
	0, 0, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 0, 80, 193, 194, 81, 0, 0, 195, 196,
	197, 0, 198, 0, 0, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 0, 89, 90, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 94, 199,
	95, 200, 201, 0, 96, 0, 97, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 202, 101, 102,
	203, 0, 0, 0, 103, 104, 204, 0, 105, 0,
	106, 0, 0, 0, 0, 107, 205, 0, 206, 0,
	108, 109, 207, 208, 0, 0, 112, 0, 110, 0,
	0, 111, 209, 210, 211, 212, 0, 213, 0, 0,
	113, 0, 114, 115, 0, 0, 214, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 0, 124, 125, 128, 126, 0, 127, 0, 215,
	129, 216, 130, 131, 0, 0, 340, 0, 0, 132,
	217, 0, 133, 0, 218, 134, 135, 136, 0, 219,
	137, 220, 138, 0, 139, 140, 141, 221, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	222, 151, 0, 152, 153, 154, 0, 223, 155, 156,
	0, 157, 158, 0, 159, 224, 225, 160, 0, 166,
	161, 162, 163, 165, 226, 164, 227, 0, 167, 0,
	168, 169, 0, 228, 229, 230, 0, 0, 170, 231,
	232, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 233, 234, 71, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 0, 0,
	107, 205, 0, 206, 0, 108, 109, 698, 208, 0,
	0, 112, 0, 110, 0, 0, 111, 209, 210, 211,
	212, 0, 213, 0, 0, 113, 0, 114, 115, 0,
	0, 214, 0, 116, 0, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 0, 124, 125, 128,
	126, 0, 127, 0, 215, 129, 216, 130, 131, 0,
	0, 340, 0, 0, 132, 217, 0, 133, 0, 218,
	134, 135, 136, 0, 219, 137, 220, 138, 0, 139,
	140, 141, 221, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 0, 149, 150, 222, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 0, 157, 158, 0, 159,
	224, 225, 160, 0, 166, 161, 162, 163, 165, 226,
	164, 227, 0, 167, 0, 168, 169, 0, 228, 229,
	230, 0, 0, 170, 231, 232, 0, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 0, 0, 178, 179,
	180, 233, 234, 71, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 0, 0, 0, 74,
	75, 400, 76, 0, 0, 0, 0, 186, 0, 0,
	0, 0, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 0, 80, 193, 194, 81, 0, 0, 195, 196,
	197, 0, 198, 0, 0, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 0, 89, 90, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 94, 199,
	95, 200, 201, 0, 96, 0, 97, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 202, 101, 102,
	203, 0, 0, 0, 103, 104, 204, 0, 105, 0,
	106, 0, 0, 0, 0, 107, 205, 0, 206, 0,
	108, 109, 207, 208, 0, 0, 112, 0, 110, 0,
	0, 111, 209, 210, 211, 212, 0, 213, 0, 0,
	113, 0, 114, 115, 0, 0, 214, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 0, 124, 125, 128, 126, 0, 127, 0, 215,
	129, 216, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 0, 133, 0, 218, 134, 135, 136, 0, 219,
	137, 220, 138, 0, 139, 140, 141, 221, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	222, 151, 0, 152, 153, 154, 0, 223, 155, 156,
	0, 157, 158, 0, 159, 224, 225, 160, 0, 166,
	161, 162, 163, 165, 226, 164, 227, 0, 167, 0,
	168, 169, 0, 228, 229, 230, 0, 0, 170, 231,
	232, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 233, 234, 71, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 0, 0,
	107, 205, 0, 206, 0, 108, 109, 345, 208, 0,
	0, 112, 0, 110, 0, 0, 111, 209, 210, 211,
	212, 0, 213, 0, 0, 113, 0, 114, 115, 0,
	0, 214, 0, 116, 0, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 0, 124, 125, 128,
	126, 0, 127, 0, 215, 129, 216, 130, 131, 0,
	0, 340, 0, 0, 132, 217, 0, 133, 0, 218,
	134, 135, 136, 0, 219, 137, 220, 138, 0, 139,
	140, 141, 221, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 0, 149, 150, 222, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 0, 157, 158, 0, 159,
	224, 225, 160, 0, 166, 161, 162, 163, 165, 226,
	164, 227, 0, 167, 0, 168, 169, 0, 228, 229,
	230, 0, 0, 170, 231, 232, 0, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 0, 0, 178, 179,
	180, 233, 234, 71, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 0, 0, 0, 74,
	75, 257, 76, 0, 0, 0, 0, 186, 0, 0,
	0, 0, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 0, 80, 193, 194, 81, 0, 0, 195, 196,
	197, 0, 198, 0, 0, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 0, 89, 90, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 94, 199,
	95, 200, 201, 0, 96, 0, 97, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 202, 101, 102,
	203, 0, 0, 0, 103, 104, 204, 0, 105, 0,
	106, 0, 0, 0, 0, 107, 205, 0, 206, 0,
	108, 109, 207, 208, 0, 0, 112, 0, 110, 0,
	0, 111, 209, 210, 211, 212, 0, 213, 0, 0,
	113, 0, 114, 115, 0, 0, 214, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 0, 124, 125, 128, 126, 0, 127, 0, 215,
	129, 216, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 0, 133, 0, 218, 134, 135, 136, 0, 219,
	137, 220, 256, 0, 139, 140, 141, 221, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	222, 151, 0, 152, 153, 154, 0, 223, 155, 156,
	0, 157, 158, 0, 159, 224, 225, 160, 0, 166,
	161, 162, 163, 165, 226, 164, 227, 0, 167, 0,
	168, 169, 0, 228, 229, 230, 0, 0, 170, 231,
	232, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 233, 234, 71, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 0, 0,
	107, 205, 0, 206, 0, 108, 109, 207, 208, 0,
	0, 112, 0, 110, 0, 0, 111, 209, 210, 211,
	212, 0, 213, 0, 0, 113, 0, 114, 115, 0,
	0, 214, 0, 116, 0, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 0, 124, 125, 128,
	126, 0, 127, 0, 215, 129, 216, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 0, 133, 0, 218,
	134, 135, 136, 0, 219, 137, 220, 138, 0, 139,
	140, 141, 221, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 0, 149, 150, 222, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 0, 157, 158, 0, 159,
	224, 225, 160, 0, 166, 161, 162, 163, 165, 226,
	164, 227, 0, 167, 0, 168, 169, 0, 228, 229,
	230, 0, 0, 170, 231, 232, 0, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 0, 0, 178, 179,
	180, 233, 234, 71, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 0, 0, 0, 74,
	75, 0, 76, 0, 0, 0, 0, 186, 0, 0,
	0, 0, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 0, 80, 193, 194, 81, 0, 0, 195, 196,
	197, 0, 198, 0, 0, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 0, 89, 90, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 94, 199,
	95, 200, 201, 0, 96, 0, 97, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 202, 101, 102,
	203, 0, 0, 0, 103, 104, 204, 0, 105, 0,
	106, 0, 0, 0, 0, 107, 205, 0, 206, 0,
	108, 109, 1218, 208, 0, 0, 112, 0, 110, 0,
	0, 111, 209, 210, 211, 212, 0, 213, 0, 0,
	113, 0, 114, 115, 0, 0, 214, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 0, 124, 125, 128, 126, 0, 127, 0, 215,
	129, 216, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 0, 133, 0, 218, 134, 135, 136, 0, 219,
	137, 220, 138, 0, 139, 140, 141, 221, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	222, 151, 0, 152, 153, 154, 0, 223, 155, 156,
	0, 157, 158, 0, 159, 224, 225, 160, 0, 166,
	161, 162, 163, 165, 226, 164, 227, 0, 167, 0,
	168, 169, 0, 228, 229, 230, 0, 0, 170, 231,
	232, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 233, 234, 71, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 0, 0,
	107, 205, 0, 206, 0, 108, 109, 1216, 208, 0,
	0, 112, 0, 110, 0, 0, 111, 209, 210, 211,
	212, 0, 213, 0, 0, 113, 0, 114, 115, 0,
	0, 214, 0, 116, 0, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 0, 124, 125, 128,
	126, 0, 127, 0, 215, 129, 216, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 0, 133, 0, 218,
	134, 135, 136, 0, 219, 137, 220, 138, 0, 139,
	140, 141, 221, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 0, 149, 150, 222, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 0, 157, 158, 0, 159,
	224, 225, 160, 0, 166, 161, 162, 163, 165, 226,
	164, 227, 0, 167, 0, 168, 169, 0, 228, 229,
	230, 0, 0, 170, 231, 232, 0, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 0, 0, 178, 179,
	180, 233, 234, 71, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 0, 0, 0, 74,
	75, 0, 76, 0, 0, 0, 0, 186, 0, 0,
	0, 0, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 0, 80, 193, 194, 81, 0, 0, 195, 196,
	197, 0, 198, 0, 0, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 0, 89, 90, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 94, 199,
	95, 200, 201, 0, 96, 0, 97, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 202, 101, 102,
	203, 0, 0, 0, 103, 104, 204, 0, 105, 0,
	106, 0, 0, 0, 0, 107, 205, 0, 206, 0,
	108, 109, 1207, 208, 0, 0, 112, 0, 110, 0,
	0, 111, 209, 210, 211, 212, 0, 213, 0, 0,
	113, 0, 114, 115, 0, 0, 214, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 0, 124, 125, 128, 126, 0, 127, 0, 215,
	129, 216, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 0, 133, 0, 218, 134, 135, 136, 0, 219,
	137, 220, 138, 0, 139, 140, 141, 221, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	222, 151, 0, 152, 153, 154, 0, 223, 155, 156,
	0, 157, 158, 0, 159, 224, 225, 160, 0, 166,
	161, 162, 163, 165, 226, 164, 227, 0, 167, 0,
	168, 169, 0, 228, 229, 230, 0, 0, 170, 231,
	232, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 233, 234, 71, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 0, 0,
	107, 205, 0, 206, 0, 108, 109, 814, 208, 0,
	0, 112, 0, 110, 0, 0, 111, 209, 210, 211,
	212, 0, 213, 0, 0, 113, 0, 114, 115, 0,
	0, 214, 0, 116, 0, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 0, 124, 125, 128,
	126, 0, 127, 0, 215, 129, 216, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 0, 133, 0, 218,
	134, 135, 136, 0, 219, 137, 220, 138, 0, 139,
	140, 141, 221, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 0, 149, 150, 222, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 0, 157, 158, 0, 159,
	224, 225, 160, 0, 166, 161, 162, 163, 165, 226,
	164, 227, 0, 167, 0, 168, 169, 0, 228, 229,
	230, 0, 0, 170, 231, 232, 0, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 0, 0, 178, 179,
	180, 233, 234, 71, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 0, 0, 0, 74,
	75, 0, 76, 0, 0, 0, 0, 186, 0, 0,
	0, 0, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 0, 80, 193, 194, 81, 0, 0, 195, 196,
	197, 0, 198, 0, 0, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 0, 89, 90, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 94, 199,
	95, 200, 201, 0, 96, 0, 97, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 202, 101, 102,
	203, 0, 0, 0, 103, 104, 204, 0, 105, 0,
	106, 0, 0, 0, 0, 107, 205, 0, 206, 0,
	108, 109, 207, 208, 0, 0, 112, 0, 110, 0,
	0, 111, 209, 210, 211, 212, 0, 213, 0, 0,
	113, 0, 114, 115, 0, 0, 214, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 0, 124, 125, 128, 126, 0, 127, 0, 215,
	129, 216, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 0, 133, 0, 218, 134, 135, 136, 0, 219,
	137, 220, 138, 0, 139, 140, 141, 221, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	222, 151, 0, 271, 153, 154, 0, 223, 155, 156,
	0, 157, 158, 0, 159, 224, 225, 160, 0, 166,
	161, 162, 163, 165, 226, 164, 227, 0, 167, 0,
	168, 169, 0, 228, 229, 230, 0, 0, 170, 231,
	232, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 233, 234, 71, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 186, 0, 685, 0, 0, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 0, 0,
	107, 205, 0, 206, 0, 108, 109, 207, 208, 0,
	0, 112, 0, 110, 0, 0, 111, 209, 210, 211,
	212, 0, 213, 0, 0, 113, 0, 114, 115, 0,
	0, 214, 0, 116, 0, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 0, 124, 125, 128,
	126, 0, 127, 0, 215, 129, 216, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 0, 133, 0, 218,
	134, 135, 136, 0, 219, 137, 220, 138, 0, 139,
	140, 141, 221, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 0, 149, 150, 222, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 0, 0, 158, 0, 159,
	224, 225, 160, 0, 166, 161, 162, 163, 165, 226,
	164, 227, 0, 167, 0, 168, 169, 0, 228, 229,
	230, 0, 0, 170, 231, 232, 0, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 0, 0, 178, 179,
	180, 233, 234, 71, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 0, 0, 0, 74,
	75, 0, 76, 0, 0, 0, 0, 186, 0, 0,
	0, 0, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 0, 80, 193, 194, 81, 0, 0, 195, 196,
	197, 0, 198, 0, 0, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 0, 89, 90, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 94, 199,
	95, 200, 201, 0, 96, 0, 97, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 202, 101, 102,
	203, 0, 0, 0, 103, 104, 204, 0, 105, 0,
	106, 0, 0, 0, 0, 107, 205, 0, 206, 0,
	108, 109, 449, 208, 0, 0, 112, 0, 110, 0,
	0, 111, 209, 210, 211, 212, 0, 213, 0, 0,
	113, 0, 114, 115, 0, 0, 214, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 0, 124, 125, 128, 126, 0, 127, 0, 215,
	129, 216, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 0, 133, 0, 218, 134, 135, 136, 0, 219,
	137, 220, 138, 0, 139, 140, 141, 221, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	222, 151, 0, 152, 153, 154, 0, 223, 155, 156,
	0, 157, 158, 0, 159, 224, 225, 160, 0, 166,
	161, 162, 163, 165, 226, 164, 227, 0, 167, 0,
	168, 169, 0, 228, 229, 230, 0, 0, 170, 231,
	232, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 233, 234, 71, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 0, 0,
	107, 205, 0, 206, 0, 108, 109, 445, 208, 0,
	0, 112, 0, 110, 0, 0, 111, 209, 210, 211,
	212, 0, 213, 0, 0, 113, 0, 114, 115, 0,
	0, 214, 0, 116, 0, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 0, 124, 125, 128,
	126, 0, 127, 0, 215, 129, 216, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 0, 133, 0, 218,
	134, 135, 136, 0, 219, 137, 220, 138, 0, 139,
	140, 141, 221, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 0, 149, 150, 222, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 0, 157, 158, 0, 159,
	224, 225, 160, 0, 166, 161, 162, 163, 165, 226,
	164, 227, 0, 167, 0, 168, 169, 0, 228, 229,
	230, 0, 0, 170, 231, 232, 0, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 0, 0, 178, 179,
	180, 233, 234, 71, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 0, 0, 0, 74,
	75, 0, 76, 0, 0, 0, 0, 186, 0, 0,
	0, 0, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 0, 80, 193, 194, 81, 0, 0, 195, 196,
	406, 0, 198, 0, 0, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 0, 89, 90, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 94, 199,
	95, 200, 201, 0, 96, 0, 97, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 202, 101, 102,
	203, 0, 0, 0, 103, 104, 204, 0, 105, 0,
	106, 0, 0, 0, 0, 107, 205, 0, 206, 0,
	108, 109, 207, 208, 0, 0, 112, 0, 110, 0,
	0, 111, 209, 210, 211, 212, 0, 213, 0, 0,
	113, 0, 114, 115, 0, 0, 214, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	282, 0, 124, 125, 128, 126, 0, 127, 0, 215,
	129, 216, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 0, 133, 0, 218, 134, 135, 136, 0, 219,
	137, 220, 138, 0, 139, 140, 141, 221, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	222, 151, 0, 152, 153, 154, 0, 223, 155, 156,
	0, 157, 158, 0, 159, 224, 225, 160, 0, 166,
	161, 162, 163, 165, 226, 164, 227, 0, 167, 0,
	168, 169, 0, 281, 229, 230, 0, 0, 277, 231,
	232, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 233, 234, 71, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 0, 0,
	107, 205, 0, 206, 0, 108, 109, 207, 208, 0,
	0, 112, 0, 110, 0, 0, 111, 209, 210, 211,
	212, 0, 213, 0, 0, 113, 0, 114, 115, 0,
	0, 214, 0, 116, 0, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 282, 0, 124, 125, 128,
	126, 0, 127, 0, 215, 129, 216, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 0, 133, 0, 218,
	134, 135, 136, 0, 219, 137, 220, 138, 0, 139,
	140, 141, 221, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 0, 149, 150, 222, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 0, 157, 158, 0, 159,
	224, 225, 160, 0, 166, 161, 162, 163, 165, 226,
	164, 227, 0, 167, 0, 168, 169, 0, 281, 229,
	230, 0, 0, 277, 231, 232, 0, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 0, 0, 178, 179,
	180, 233, 234, 71, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 0, 0, 0, 74,
	75, 0, 76, 0, 0, 0, 0, 186, 0, 0,
	0, 0, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 0, 80, 193, 194, 81, 0, 0, 195, 196,
	197, 0, 198, 0, 0, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 0, 89, 90, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 94, 199,
	95, 200, 201, 0, 96, 0, 97, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 202, 101, 102,
	203, 0, 0, 0, 103, 104, 204, 0, 105, 0,
	106, 0, 0, 0, 0, 107, 205, 0, 206, 0,
	108, 109, 370, 208, 0, 0, 112, 0, 110, 0,
	0, 111, 209, 210, 211, 212, 0, 213, 0, 0,
	113, 0, 114, 115, 0, 0, 214, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 0, 124, 125, 128, 126, 0, 127, 0, 215,
	129, 216, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 0, 133, 0, 218, 134, 135, 136, 0, 219,
	137, 220, 138, 0, 139, 140, 141, 221, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	222, 151, 0, 152, 153, 154, 0, 223, 155, 156,
	0, 157, 158, 0, 159, 224, 225, 160, 0, 166,
	161, 162, 163, 165, 226, 164, 227, 0, 167, 0,
	168, 169, 0, 228, 229, 230, 0, 0, 170, 231,
	232, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 233, 234, 71, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 0, 0,
	107, 205, 0, 206, 0, 108, 109, 367, 208, 0,
	0, 112, 0, 110, 0, 0, 111, 209, 210, 211,
	212, 0, 213, 0, 0, 113, 0, 114, 115, 0,
	0, 214, 0, 116, 0, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 0, 124, 125, 128,
	126, 0, 127, 0, 215, 129, 216, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 0, 133, 0, 218,
	134, 135, 136, 0, 219, 137, 220, 138, 0, 139,
	140, 141, 221, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 0, 149, 150, 222, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 0, 157, 158, 0, 159,
	224, 225, 160, 0, 166, 161, 162, 163, 165, 226,
	164, 227, 0, 167, 0, 168, 169, 0, 228, 229,
	230, 0, 0, 170, 231, 232, 0, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 0, 0, 178, 179,
	180, 233, 234, 71, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 0, 0, 0, 74,
	75, 0, 76, 0, 0, 0, 0, 186, 0, 0,
	0, 0, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 0, 80, 193, 194, 81, 0, 0, 195, 196,
	197, 0, 198, 0, 0, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 0, 89, 90, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 94, 199,
	95, 200, 201, 0, 96, 0, 97, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 202, 101, 102,
	203, 0, 0, 0, 103, 104, 204, 0, 105, 0,
	106, 0, 0, 0, 0, 107, 205, 0, 206, 0,
	108, 109, 365, 208, 0, 0, 112, 0, 110, 0,
	0, 111, 209, 210, 211, 212, 0, 213, 0, 0,
	113, 0, 114, 115, 0, 0, 214, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 0, 124, 125, 128, 126, 0, 127, 0, 215,
	129, 216, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 0, 133, 0, 218, 134, 135, 136, 0, 219,
	137, 220, 138, 0, 139, 140, 141, 221, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	222, 151, 0, 152, 153, 154, 0, 223, 155, 156,
	0, 157, 158, 0, 159, 224, 225, 160, 0, 166,
	161, 162, 163, 165, 226, 164, 227, 0, 167, 0,
	168, 169, 0, 228, 229, 230, 0, 0, 170, 231,
	232, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 233, 234, 71, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 0, 0,
	107, 205, 0, 206, 0, 108, 109, 348, 208, 0,
	0, 112, 0, 110, 0, 0, 111, 209, 210, 211,
	212, 0, 213, 0, 0, 113, 0, 114, 115, 0,
	0, 214, 0, 116, 0, 0, 117, 0, 0, 118,
	0, 119, 120, 121, 122, 123, 0, 124, 125, 128,
	126, 0, 127, 0, 215, 129, 216, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 0, 133, 0, 218,
	134, 135, 136, 0, 219, 137, 220, 138, 0, 139,
	140, 141, 221, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 0, 149, 150, 222, 151, 0, 152, 153,
	154, 0, 223, 155, 156, 0, 157, 158, 0, 159,
	224, 225, 160, 0, 166, 161, 162, 163, 165, 226,
	164, 227, 0, 167, 0, 168, 169, 0, 228, 229,
	230, 0, 0, 170, 231, 232, 0, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 0, 0, 178, 179,
	180, 233, 234, 71, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 0, 0, 0, 74,
	75, 0, 76, 0, 0, 0, 0, 186, 0, 0,
	0, 0, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 0, 80, 193, 194, 81, 0, 0, 195, 196,
	197, 0, 198, 0, 0, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 0, 89, 90, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 94, 199,
	95, 200, 201, 0, 96, 0, 97, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 202, 101, 102,
	203, 0, 0, 0, 103, 104, 204, 0, 105, 0,
	106, 0, 0, 0, 0, 107, 205, 0, 206, 0,
	108, 109, 207, 208, 0, 0, 112, 0, 110, 0,
	0, 111, 209, 210, 211, 212, 0, 213, 0, 0,
	113, 0, 114, 115, 0, 0, 214, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 0, 124, 125, 128, 126, 0, 127, 0, 215,
	129, 216, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 0, 133, 0, 218, 134, 135, 136, 0, 219,
	137, 220, 138, 0, 139, 140, 141, 221, 329, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	222, 151, 0, 152, 153, 154, 0, 223, 155, 156,
	0, 157, 158, 0, 159, 224, 225, 160, 0, 166,
	161, 162, 163, 165, 226, 164, 227, 0, 167, 0,
	168, 169, 0, 228, 229, 230, 0, 0, 170, 231,
	232, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 233, 234, 71, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 0, 0,
	0, 0, 186, 0, 0, 0, 0, 77, 78, 187,
	188, 189, 190, 79, 191, 192, 0, 80, 193, 194,
	81, 0, 0, 195, 196, 197, 0, 198, 0, 0,
	0, 82, 83, 84, 0, 85, 0, 86, 87, 88,
	0, 0, 89, 90, 0, 0, 0, 0, 0, 0,
	91, 92, 93, 94, 199, 95, 200, 201, 0, 96,
	0, 97, 0, 0, 0, 98, 99, 0, 100, 0,
	0, 0, 202, 101, 102, 203, 0, 0, 0, 103,
	104, 204, 0, 105, 0, 106, 0, 0, 0, 0,
	107, 205, 0, 206, 0, 108, 109, 207, 208, 0,
	0, 112, 0, 110, 0, 0, 111, 209, 210, 211,
	212, 0, 213, 0, 0, 113, 0, 114, 115, 0,
	0, 214, 0, 116, 0, 0, 274, 0, 0, 118,
	0, 119, 120, 121, 122, 282, 0, 124, 125, 128,
	126, 0, 127, 0, 215, 129, 216, 130, 131, 0,
	0, 0, 0, 0, 132, 217, 0, 133, 0, 218,
	134, 135, 136, 0, 219, 137, 220, 138, 0, 139,
	140, 141, 221, 142, 143, 0, 145, 146, 144, 147,
	0, 148, 0, 149, 150, 276, 151, 0, 152, 153,
	154, 0, 223, 155, 275, 0, 157, 158, 0, 159,
	224, 225, 160, 0, 166, 161, 162, 163, 165, 226,
	164, 227, 0, 167, 0, 168, 169, 0, 281, 229,
	230, 0, 0, 277, 231, 232, 0, 171, 172, 173,
	174, 0, 0, 175, 176, 177, 0, 0, 178, 179,
	180, 233, 234, 71, 0, 181, 0, 0, 0, 0,
	182, 183, 184, 185, 0, 0, 0, 0, 0, 74,
	75, 0, 76, 0, 0, 0, 0, 186, 0, 0,
	0, 0, 77, 78, 187, 188, 189, 190, 79, 191,
	192, 0, 80, 193, 194, 81, 0, 0, 195, 196,
	197, 0, 198, 0, 0, 0, 82, 83, 84, 0,
	85, 0, 86, 87, 88, 0, 0, 89, 90, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 94, 199,
	95, 200, 201, 0, 96, 0, 97, 0, 0, 0,
	98, 99, 0, 100, 0, 0, 0, 202, 101, 102,
	203, 0, 0, 0, 103, 104, 204, 0, 105, 0,
	106, 0, 0, 0, 0, 107, 205, 0, 206, 0,
	108, 109, 207, 208, 0, 0, 112, 0, 110, 0,
	0, 111, 209, 210, 211, 212, 0, 213, 0, 0,
	113, 0, 114, 115, 0, 0, 214, 0, 116, 0,
	0, 117, 0, 0, 118, 0, 119, 120, 121, 122,
	123, 0, 124, 125, 128, 126, 0, 127, 0, 215,
	129, 216, 130, 131, 0, 0, 0, 0, 0, 132,
	217, 0, 133, 0, 218, 134, 135, 0, 0, 219,
	137, 220, 138, 0, 139, 0, 141, 221, 142, 143,
	0, 145, 146, 144, 147, 0, 148, 0, 149, 150,
	222, 0, 0, 152, 153, 154, 0, 223, 155, 156,
	0, 157, 158, 0, 159, 224, 225, 160, 0, 166,
	161, 162, 163, 165, 226, 164, 227, 0, 167, 0,
	168, 169, 0, 228, 229, 230, 0, 0, 170, 231,
	232, 0, 171, 172, 173, 174, 0, 0, 175, 176,
	177, 0, 0, 178, 179, 180, 233, 234, 0, 0,
	181, 0, 0, 0, 0, 182, 183, 184, 185, 840,
	841, 0, 860, 861, 862, 870, 871, 872, 0, 0,
	0, 0, 0, 0, 0, 863, 0, 0, 0, 0,
	0, 0, 843, 0, 874, 840, 841, 0, 860, 861,
	862, 870, 871, 872, 0, 0, 0, 0, 0, 0,
	0, 863, 0, 842, 0, 0, 0, 0, 843, 857,
	874, 0, 0, 0, 840, 841, 0, 860, 861, 862,
	870, 871, 872, 0, 0, 0, 0, 0, 0, 842,
	863, 0, 0, 0, 0, 857, 0, 843, 0, 874,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 848, 842, 0,
	0, 0, 0, 0, 857, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 867, 875, 0, 0, 0, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 0, 873,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 865,
	867, 875, 0, 0, 0, 858, 0, 0, 0, 0,
	0, 0, 848, 0, 0, 873, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 865, 0, 864, 0, 867,
	875, 858, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 873, 0, 0, 0, 0, 0,
	0, 0, 0, 864, 865, 0, 0, 0, 0, 0,
	858, 0, 859, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 868, 0, 0, 0, 0, 0, 0,
	0, 0, 864, 0, 0, 0, 0, 0, 859, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 868,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 859, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 868, 866,
	0, 0, 854, 855, 856, 0, 853, 850, 851, 852,
	844, 845, 846, 847, 849, 0, 869, 0, 0, 0,
	0, 0, 0, 1398, 0, 866, 0, 0, 854, 855,
	856, 0, 853, 850, 851, 852, 844, 845, 846, 847,
	849, 0, 869, 0, 0, 0, 0, 0, 0, 1351,
	0, 0, 0, 0, 866, 0, 0, 854, 855, 856,
	0, 853, 850, 851, 852, 844, 845, 846, 847, 849,
	0, 869, 0, 840, 841, 1801, 860, 861, 862, 870,
	871, 872, 0, 0, 0, 0, 0, 0, 0, 863,
	0, 0, 0, 0, 0, 0, 843, 0, 874, 840,
	841, 0, 860, 861, 862, 870, 871, 872, 0, 0,
	0, 0, 0, 0, 0, 863, 0, 842, 0, 0,
	0, 0, 843, 857, 874, 0, 0, 0, 840, 841,
	0, 860, 861, 862, 870, 871, 872, 0, 0, 0,
	0, 0, 0, 842, 863, 0, 0, 0, 0, 857,
	0, 843, 0, 874, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 848, 842, 0, 0, 0, 0, 0, 857, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 867, 875,
	0, 0, 0, 0, 0, 0, 0, 848, 0, 0,
	0, 0, 0, 873, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 865, 867, 875, 0, 0, 0, 858,
	0, 0, 0, 0, 0, 0, 848, 0, 0, 873,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 865,
	0, 864, 0, 867, 875, 858, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 873, 0,
	0, 0, 0, 0, 0, 0, 0, 864, 865, 0,
	0, 0, 0, 0, 858, 0, 859, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 868, 0, 0,
	0, 0, 0, 0, 0, 0, 864, 0, 0, 0,
	0, 0, 859, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 868, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 859, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 868, 866, 0, 0, 854, 855, 856, 0,
	853, 850, 851, 852, 844, 845, 846, 847, 849, 0,
	869, 0, 0, 0, 1799, 0, 0, 0, 0, 866,
	0, 0, 854, 855, 856, 0, 853, 850, 851, 852,
	844, 845, 846, 847, 849, 0, 869, 0, 1358, 1359,
	1780, 1376, 1377, 1378, 0, 0, 0, 0, 866, 0,
	0, 854, 855, 856, 0, 853, 850, 851, 852, 844,
	845, 846, 847, 849, 0, 869, 0, 840, 841, 1755,
	860, 861, 862, 870, 871, 872, 0, 0, 0, 0,
	0, 0, 0, 863, 0, 0, 0, 0, 1373, 0,
	843, 0, 874, 840, 841, 0, 860, 861, 862, 870,
	871, 872, 0, 0, 0, 0, 0, 0, 0, 863,
	0, 842, 0, 0, 0, 0, 843, 857, 874, 0,
	0, 0, 840, 841, 0, 860, 861, 862, 870, 871,
	872, 0, 0, 0, 0, 0, 1364, 842, 863, 0,
	0, 0, 0, 857, 0, 843, 0, 874, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 848, 842, 0, 1379, 0,
	0, 0, 857, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 867, 875, 1374, 0, 0, 0, 0, 0,
	0, 848, 0, 0, 0, 0, 0, 873, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 865, 867, 875,
	0, 0, 0, 858, 0, 0, 0, 0, 0, 0,
	848, 0, 0, 873, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 865, 0, 864, 0, 867, 875, 858,
	0, 1375, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 873, 0, 0, 0, 0, 0, 0, 0,
	0, 864, 865, 0, 0, 0, 0, 0, 858, 0,
	859, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 868, 0, 0, 0, 0, 0, 0, 0, 0,
	864, 0, 0, 0, 0, 0, 859, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 868, 0, 0,
	0, 1370, 1371, 1372, 0, 1369, 1366, 1367, 1368, 1360,
	1361, 1362, 1363, 1365, 0, 859, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 868, 866, 0, 0,
	854, 855, 856, 0, 853, 850, 851, 852, 844, 845,
	846, 847, 849, 0, 869, 0, 0, 0, 1750, 0,
	0, 0, 0, 866, 0, 0, 854, 855, 856, 0,
	853, 850, 851, 852, 844, 845, 846, 847, 849, 0,
	869, 0, 1358, 1359, 1746, 1376, 1377, 1378, 0, 0,
	0, 0, 866, 0, 0, 854, 855, 856, 0, 853,
	850, 851, 852, 844, 845, 846, 847, 849, 0, 869,
	0, 840, 841, 1682, 860, 861, 862, 870, 871, 872,
	0, 0, 0, 0, 0, 0, 0, 863, 0, 0,
	0, 0, 1373, 0, 843, 0, 874, 840, 841, 0,
	860, 861, 862, 870, 871, 872, 0, 0, 0, 0,
	0, 0, 0, 863, 0, 842, 0, 0, 0, 0,
	843, 857, 874, 0, 0, 0, 840, 841, 0, 860,
	861, 862, 870, 871, 872, 0, 0, 0, 0, 0,
	1364, 842, 863, 0, 0, 0, 0, 857, 0, 843,
	0, 874, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 848,
	842, 0, 0, 0, 0, 0, 857, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 867, 875, 1374, 0,
	0, 0, 0, 0, 0, 848, 0, 0, 0, 0,
	0, 873, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 865, 867, 875, 0, 0, 0, 858, 0, 0,
	0, 0, 0, 0, 848, 0, 0, 873, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 865, 0, 864,
	0, 867, 875, 858, 0, 1375, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 873, 0, 0, 0,
	0, 0, 0, 0, 0, 864, 865, 0, 0, 0,
	0, 0, 858, 0, 859, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 868, 0, 0, 0, 0,
	0, 0, 0, 0, 864, 0, 0, 0, 0, 0,
	859, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 868, 0, 0, 0, 1370, 1371, 1372, 0, 1369,
	1366, 1367, 1368, 1360, 1361, 1362, 1363, 1365, 0, 859,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	868, 866, 0, 0, 854, 855, 856, 0, 853, 850,
	851, 852, 844, 845, 846, 847, 849, 0, 869, 0,
	0, 0, 1681, 0, 0, 0, 0, 866, 0, 0,
	854, 855, 856, 0, 853, 850, 851, 852, 844, 845,
	846, 847, 849, 0, 869, 0, 0, 0, 1589, 0,
	0, 0, 0, 0, 0, 0, 866, 0, 0, 854,
	855, 856, 0, 853, 850, 851, 852, 844, 845, 846,
	847, 849, 0, 869, 0, 840, 841, 1523, 860, 861,
	862, 870, 871, 872, 0, 0, 0, 0, 0, 0,
	0, 863, 0, 0, 0, 0, 0, 0, 843, 0,
	874, 840, 841, 0, 860, 861, 862, 870, 871, 872,
	0, 0, 0, 0, 0, 0, 0, 863, 0, 842,
	0, 0, 0, 0, 843, 857, 874, 0, 0, 0,
	840, 841, 0, 860, 861, 862, 870, 871, 872, 0,
	0, 0, 0, 0, 0, 842, 863, 0, 0, 0,
	0, 857, 0, 843, 0, 874, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 848, 842, 0, 0, 0, 0, 0,
	857, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	867, 875, 0, 0, 0, 0, 0, 0, 0, 848,
	0, 0, 0, 0, 0, 873, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 865, 867, 875, 0, 0,
	0, 858, 0, 0, 0, 0, 0, 0, 848, 0,
	0, 873, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 865, 0, 864, 0, 867, 875, 858, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	873, 0, 0, 0, 0, 0, 0, 0, 0, 864,
	865, 0, 0, 0, 0, 0, 858, 0, 859, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 868,
	0, 0, 0, 0, 0, 0, 0, 0, 864, 0,
	0, 0, 0, 0, 859, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 868, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 859, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 868, 866, 0, 0, 854, 855,
	856, 0, 853, 850, 851, 852, 844, 845, 846, 847,
	849, 0, 869, 0, 0, 0, 1507, 0, 0, 0,
	0, 866, 0, 0, 854, 855, 856, 0, 853, 850,
	851, 852, 844, 845, 846, 847, 849, 0, 869, 0,
	0, 0, 1129, 0, 0, 0, 0, 0, 0, 0,
	866, 0, 0, 854, 855, 856, 0, 853, 850, 851,
	852, 844, 845, 846, 847, 849, 0, 869, 0, 1437,
	840, 841, 0, 860, 861, 862, 870, 871, 872, 0,
	0, 0, 0, 0, 0, 0, 863, 0, 0, 0,
	0, 0, 0, 843, 0, 874, 840, 841, 0, 860,
	861, 862, 870, 871, 872, 0, 0, 0, 0, 0,
	0, 0, 863, 0, 842, 0, 0, 0, 0, 843,
	857, 874, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	842, 0, 0, 0, 0, 0, 857, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 848, 1869,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 867, 875, 0, 0, 0,
	0, 0, 0, 0, 848, 0, 1390, 0, 0, 1389,
	873, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	865, 867, 875, 0, 0, 0, 858, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 873, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 865, 0, 864, 0,
	0, 0, 858, 0, 0, 0, 0, 0, 0, 0,
	0, 1868, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 864, 0, 0, 0, 0, 0,
	0, 0, 0, 859, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 868, 0, 840, 841, 0, 860,
	861, 862, 870, 871, 872, 0, 0, 0, 0, 859,
	0, 0, 863, 0, 0, 0, 877, 1062, 0, 843,
	868, 874, 840, 841, 0, 860, 861, 862, 870, 871,
	872, 0, 0, 0, 0, 0, 0, 0, 863, 0,
	842, 0, 876, 0, 0, 843, 857, 874, 0, 0,
	866, 0, 0, 854, 855, 856, 0, 853, 850, 851,
	852, 844, 845, 846, 847, 849, 842, 869, 0, 0,
	0, 0, 857, 0, 1063, 0, 866, 0, 0, 854,
	855, 856, 0, 853, 850, 851, 852, 844, 845, 846,
	847, 849, 0, 869, 848, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 867, 875, 0, 0, 0, 0, 0, 0, 0,
	848, 0, 0, 0, 0, 0, 873, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 865, 867, 875, 0,
	0, 0, 858, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 873, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 865, 0, 864, 0, 0, 0, 858, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	864, 0, 0, 0, 0, 0, 0, 0, 0, 859,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	868, 0, 840, 841, 0, 860, 861, 862, 870, 871,
	872, 0, 0, 0, 0, 859, 0, 0, 863, 0,
	0, 0, 0, 0, 0, 843, 868, 874, 840, 841,
	0, 860, 861, 862, 870, 871, 872, 0, 0, 0,
	0, 0, 0, 0, 863, 0, 842, 0, 0, 0,
	0, 843, 857, 874, 0, 0, 866, 0, 0, 854,
	855, 856, 0, 853, 850, 851, 852, 844, 845, 846,
	847, 849, 842, 869, 0, 0, 0, 0, 857, 0,
	0, 0, 866, 0, 0, 854, 855, 856, 0, 853,
	850, 851, 852, 844, 845, 846, 847, 849, 0, 869,
	848, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 867, 875, 0,
	0, 0, 0, 0, 0, 0, 848, 0, 0, 0,
	0, 0, 873, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 865, 867, 875, 0, 0, 0, 858, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 873, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 865, 0,
	864, 324, 0, 0, 858, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 864, 0, 0, 0,
	0, 0, 0, 0, 0, 859, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 868, 0, 840, 841,
	0, 860, 861, 862, 870, 871, 872, 0, 0, 0,
	0, 859, 0, 0, 863, 0, 0, 0, 0, 0,
	0, 843, 868, 874, 840, 841, 0, 860, 861, 862,
	870, 871, 872, 0, 0, 0, 0, 0, 0, 0,
	863, 1517, 842, 0, 1391, 0, 0, 843, 857, 874,
	0, 0, 866, 0, 0, 854, 855, 856, 0, 853,
	850, 851, 852, 844, 845, 846, 847, 849, 842, 869,
	0, 0, 0, 0, 857, 0, 0, 0, 866, 0,
	0, 854, 855, 856, 0, 853, 850, 851, 852, 844,
	845, 846, 847, 849, 0, 869, 848, 0, 0, 0,
	0, 1396, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 867, 875, 0, 0, 0, 0, 0,
	0, 0, 848, 0, 0, 0, 0, 0, 873, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 865, 867,
	875, 0, 0, 0, 858, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 873, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 865, 0, 864, 0, 0, 0,
	858, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 864, 0, 0, 0, 0, 0, 0, 0,
	0, 859, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 868, 0, 840, 841, 0, 860, 861, 862,
	870, 871, 872, 0, 0, 0, 0, 859, 0, 0,
	863, 0, 0, 0, 0, 0, 0, 843, 868, 874,
	840, 841, 0, 860, 861, 862, 870, 871, 872, 0,
	0, 0, 0, 0, 0, 0, 863, 0, 842, 0,
	1350, 0, 0, 843, 857, 874, 0, 0, 866, 0,
	0, 854, 855, 856, 0, 853, 850, 851, 852, 844,
	845, 846, 847, 849, 842, 869, 0, 0, 0, 0,
	857, 0, 0, 0, 866, 0, 0, 854, 855, 856,
	0, 853, 850, 851, 852, 844, 845, 846, 847, 849,
	0, 869, 848, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 867,
	875, 0, 0, 0, 0, 0, 0, 0, 848, 0,
	0, 0, 0, 0, 873, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 865, 867, 875, 0, 0, 0,
	858, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	873, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	865, 0, 864, 0, 0, 0, 858, 0, 0, 0,
	0, 0, 0, 1356, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 864, 0,
	0, 0, 0, 0, 0, 0, 0, 859, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 868, 0,
	840, 841, 0, 860, 861, 862, 870, 871, 872, 0,
	0, 0, 0, 859, 0, 0, 863, 0, 0, 0,
	0, 0, 0, 843, 868, 874, 840, 841, 0, 860,
	861, 862, 870, 871, 872, 0, 0, 0, 0, 0,
	0, 0, 863, 0, 842, 0, 0, 0, 0, 843,
	857, 874, 0, 0, 866, 0, 0, 854, 855, 856,
	0, 853, 850, 851, 852, 844, 845, 846, 847, 849,
	842, 869, 0, 0, 0, 0, 857, 0, 0, 0,
	866, 0, 0, 854, 855, 856, 0, 853, 850, 851,
	852, 844, 845, 846, 847, 849, 0, 869, 848, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 867, 875, 0, 0, 0,
	0, 0, 0, 0, 848, 0, 0, 0, 0, 0,
	873, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	865, 867, 875, 0, 0, 0, 858, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 873, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 865, 0, 864, 0,
	0, 0, 858, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 859, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 868, 0, 840, 841, 0, 860,
	861, 862, 870, 871, 872, 0, 0, 0, 0, 859,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 843,
	868, 874, 840, 841, 0, 860, 861, 862, 870, 871,
	872, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	842, 0, 0, 0, 0, 843, 857, 874, 0, 0,
	866, 0, 0, 854, 855, 856, 0, 853, 850, 851,
	852, 844, 845, 846, 847, 849, 842, 869, 0, 0,
	0, 0, 857, 0, 0, 0, 866, 0, 0, 854,
	855, 856, 0, 853, 850, 851, 852, 844, 845, 846,
	847, 849, 0, 869, 848, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 867, 875, 0, 0, 0, 0, 0, 0, 0,
	848, 0, 0, 0, 0, 0, 873, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 865, 867, 875, 0,
	26, 0, 858, 0, 0, 0, 0, 0, 0, 0,
	0, 47, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 865, 0, 0, 0, 0, 0, 858, 0,
	0, 0, 0, 0, 0, 49, 0, 0, 0, 0,
	0, 27, 0, 54, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 859,
	0, 0, 38, 0, 0, 0, 0, 0, 0, 34,
	868, 0, 50, 0, 0, 0, 37, 35, 0, 0,
	0, 0, 0, 0, 0, 859, 0, 0, 0, 0,
	0, 0, 39, 0, 0, 0, 868, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 866, 0, 0, 854,
	855, 856, 0, 853, 850, 851, 852, 844, 845, 846,
	847, 849, 0, 869, 0, 0, 0, 0, 0, 0,
	0, 0, 866, 0, 0, 854, 855, 856, 0, 853,
	850, 851, 852, 844, 845, 846, 847, 849, 0, 869,
	36, 0, 0, 0, 720, 714, 737, 708, 728, 727,
	0, 52, 710, 709, 40, 0, 51, 739, 738, 0,
	0, 41, 0, 0, 61, 0, 0, 0, 0, 44,
	46, 0, 0, 0, 0, 0, 0, 0, 0, 48,
	0, 0, 0, 0, 0, 0, 0, 63, 733, 0,
	725, 724, 0, 0, 0, 0, 0, 0, 0, 723,
	53, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 64, 722, 0, 0, 0, 0,
	0, 0, 59, 0, 0, 0, 0, 0, 60, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 715, 716, 717, 718, 0, 736, 58, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	726, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 721, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 712, 0, 0, 0,
	0, 0, 0, 0, 719, 713, 0, 0, 0, 0,
	0, 0, 0, 741, 0, 0, 0, 0, 0, 0,
	711, 0, 0, 734, 735, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 740,
}
var sqlPact = [...]int{

	23987, -1000, 4, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 895, 16064, -1000, -1000,
	-1000, -1000, -1000, 736, 849, 2026, 16064, 16064, 15799, 1115,
	1115, 17389, -1000, -1000, 20304, -1000, 2051, 475, 483, 475,
	475, 491, 17389, 578, 632, 114, -1000, 618, 3, 20039,
	16064, 1320, 23, 14739, 327, 23987, 15534, 19774, 16064, 358,
	31, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1154, 1062, 1061, 14739, 19509,
	19244, 18979, -1000, 9928, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 577, 332, 331, -1000, 15269, -1000, 889, -1000,
	22, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 885,
	-1000, 16064, -1000, -1000, 18714, 18449, 329, 822, -1000, -1000,
	546, 412, 1340, -1000, 46, -1000, -1000, 1148, -1000, 882,
	1144, 1143, 1142, 1138, 1135, 1133, 411, 837, -1000, 562,
	822, -1000, 822, -1000, -1000, -1000, 539, 17389, -1000, 14739,
	-1000, 18184, 16064, 1075, 17919, -1000, 618, -1000, -1000, -1000,
	945, 1319, 1319, 1319, 1338, 159, 157, 114, 12, 16064,
	-1000, 328, 12, 7155, 7155, -1000, -1000, 327, -1000, 363,
	12879, -1000, 7711, -1000, 939, 1226, 425, 663, 1221, -136,
	708, 599, 12074, 31, -1000, -1000, -1000, 9104, 4296, 14739,
	16064, 16064, 634, 17654, -1000, 1217, 101, 1215, -1000, 97,
	1211, -1000, 0, -1000, -1000, -1000, -1000, -1000, -1000, 327,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 15004, 1373, 24148, -1000, 9104, -1000,
	-1000, 13147, 1122, 13147, -1000, -1000, 1371, -1000, 9104, -1000,
	21, 17, 1009, 1051, 10471, 10206, 1274, 754, -1000, -1000,
	-1000, 45, 4572, 16064, 1167, 13147, 16064, 16064, 16064, 16064,
	16064, 16064, -1000, 996, -1000, 16064, -1000, 15, 13, -1000,
	17389, -1000, 113, -1000, 419, 963, 161, 17124, 1239, 952,
	-1000, 945, -1000, 892, 985, 8270, 9104, 114, -1000, -1000,
	114, 114, 9104, -1000, -1000, 16064, 12, 1368, 16064, 148,
	-1000, 22802, -1000, -1000, 9104, 9104, 9104, 9104, 9104, 838,
	-1000, -1000, -1000, 5424, -1000, -1000, 31, 326, 345, -1000,
	-1000, 325, 31, -1000, -1000, -1000, -1000, 324, 1472, 450,
	-1000, -1000, -1000, 9104, 417, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1159, 323, 322, -1000, -1000, -1000,
	-1000, 320, 319, 318, 316, 315, 312, 311, 309, 303,
	302, 301, 299, 298, 295, 766, -1000, 437, -1000, -1000,
	437, 437, -1000, 282, 282, 287, -1000, -1000, -1000, -1000,
	282, -1000, -1000, -1000, 421, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 288, 148, -1000, -1000, -1000, 16064, -6, -1000,
	23640, -1000, -35, 704, -1000, 14209, 1322, 1292, 1289, 14739,
	1357, 1350, 535, 16064, 16064, 530, -1000, 1129, -10, -1000,
	-1000, 2917, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 426,
	88, 1363, 88, 12343, -1000, 16064, 16064, -1000, 16064, -1000,
	-1000, 16064, -1000, 16064, 16064, 968, 13679, 753, 1210, 3,
	-12, -1000, 1378, -1000, -1000, -1000, -1000, 106, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 287, 766, 282, 282, 282, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 421, -1000, -1000, 437, 437, 437,
	-1000, -1000, -14, 23640, 525, -4, 13413, 16064, -1000, 40,
	-1000, -1000, 1128, 471, -16, 757, 1052, 676, -1000, -1000,
	-1000, -1000, 10, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1455, -1000, -1000, -1000, -1000, 1459, 10,
	-1000, -1000, -1000, -1000, -1000, 1471, -1000, -1000, -1000, 4572,
	-1000, -1000, -1000, 16064, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 757, 1052, -1000, -1000, 14739, 13944, 3,
	1209, 1362, 16064, 879, 949, -1000, -1000, 398, 1204, -1000,
	-1000, -1000, -1000, 23640, -1000, 23640, 659, 1068, -1000, 1068,
	7, -1000, 22776, -1000, 275, -18, -1000, 426, 7155, 11806,
	24148, 24148, 16064, 557, 9104, 9104, 9104, 9104, 9104, 9104,
	9104, 9104, 9104, 9104, 9104, 9104, 9104, 9104, 9104, 9104,
	9104, 9104, 9104, 9104, 9104, 9104, 1066, 9104, 524, 9104,
	9104, 9104, 9104, 1137, 798, 254, 4572, -1000, 631, 631,
	631, 23856, 23856, 196, 38, 22241, 5, 31, -1000, -1000,
	6874, 6576, 31, 4848, -1000, 810, 1458, 432, 23640, 1173,
	1105, 274, 153, 152, 9104, 9104, 1017, 9104, 9382, 9104,
	9104, 5702, 9104, 9104, 9104, 9104, 9104, 9104, -1000, 272,
	-1000, -1000, -1000, -1000, 1457, -1000, -1000, 1452, -1000, 554,
	545, 1450, 426, 144, 7711, -1000, 753, 16064, 16064, 16064,
	-1000, -1000, 946, 16859, -1000, 24148, 16064, -1000, 267, 266,
	1030, 1028, 16064, 16064, 16594, 16329, 16064, 857, 259, 258,
	16064, 699, -1000, 16064, 596, 1125, 16064, -1000, 9104, 670,
	9104, 727, -1000, 11269, 442, 16064, 683, 147, -1000, -1000,
	-1000, 396, 16064, -1000, -1000, -1000, 101, -1000, 97, -1000,
	-1000, 14739, -1000, -1000, -1000, -1000, -1000, -1000, 24148, 352,
	349, -1000, 1443, 523, -1000, 522, 520, 517, -1000, 256,
	-1000, 9104, 16064, 13413, -4, -5, -1000, -1000, 16064, 1052,
	-1000, -1000, -1000, -1000, 657, -1000, 715, -1000, 10736, -1000,
	-1000, -1000, 810, -1000, -37, -1000, -1000, -1000, -1000, 142,
	-33, -1000, -1000, -1000, -1000, -1000, 16064, 270, 16064, -1000,
	16064, 3, -22, 16064, 1200, 1470, 16064, -1000, -1000, -1000,
	9104, -1000, -1000, -1000, 3, 16064, -1000, 1104, -1000, -50,
	1263, -157, 14474, -1000, 11001, -1000, -1000, -1000, 406, 603,
	603, 540, 540, 540, 540, 212, 212, 567, 711, 628,
	628, 628, 2312, 313, 313, 628, 628, 628, 23856, 23666,
	379, 9104, 9104, 516, 795, 254, 379, 9104, 1444, 379,
	379, 379, -1000, 1042, -1000, -1000, -1000, 1123, 249, 9382,
	9382, -1000, -1000, -1000, 5424, -1000, -1000, 248, 9104, -1000,
	9104, -68, -111, -1000, -1000, -24, -1000, -1000, -30, 9104,
	9104, 9104, 141, -1000, 139, 614, -1000, 9104, 811, 247,
	246, 9104, -1000, -1000, 23450, 20865, 134, 1121, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 133, 23424, 121, 3378, -1000,
	9382, 9382, 9382, 5424, 242, 119, 22586, -124, 23234, 7989,
	7989, 7989, 118, 23208, 9104, -124, 20839, 3327, 3276, -45,
	-46, -55, 1436, -71, 117, 386, 385, 112, 1104, -1000,
	-1000, -1000, -1000, 510, 496, 1193, -1000, 940, -1000, 751,
	9104, 16064, 241, 240, 789, -1000, 1188, 904, 1184, 904,
	-1000, -35, 689, 9104, 9104, -1000, 495, -1000, -1000, 595,
	-1000, 22270, -1000, 7155, 23640, -1000, 682, 1297, -75, -1000,
	-1000, 7155, 426, 12343, 11806, 7711, -77, -1000, -1000, 753,
	-1000, 476, 1431, 102, 953, 808, 826, 633, 1423, 23640,
	-37, -1000, -37, -1000, -1000, -1000, -1000, -1000, -1000, 16064,
	1083, 13944, 234, 16064, 233, 380, -1000, -1000, 199, 16064,
	-1000, 1239, -1000, 99, -1000, 1098, 1333, -1000, 11806, 903,
	1053, 1040, 11806, 986, 845, 845, 845, -1000, 14474, 4009,
	-1000, -1000, 16064, 198, 11537, 96, 1263, 9104, 379, 379,
	9104, 9382, 9382, -1000, 379, -1000, -1000, -1000, -1000, 1118,
	197, 9104, 24148, 2691, 2254, -83, 6278, -42, 22215, -1000,
	-1000, 345, -1000, 95, 7433, -1000, 22992, -23, -23, -1000,
	1469, 1230, -1000, 9104, 23018, -1000, 12611, 430, 851, 21926,
	24148, 24148, -1000, 9104, -1000, 1116, 9104, -1000, 24148, 24148,
	9382, 9382, 9382, 9382, 9382, 9382, 9382, 9382, 9382, 9382,
	9382, 9382, 9382, 9382, 9382, 9382, 9382, 9382, 9382, 1001,
	9382, 1424, 1424, 1424, -66, 5980, -1000, 1140, 1116, 9104,
	9104, 24148, 93, 91, 90, -1000, 9104, -124, 9104, 9104,
	9104, -1000, -1000, -1000, 86, -1000, 1416, -1000, -1000, -1000,
	-1000, 1098, 16064, 16064, 16064, 1183, 1823, -1000, 21897, -85,
	16064, 16064, -1000, 1022, 1106, 463, 16064, -1000, 16064, -1000,
	16064, 16064, 16064, -89, -90, 16064, -1000, -1000, -87, 7155,
	223, 3, -87, 670, -1000, -79, -1000, 393, -1000, 341,
	334, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 85,
	-1000, -1000, 1087, -1000, 9660, 195, 16064, 13944, 3, 9660,
	874, -1000, -1000, 427, 9104, 9104, 1263, 587, 11806, 11806,
	817, 1038, 11806, -1000, -1000, -1000, -1000, -1000, -1000, 1032,
	191, 16064, 14474, 482, 379, 2202, 237, 9104, 24148, 23882,
	-91, 9104, 9104, -1000, -95, -1000, 9104, -1000, -1000, 1467,
	9104, 82, 81, 75, -1000, -1000, 23640, 9104, -1000, -1000,
	20569, 9104, 72, -1000, 69, 65, 23640, 1140, 23640, -1000,
	-1000, 527, 527, 1424, 1424, 1424, 1424, 872, 872, 971,
	224, 1881, 1881, 1881, 2572, 436, 436, 1881, 1881, 1881,
	1114, 1004, 189, 21498, 9104, -96, -1000, -1000, -1000, 23640,
	23640, 64, -1000, -1000, -1000, -124, 2979, 21871, 21582, -1000,
	57, 427, -1000, -1000, -1000, 16064, -1000, 16064, -1000, 16064,
	16064, 1117, 928, -1000, -1000, 1010, 188, 9382, 16064, -1000,
	779, -97, -101, 917, -1000, 908, 9104, -1000, 24148, 904,
	904, -1000, 494, 488, -1000, -1000, -1000, -87, 1247, 16064,
	1288, -1000, -1000, 186, -1000, -1000, -1000, 809, -102, -1000,
	183, 1311, 9104, -1000, -1000, 184, 9660, -107, 56, -1000,
	-109, 16064, -1000, 16064, 23640, -124, 544, -1000, 817, -1000,
	182, 9104, 11806, -1000, -162, -1000, 377, -1000, 16064, -115,
	-1000, 9104, 9104, 23882, -119, -1000, 379, 379, -1000, 21553,
	-1000, 22992, -1000, -1000, -1000, 23640, 787, -1000, 21527, -1000,
	-1000, -1000, -1000, 9382, 1111, 180, 24148, 21238, -1000, -1000,
	9104, -1000, -1000, -1000, -1000, -1000, 1336, -1000, -1000, 16064,
	936, -1000, -1000, 9104, 21498, 179, 1083, 178, -1000, -1000,
	-1000, 741, -1000, -1000, 23640, 1325, -1000, -1000, 16064, 16064,
	565, -123, 16064, -1000, -1000, 5146, 16064, 779, 9660, 1330,
	31, 16064, 1330, 21209, 4848, -125, -1000, 1083, 779, 174,
	-106, -1000, 1361, 1465, -1000, 16064, 23640, -1000, 1032, -1000,
	4572, -127, -1000, 379, 379, -1000, -1000, 55, 851, 1331,
	-1000, 21842, 9382, 24148, -131, -1000, 21183, -1000, -1000, 1130,
	20894, 976, 16064, -1000, 16064, 16064, 449, 16064, -1000, -1000,
	613, -1000, 426, -1000, 173, 1083, -1000, -1000, -1000, -1000,
	1311, -30, 779, -1000, 1083, 9660, 16064, 162, -1000, -133,
	-1000, -1000, -1000, -1000, 673, 9104, 21842, -137, -1000, -1000,
	1176, -1000, 865, 823, 50, -139, 161, -1000, 9104, -1000,
	12343, -1000, 16064, -1000, 1330, 49, 1083, -1000, -143, -1000,
	-1000, -1000, 48, 8826, 8826, -124, -1000, 16064, -1000, 868,
	867, 627, -1000, -1000, -1000, -1000, -1000, 976, 23640, -129,
	-144, -1000, -1000, -1000, 779, -1000, -1000, -1000, 3682, 861,
	639, 22560, -1000, -1000, -1000, 1251, -1000, 453, 848, 848,
	865, -1000, 904, 1083, 1386, -1000, -1000, -1000, -1000, -1000,
	-1000, 1399, -1000, -1000, 1000, -1000, -1000, -1000, -1000, 8548,
	-1000, -1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1721, 1718, 1380, 119, 1716, 118, 1715, 1711, 1708,
	1707, 1706, 96, 116, 114, 120, 1705, 73, 1703, 1702,
	1700, 95, 1699, 1698, 1695, 56, 1694, 1693, 1691, 1687,
	1686, 1685, 87, 24, 135, 2353, 128, 1684, 1683, 1682,
	27, 98, 62, 1681, 1, 58, 94, 101, 1087, 22,
	1679, 1678, 130, 32, 14, 1598, 97, 138, 122, 112,
	1677, 1676, 1675, 54, 1673, 4, 1670, 1668, 12, 57,
	18, 1664, 26, 20, 1661, 1658, 113, 1652, 66, 100,
	106, 31, 111, 146, 1650, 50, 9, 70, 1648, 17,
	1647, 40, 77, 127, 1646, 44, 153, 76, 35, 59,
	1644, 1642, 1639, 1637, 78, 1635, 90, 65, 1633, 1631,
	74, 1629, 126, 129, 1628, 1627, 117, 1625, 1624, 1623,
	696, 1621, 1620, 334, 1619, 8, 41, 63, 10, 105,
	104, 21, 1618, 19, 1616, 1777, 634, 196, 1609, 48,
	51, 80, 46, 55, 43, 1608, 1607, 103, 1606, 1603,
	1600, 1599, 1597, 79, 1596, 72, 134, 33, 47, 81,
	25, 71, 84, 99, 141, 102, 1593, 1591, 110, 1590,
	253, 1588, 1587, 1072, 109, 1586, 1585, 1584, 989, 799,
	773, 93, 1583, 1582, 705, 337, 1555, 1552, 107, 1549,
	1548, 137, 133, 34, 1545, 108, 1544, 89, 1541, 0,
	52, 49, 1540, 124, 75, 1539, 1538, 1536, 1534, 36,
	5, 11, 6, 7, 3, 30, 29, 1533, 1531, 125,
	85, 1529, 140, 1527, 1524, 23, 1520, 1510, 16, 1507,
	13, 1506, 15, 2, 1504, 139, 1501, 91, 1486, 1385,
	1484, 136, 1481, 1478, 1410, 82,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 4, 42,
	42, 41, 41, 41, 41, 41, 41, 41, 41, 41,
	41, 41, 41, 41, 41, 41, 39, 39, 44, 44,
	44, 43, 43, 38, 38, 5, 5, 5, 6, 6,
	6, 6, 6, 12, 13, 13, 13, 13, 13, 13,
	82, 82, 81, 81, 84, 84, 14, 14, 15, 15,
	15, 15, 15, 15, 15, 15, 169, 169, 168, 16,
	145, 145, 17, 17, 17, 17, 18, 105, 105, 19,
	19, 19, 19, 20, 24, 235, 235, 235, 239, 239,
	240, 240, 241, 241, 241, 241, 241, 241, 241, 237,
	237, 27, 27, 27, 27, 27, 124, 120, 120, 122,
	122, 122, 122, 47, 119, 119, 119, 119, 121, 121,
	121, 121, 192, 191, 191, 197, 197, 197, 60, 60,
	60, 60, 60, 61, 61, 61, 190, 190, 190, 190,
	198, 198, 198, 198, 198, 198, 62, 62, 62, 196,
	196, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 236, 236,
	238, 238, 29, 29, 9, 9, 10, 10, 63, 63,
	64, 64, 127, 127, 127, 127, 65, 65, 126, 207,
	207, 208, 208, 208, 208, 208, 208, 209, 209, 209,
	209, 209, 209, 209, 205, 205, 206, 203, 203, 204,
	204, 204, 204, 242, 242, 125, 125, 68, 68, 212,
	212, 212, 212, 210, 210, 210, 210, 210, 213, 211,
	214, 214, 214, 214, 214, 156, 156, 156, 31, 11,
	8, 8, 109, 109, 72, 72, 160, 160, 160, 54,
	54, 40, 40, 40, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 110, 110, 111, 111, 22, 26, 30,
	30, 30, 30, 30, 244, 244, 51, 51, 51, 51,
	52, 52, 123, 123, 123, 123, 123, 46, 7, 7,
	45, 45, 21, 21, 21, 21, 21, 57, 57, 116,
	116, 116, 118, 118, 117, 117, 117, 95, 95, 32,
	77, 77, 86, 86, 87, 87, 166, 88, 88, 25,
	25, 35, 35, 33, 33, 33, 33, 33, 33, 34,
	34, 36, 36, 36, 36, 36, 36, 36, 220, 220,
	220, 222, 222, 219, 221, 221, 243, 243, 96, 96,
	96, 67, 66, 66, 70, 70, 69, 71, 71, 159,
	93, 93, 93, 93, 112, 113, 113, 114, 114, 115,
	115, 92, 92, 142, 142, 37, 37, 76, 76, 78,
	78, 133, 133, 134, 134, 132, 132, 132, 161, 161,
	161, 161, 162, 162, 162, 162, 162, 162, 157, 157,
	157, 157, 158, 158, 167, 167, 99, 99, 99, 99,
	97, 97, 98, 98, 163, 163, 163, 163, 94, 94,
	164, 164, 164, 128, 128, 170, 170, 170, 75, 75,
	75, 171, 171, 171, 171, 171, 171, 171, 171, 171,
	171, 171, 171, 171, 172, 172, 172, 172, 174, 174,
	174, 173, 173, 173, 173, 173, 173, 173, 173, 173,
	173, 173, 173, 173, 173, 175, 175, 182, 182, 183,
	183, 184, 185, 176, 176, 177, 177, 178, 179, 186,
	186, 186, 186, 188, 188, 180, 180, 180, 180, 180,
	181, 106, 106, 106, 106, 106, 106, 106, 106, 106,
	106, 106, 106, 106, 106, 107, 107, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 215, 215,
	215, 215, 215, 215, 215, 217, 217, 218, 218, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 216, 216, 216, 216, 216,
	216, 216, 216, 216, 216, 223, 223, 224, 224, 225,
	225, 226, 226, 228, 229, 229, 229, 230, 234, 234,
	227, 227, 231, 231, 231, 232, 232, 233, 233, 233,
	233, 233, 147, 147, 147, 148, 148, 149, 83, 83,
	144, 144, 143, 143, 143, 146, 146, 100, 187, 187,
	187, 187, 187, 187, 187, 101, 101, 108, 102, 102,
	103, 103, 103, 103, 103, 103, 139, 140, 104, 104,
	104, 141, 141, 150, 154, 154, 153, 152, 152, 151,
	151, 131, 131, 131, 131, 130, 129, 89, 89, 245,
	245, 155, 155, 90, 90, 91, 85, 85, 165, 165,
	165, 165, 79, 79, 59, 59, 80, 80, 55, 55,
	58, 56, 56, 56, 56, 73, 73, 74, 74, 53,
	53, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 189, 189, 189, 48, 48, 48, 49, 49,
	50, 50, 194, 194, 194, 195, 195, 195, 195, 193,
	193, 193, 193, 193, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	199, 199, 199, 199, 199, 199, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 201, 201, 201, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 4, 6, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 2, 3, 3, 6, 4, 3, 2, 1, 1,
	0, 2, 0, 2, 0, 4, 6, 7, 1, 1,
	1, 1, 1, 6, 3, 5, 4, 6, 4, 6,
	1, 3, 1, 2, 2, 3, 2, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 5,
	3, 0, 1, 1, 1, 1, 3, 3, 0, 2,
	3, 2, 3, 6, 6, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 2, 3, 6, 3, 1, 5, 2, 1, 1,
	1, 3, 3, 2, 3, 3, 3, 3, 1, 3,
	3, 2, 1, 1, 3, 1, 1, 1, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 0, 1,
	1, 2, 2, 4, 2, 4, 4, 4, 4, 4,
	4, 4, 2, 3, 4, 3, 2, 4, 2, 0,
	2, 0, 8, 8, 7, 10, 5, 8, 1, 0,
	1, 3, 1, 1, 1, 1, 8, 0, 3, 2,
	0, 3, 1, 2, 2, 3, 6, 2, 1, 1,
	2, 4, 2, 5, 7, 8, 5, 3, 1, 4,
	6, 5, 10, 1, 1, 4, 0, 3, 0, 2,
	2, 2, 0, 1, 1, 2, 2, 0, 3, 3,
	2, 1, 1, 2, 2, 1, 2, 1, 4, 6,
	11, 14, 1, 0, 1, 3, 3, 3, 5, 2,
	0, 1, 1, 0, 6, 6, 8, 6, 8, 8,
	10, 8, 10, 1, 0, 2, 0, 2, 2, 3,
	3, 2, 2, 2, 1, 0, 1, 3, 2, 0,
	2, 1, 1, 1, 3, 3, 0, 3, 4, 7,
	3, 0, 6, 6, 8, 5, 7, 1, 3, 1,
	4, 2, 8, 5, 4, 3, 0, 2, 0, 8,
	2, 0, 1, 3, 1, 1, 3, 5, 5, 1,
	1, 3, 3, 1, 2, 3, 2, 3, 4, 1,
	1, 8, 8, 1, 2, 4, 4, 4, 2, 2,
	3, 1, 3, 6, 1, 0, 1, 0, 1, 1,
	0, 1, 1, 0, 1, 0, 3, 1, 3, 2,
	2, 2, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 3, 0, 2, 0, 2, 3, 3, 0, 1,
	3, 3, 1, 1, 3, 2, 4, 0, 3, 2,
	1, 4, 3, 4, 5, 4, 5, 4, 5, 2,
	4, 1, 1, 0, 5, 0, 2, 2, 2, 1,
	1, 0, 4, 2, 1, 2, 2, 4, 1, 3,
	1, 2, 3, 2, 0, 2, 5, 2, 3, 4,
	0, 1, 1, 1, 1, 2, 4, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 5,
	0, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 1, 3, 0, 1, 1, 1,
	1, 5, 2, 1, 1, 1, 1, 4, 1, 2,
	2, 1, 1, 1, 0, 1, 1, 4, 1, 4,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 0, 1, 4, 1, 3, 3,
	3, 5, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 4,
	3, 4, 4, 5, 3, 3, 3, 3, 3, 4,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 1, 3, 3,
	2, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 5, 6, 6, 7, 1, 1, 1, 3,
	1, 1, 1, 2, 2, 2, 1, 1, 3, 5,
	6, 8, 6, 6, 4, 4, 1, 1, 1, 5,
	1, 3, 1, 3, 1, 1, 1, 1, 6, 6,
	4, 4, 4, 4, 6, 5, 5, 5, 4, 8,
	6, 6, 4, 4, 4, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 2, 2, 0, 1, 4, 2, 2, 2,
	2, 2, 4, 3, 5, 4, 3, 5, 1, 3,
	1, 3, 3, 3, 2, 1, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 4, 3, 2, 3, 0,
	3, 3, 2, 2, 1, 0, 2, 2, 3, 2,
	1, 1, 3, 5, 1, 2, 4, 2, 0, 1,
	0, 1, 1, 3, 5, 2, 2, 1, 2, 1,
	0, 1, 1, 1, 3, 3, 1, 3, 3, 2,
	1, 1, 1, 3, 1, 3, 1, 3, 1, 2,
	3, 1, 1, 2, 2, 1, 3, 3, 0, 1,
	2, 1, 1, 1, 1, 6, 2, 3, 5, 1,
	1, 1, 1, 2, 2, 1, 1, 1, 1, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -12, -13, -14,
	-16, -18, -19, -20, -21, -23, -24, -26, -25, -27,
	-28, -29, -30, -22, -31, -32, 23, 64, -7, -8,
	-9, -10, -11, -221, 92, 100, 193, 99, 85, 115,
	207, 214, -33, -35, 222, -124, 223, 34, 232, 58,
	95, 209, 204, 253, 66, -220, -36, -34, 300, 275,
	281, 217, -37, 240, 267, 303, 240, 128, 78, -55,
	-48, 4, -199, -201, 20, 21, 23, 33, 34, 39,
	43, 46, 57, 58, 59, 61, 63, 64, 65, 68,
	69, 76, 77, 78, 79, 81, 85, 87, 91, 92,
	94, 99, 100, 105, 106, 109, 111, 116, 121, 122,
	129, 132, 127, 141, 143, 144, 149, 152, 155, 157,
	158, 159, 160, 161, 163, 164, 166, 168, 165, 171,
	173, 174, 180, 183, 186, 187, 188, 191, 193, 195,
	196, 197, 199, 200, 204, 202, 203, 205, 207, 209,
	210, 212, 214, 215, 216, 219, 220, 222, 223, 225,
	228, 231, 232, 233, 236, 234, 230, 239, 241, 242,
	249, 253, 254, 255, 256, 259, 260, 261, 264, 265,
	266, 271, 276, 277, 278, 279, 28, 35, 36, 37,
	38, 40, 41, 44, 45, 49, 50, 51, 53, 80,
	82, 83, 98, 101, 107, 117, 119, 123, 124, 133,
	134, 135, 136, 138, 147, 170, 172, 181, 185, 190,
	192, 198, 211, 218, 226, 227, 235, 237, 244, 245,
	246, 250, 251, 267, 268, 87, 132, 261, 260, 78,
	128, 240, -15, 300, -25, -6, -13, -4, -21, -32,
	-12, -14, 23, -48, -48, -48, 193, 22, -239, 22,
	-240, -241, 66, 92, 115, 217, 132, 87, 260, -239,
	-52, 214, -48, -120, 152, 220, 211, 249, -121, -119,
	-192, 244, 161, -81, -48, 4, 78, 57, 79, 116,
	128, 129, 62, 63, 144, 241, 244, 249, 22, 66,
	-244, 249, 249, -244, -244, -51, 249, 247, -52, -243,
	240, 240, 270, -109, 78, 258, -34, -36, -35, -69,
	-70, 257, 137, 97, 179, -33, -35, -220, -222, 199,
	-219, -48, -222, -66, -67, 22, 89, 304, -163, -55,
	177, -91, 300, -3, -163, 123, -55, -58, 123, -55,
	-48, 113, 300, -89, -131, -130, -129, 298, 302, 113,
	139, 139, -164, -163, -48, 123, -59, 123, -58, -82,
	123, -81, -169, -168, -195, 4, -199, -201, -200, 267,
	55, 67, 114, 131, 125, 140, 142, 148, 150, 162,
	182, 184, 208, 224, 240, -145, 300, -105, 300, -48,
	22, 176, 304, 176, -48, -120, 51, -120, 300, -122,
	-46, -47, 141, 195, 247, 285, 113, 279, -62, 5,
	84, -84, 302, 113, -236, 176, 113, 113, 113, 113,
	113, 113, 279, 141, 195, 240, -123, -46, -47, -123,
	247, -52, -94, -163, -81, 123, -81, 128, -48, 123,
	-69, -70, -93, -112, -113, 151, 175, -96, 22, 89,
	-96, -96, 43, 301, 301, 304, -222, -74, 300, -85,
	-165, -135, 293, -137, 291, 292, 297, 167, 280, -147,
	-55, -138, 9, 300, -150, -217, -35, 98, 29, -148,
	-149, 211, -48, 7, 8, 5, 6, -53, -172, -181,
	252, 102, 169, 47, -215, -216, 4, -199, -194, -173,
	-183, -177, -180, 138, 55, 71, 74, 72, 75, 221,
	262, 48, 28, 101, 185, 190, 237, 250, 251, 123,
	170, 124, 53, 117, 147, 91, 36, 38, 40, 41,
	49, 50, 80, 82, 83, 107, 133, 134, 135, 136,
	172, 198, 226, 235, 245, 246, 268, -200, -184, -185,
	-178, -179, -186, -85, -91, 293, -55, 300, -90, -155,
	-135, 84, -42, 202, -41, 21, 23, 92, 265, 98,
	230, 230, 202, 98, 305, 202, 233, 301, -79, -55,
	-131, -135, -193, 293, 4, -199, -201, -200, -202, 22,
	24, 25, 26, 27, 29, 30, 31, 32, 42, 47,
	48, 52, 54, 56, 62, 66, 70, 71, 72, 73,
	74, 75, 84, 86, 88, 89, 90, 93, 95, 97,
	102, 103, 104, 110, 112, 113, 115, 118, 120, 126,
	128, 130, 137, 139, 145, 146, 151, 153, 154, 167,
	169, 175, 176, 177, 178, 179, 189, 194, 201, 206,
	217, 221, 229, 238, 240, 243, 247, 248, 252, 257,
	258, 262, 263, 269, 270, 272, 273, 274, 275, -164,
	-57, -55, -57, 222, -48, 30, 98, -44, 304, 46,
	205, 98, -44, 304, 98, 301, 304, -163, 123, 30,
	-144, -170, -171, -173, -182, -176, -180, -181, 39, 45,
	44, 242, 218, 227, 37, 133, 134, 135, 136, 226,
	36, 198, 107, 91, 83, 82, 172, 41, 40, -184,
	-185, -178, -179, 80, 245, 246, 138, 38, 50, 49,
	268, 235, -83, -135, -235, -80, 240, 78, -56, -48,
	293, -241, -235, 30, -83, 304, 304, 149, -61, 155,
	166, 121, -191, 84, -197, -190, -156, 9, 252, 102,
	176, -196, 8, 292, -189, -195, 5, 7, 291, -191,
	84, 69, -198, 5, 4, -181, -156, 84, 152, 302,
	-193, -192, -238, 110, -235, -192, -192, -192, -192, -192,
	-48, 149, -192, 304, 304, -52, -44, 304, 300, 30,
	167, -68, 300, -49, 123, -48, -45, 94, 167, -93,
	-113, -112, -114, -135, 22, -135, -137, -34, -34, -34,
	-71, -159, -135, -219, 30, -73, -48, -76, 304, 113,
	10, 11, 54, 33, 291, 292, 293, 294, 108, 295,
	288, 289, 290, 287, 283, 284, 285, 60, 156, 213,
	13, 14, 15, 26, 178, 150, 280, 125, 224, 297,
	16, 17, 18, 140, 35, 126, 30, 4, -135, -135,
	-135, -135, -135, 184, -35, -135, -83, -89, -35, -143,
	298, 300, -89, 300, 5, 5, 300, -151, -135, -223,
	276, 110, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 192, -188,
	271, -188, -188, -174, 300, -174, -175, 300, -174, 277,
	281, 300, -76, -55, 304, 301, 304, 247, -110, 62,
	56, -126, 123, 56, -203, -48, 62, -204, 52, 258,
	194, 112, -110, 62, -110, 62, 62, -163, 33, 33,
	247, -58, -48, 247, 113, 301, 304, 299, 308, -128,
	273, -116, -25, 300, 84, 30, -116, -86, -87, -166,
	-88, -55, 300, -48, -48, -58, -59, -81, -82, -15,
	-168, 98, -17, -25, -21, -32, -12, 301, 304, -75,
	29, -106, 300, 278, 159, 81, 122, 158, -107, 216,
	301, 304, 247, 304, -80, -73, -130, -129, 113, 249,
	301, -47, -46, -60, 197, 228, 203, 219, 304, 8,
	7, 7, 5, -193, -237, -48, -47, -46, -163, -63,
	-64, -127, -126, -205, -206, -203, 128, 258, 103, -25,
	98, 30, -73, 176, 167, 285, 98, -115, 211, 212,
	304, -40, 31, 88, 300, 304, 301, -128, -165, -78,
	-161, -163, -35, -162, 300, -170, -170, -81, 244, -135,
	-135, -135, -135, -135, -135, -135, -135, -135, -135, -135,
	-135, -135, -135, -135, -135, -135, -135, -135, -135, -135,
	-135, 150, 125, 224, 35, 126, -135, 247, -135, -135,
	-135, -135, 169, 167, 252, 102, 259, 89, 173, -245,
	238, 32, -141, -35, 300, -193, -147, 211, 300, 301,
	304, -83, -146, 299, -143, -83, 301, 301, -83, 269,
	22, 89, 293, -106, 7, -154, -153, 272, -224, 105,
	118, 300, 301, 301, -135, -135, -100, -187, 4, 278,
	159, 81, 122, 158, 216, -101, -135, -102, -136, -137,
	291, 292, 297, 300, 211, -103, -135, -83, -135, 42,
	146, 248, -104, -135, 113, -83, -135, -135, -135, -83,
	-83, -83, 300, 7, 7, 244, 244, 7, -128, 301,
	-155, -41, -55, -48, -48, 167, -126, 123, -170, -48,
	300, 300, 143, 143, -48, -48, 123, -48, 123, -48,
	-48, -42, 202, 300, 300, -48, 202, -48, 233, 113,
	-55, -135, -95, 206, -135, -95, -118, 176, -79, 267,
	-48, 206, -77, 304, 113, 285, -79, -44, -44, -163,
	-170, 298, 298, 7, 247, 247, 247, 247, 300, -135,
	-237, -56, -237, -46, 256, 59, 197, -197, -106, 304,
	301, 304, -49, 128, -49, -81, -25, 301, -55, 98,
	5, -48, -159, -17, -48, -92, 118, -167, 304, 282,
	67, -99, 142, 162, 114, 148, 208, 131, -132, 305,
	-158, -157, 30, -48, -35, -162, -161, 279, -135, -135,
	247, -245, 238, -141, -135, 169, 252, 102, 259, 89,
	173, 113, 300, -136, -136, -83, 300, -83, -135, 299,
	299, 304, 301, -70, 304, -69, -135, -83, -83, 301,
	301, -152, -153, 93, -135, -229, 183, 300, 300, -135,
	30, 304, 301, 113, 301, -108, 189, 301, 10, 11,
	291, 292, 293, 294, 108, 295, 288, 289, 290, 287,
	283, 284, 285, 60, 156, 213, 13, 14, 15, 140,
	126, -136, -136, -136, -83, 300, 301, -139, -140, 113,
	110, 30, -104, -104, -104, 301, 113, -83, 304, 304,
	304, 301, 301, 301, 7, 301, 304, 301, 279, 279,
	301, -92, 247, 247, 98, 167, -207, -204, -135, -73,
	300, 300, -39, 92, 222, -111, 98, -44, 98, -44,
	247, -110, 62, -83, -83, 247, 233, 299, -85, 206,
	61, 301, -85, -128, -87, -78, -155, 301, 299, 7,
	7, 301, 159, 122, 158, -107, 158, -107, -107, 7,
	-48, -65, 127, -127, 300, -49, 300, 300, 30, 300,
	-48, -45, 301, -142, 120, 43, -161, 173, 142, 142,
	-161, -99, 142, -97, 182, -97, -97, -158, -193, 306,
	-48, 300, 301, -135, -135, -136, -136, 113, 300, -135,
	-144, 26, 26, 301, -83, 301, 304, 301, -143, 301,
	269, -70, -70, -70, 5, 95, -135, 243, -230, -48,
	300, 273, -69, 301, -170, -170, -135, -139, -135, -170,
	-170, -136, -136, -136, -136, -136, -136, -136, -136, -136,
	-136, -136, -136, -136, -136, -136, -136, -136, -136, -136,
	89, 167, 173, -136, 304, -83, 301, -140, -139, -135,
	-135, -170, 301, 301, 301, -83, -135, -135, -135, 301,
	7, -142, -48, -48, -126, 98, -208, 62, -209, 54,
	103, 66, 167, 169, 258, 194, 52, 84, 201, 301,
	301, -73, -73, 167, 84, 167, 84, 77, 254, -48,
	-48, -55, -48, -48, 301, 301, -48, -85, -117, 300,
	176, -25, -95, 285, 299, 299, 301, 126, -72, -160,
	-48, -218, 300, -215, -216, -53, 300, -73, -63, -25,
	-72, 176, -225, 274, -135, -83, 239, -161, -161, -98,
	263, 176, 142, -161, -134, -133, 111, 165, 300, -73,
	-157, 26, 26, -135, -144, 301, -135, -135, 301, -135,
	5, -135, 301, 301, 301, -135, -234, -48, -135, 301,
	301, 301, -140, 113, 89, 173, 300, -135, 301, 301,
	304, 301, 301, 301, -225, -126, -48, -81, -48, 103,
	123, 169, 143, 300, -136, -55, -125, -242, 65, 236,
	301, 301, 169, 169, -135, -170, -44, -44, 247, 247,
	90, -73, 62, -91, -35, 300, 186, 301, 304, -54,
	-89, 54, -54, -135, 300, -72, 301, 301, 301, -55,
	-226, -228, -48, 244, -98, 300, -135, -161, 304, 307,
	285, -73, 301, -135, -135, 301, 301, -70, -227, 188,
	301, -136, 113, 300, -144, 301, -135, -209, -49, 167,
	-135, -50, 300, -65, 300, 201, -43, 54, -48, -48,
	260, 168, 301, -48, -48, -125, -160, -40, -81, -40,
	301, -83, 301, -65, -125, 300, 304, 30, 5, -73,
	-133, -193, 301, 301, -70, 43, -136, -144, 301, 301,
	98, 301, -212, 157, -48, -73, -55, -38, 263, -81,
	222, -128, 300, -65, -54, -70, -125, -65, -72, -228,
	-230, 301, -231, 196, 212, -83, 301, 103, -210, -213,
	-211, 176, 114, 187, 225, 301, 301, -68, -135, -86,
	-73, -40, 301, -65, 301, 301, -232, -233, 35, 255,
	69, -135, -232, -48, -211, 176, -213, 176, 260, 87,
	-212, -128, 301, -125, -233, 191, 109, 211, 191, 109,
	-214, 164, 205, 46, 222, -214, -210, -44, -65, 26,
	20, 169, 84, -233,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 0, 0, 58, 59,
	60, 61, 62, 0, 0, 365, 0, 0, 0, 0,
	0, 0, 339, -2, 0, 125, 0, 295, 0, 295,
	295, 299, 0, 367, 263, 364, -2, 375, 0, 0,
	0, 373, 353, 0, 0, -2, 0, 0, 0, 0,
	768, 795, 796, 797, 814, 815, 816, 817, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 884, 885, 886, 887, 888, 889,
	890, 891, 892, 893, 894, 895, 896, 897, 898, 899,
	900, 901, 902, 903, 904, 905, 906, 907, 908, 909,
	910, 911, 912, 913, 914, 915, 916, 917, 918, 919,
	920, 921, 922, 923, 924, 925, 926, 927, 928, 929,
	930, 931, 932, 933, 934, 935, 936, 937, 938, 939,
	940, 941, 942, 943, 944, 945, 946, 947, 948, 949,
	950, 951, 952, 953, 954, 955, 956, 957, 958, 959,
	960, 961, 962, 963, 964, 965, 966, 967, 968, 969,
	970, 971, 972, 973, 974, 0, 0, 0, 0, 0,
	0, 0, 76, 0, 78, 79, 80, 81, 82, 83,
	84, 85, 0, 91, 98, 99, 878, 101, 0, 108,
	109, 110, 112, 113, 114, 115, 116, 117, 118, 0,
	288, 892, 301, 121, 857, 896, 962, 910, 128, 138,
	0, 968, -2, 142, 72, 171, 172, 0, 174, 189,
	0, 0, 0, 0, 0, 182, 0, 0, 186, 0,
	306, 294, 306, 291, 292, 293, 296, 0, 287, 0,
	366, 0, 0, 0, 0, 262, -2, 349, 350, -2,
	0, 370, 370, 370, 0, 0, 350, 0, 358, 882,
	361, 778, 359, 0, 0, 372, 371, 0, 354, 434,
	0, 395, 0, 2, 0, 947, 434, 0, 947, 0,
	0, 0, 0, 769, 747, 741, 742, 0, 0, 0,
	0, 0, 0, 440, 64, 947, 50, 947, 764, 50,
	947, 70, 0, 86, 88, 805, 806, 807, 808, 973,
	975, 976, 977, 978, 979, 980, 981, 982, 983, 984,
	985, 986, 987, 988, 0, 0, 0, 96, 0, 100,
	102, 0, 0, 0, 300, 122, 937, 124, 0, 127,
	129, 130, 0, 0, 0, 0, 0, 0, 141, 166,
	167, 73, 0, 0, 191, 0, 0, 0, 0, 0,
	0, 0, 183, 0, 185, 0, 289, 302, 303, 290,
	0, 298, 50, 438, 0, 947, 238, 799, 311, 947,
	-2, 0, 345, 382, 383, 0, 0, 0, 368, 369,
	0, 0, 0, 341, 342, 0, 360, 0, 0, 398,
	756, 760, 761, 527, 0, 0, 0, 0, 0, 0,
	616, 617, 618, 0, 620, 621, 622, 942, 0, 626,
	627, 962, 768, 781, 782, 783, 784, 0, 0, 0,
	789, 790, 791, 740, 666, 636, -2, -2, 779, 464,
	465, 466, 467, -2, 975, 640, 642, 644, 645, 646,
	647, 0, 926, 943, 958, 959, 967, 971, 972, 947,
	955, 948, 938, 945, 954, 838, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 804, 489, 490,
	495, 496, 498, 398, 396, 435, 436, 0, 0, 753,
	751, 752, 27, 284, 29, 0, 284, 284, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 0, 0, 762,
	748, 0, 745, 746, 809, 810, 811, 812, 813, 989,
	990, 991, 992, 993, 994, 995, 996, 997, 998, 999,
	1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009,
	1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019,
	1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029,
	1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
	1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,
	1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059,
	1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 444,
	0, 317, 0, 0, 441, 0, 0, 66, 0, 48,
	49, 0, 68, 0, 0, 365, 0, 0, 947, 365,
	0, 700, 450, 451, 452, 453, 454, 524, 457, 458,
	459, 460, 461, 462, 463, 471, 472, 473, 474, 475,
	476, 477, 486, 0, 470, 470, 470, 483, 484, 487,
	488, 493, 494, 505, 506, 508, 510, 504, 504, 504,
	501, 502, 0, 698, 0, 105, 0, 833, 766, 771,
	772, 111, 0, 0, 0, 0, 0, 0, 133, 153,
	154, 155, 134, 136, 143, 145, 146, 147, 156, 157,
	158, 159, 255, 0, 257, 169, 170, 792, 0, 135,
	137, 139, 140, 160, 161, 0, 163, 164, 165, 0,
	74, 173, 175, 0, 188, 176, 177, 178, 179, 180,
	181, 184, 187, 0, 0, 297, 258, 0, 199, 0,
	0, 0, 0, 0, 947, 798, 308, 0, 0, 348,
	380, 381, 384, 387, 388, 385, 527, 355, 356, 357,
	376, 377, 273, 362, 0, 0, 775, 444, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 750, 0, 0, 759, 532, 533,
	534, 556, 557, 0, -2, 698, 0, 623, 624, 625,
	0, 0, -2, 0, 786, 524, 0, 0, 739, 668,
	0, 0, 0, 0, 0, 0, 0, 0, 719, 725,
	0, 0, 0, 0, 0, 0, 0, 0, 479, 492,
	503, 500, 499, 481, 0, 480, 478, 0, 482, 0,
	0, 0, 444, 0, 0, 755, 0, 0, 0, 0,
	283, 31, 947, 0, 41, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 770, 0, 0, 0, 0, 743, 0, 328,
	0, 328, 319, 0, 0, 0, 315, 331, 332, 334,
	335, 0, 0, 442, 65, 765, 50, 71, 50, 77,
	87, 0, 89, 92, 93, 94, 95, 90, 0, 445,
	447, 455, 0, 511, 512, 513, 514, 515, 516, 525,
	97, 0, 0, 0, 106, 107, 773, 774, 0, 0,
	126, 131, 132, 307, 0, 150, 0, 152, 0, 256,
	794, 793, 524, 75, 190, 119, 304, 305, 439, 0,
	198, 200, 202, 203, 204, 205, 799, 0, 799, 196,
	0, 0, 0, 0, 0, 0, 0, 386, 389, 390,
	0, 379, 271, 272, 365, 0, 777, 392, 757, 425,
	399, 407, 423, 410, 0, 528, 529, 530, 0, 535,
	536, 537, 538, 539, 540, 541, 542, 543, 544, -2,
	-2, -2, 548, 549, 550, -2, -2, -2, 554, 555,
	-2, 0, 0, 0, 750, 0, -2, 0, 564, -2,
	-2, -2, 568, 0, 571, 573, 575, 0, 0, 0,
	0, 749, 585, 731, 0, 758, 570, 0, 0, 619,
	0, 0, 0, 704, 705, 0, -2, 628, 375, 0,
	0, 0, 0, 787, 0, 738, 734, 0, 676, 0,
	0, 0, 641, 643, 0, 0, 0, 0, 708, 709,
	710, 711, 712, 713, 714, 0, 0, 0, 0, 587,
	0, 0, 0, 0, 962, 0, 698, 724, 0, 0,
	0, 0, 0, 698, 0, 730, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 392, 437,
	754, 30, 275, 0, 0, 0, 33, 947, 210, 0,
	0, 0, 0, 0, 286, 42, 947, 50, 947, 50,
	43, 28, 284, 0, 0, 277, 0, 274, 56, 0,
	763, 0, 63, 0, 443, 312, 313, 0, 0, 321,
	318, 0, 444, 0, 0, 0, 0, 67, 69, 0,
	701, 0, 0, 0, 0, 0, 0, 0, 0, 699,
	103, 767, 104, 123, 148, 149, 151, 144, 162, 0,
	207, 0, 0, 799, 0, 0, 259, 237, 0, 0,
	310, 311, 378, 0, 776, 394, 0, 397, 0, 0,
	0, 0, 0, 0, 431, 431, 431, 429, 423, 0,
	409, 422, 0, 421, -2, 410, 0, 0, -2, -2,
	0, 0, 0, 586, -2, 569, 572, 574, 576, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 699, 702,
	703, 0, -2, 0, 0, 374, 375, 375, 375, 634,
	0, 0, 735, 0, 0, 635, 0, 0, 0, 0,
	0, 0, 650, 0, 651, 0, 0, 652, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 590, 591, 592, 0, 0, 653, 722, 723, 0,
	0, 0, 0, 0, 0, 658, 0, 729, 0, 0,
	0, 662, 663, 664, 0, 468, 0, 485, 507, 509,
	497, 394, 0, 0, 0, 0, 208, 227, 0, 0,
	0, 0, 35, 0, 0, 0, 0, 39, 0, 45,
	0, 0, 0, 0, 0, 0, 57, 744, 327, 0,
	326, 0, 316, 328, 333, 330, 336, 0, 448, 0,
	0, 456, 517, 518, 519, 520, 521, 522, 523, 0,
	120, 194, 0, 201, 0, 0, 0, 199, 0, 0,
	0, 309, 363, 670, 0, 0, 400, 0, 0, 0,
	0, 0, 0, 426, 430, 427, 428, 408, 405, 0,
	419, 0, 412, 531, -2, 0, 0, 0, 0, -2,
	0, 0, 0, 732, 0, 693, 0, -2, 706, 629,
	0, 0, 0, 0, 788, 733, 737, 0, 674, 675,
	679, 0, 0, 639, 0, 0, 707, 716, 717, 588,
	589, 593, 594, 595, 596, 597, 598, 599, 600, 601,
	602, -2, -2, -2, 606, 607, 608, -2, -2, -2,
	0, 0, 0, 718, 0, 0, 696, 720, 721, 726,
	727, 0, 655, 656, 657, 728, 0, 0, 0, 491,
	0, 670, 279, 281, 32, 0, 209, 0, 212, 0,
	0, 0, 0, 218, 219, 0, 0, 0, 0, 229,
	236, 0, 0, 0, 47, 0, 0, 285, 0, 50,
	50, 276, 0, 0, 192, 193, 278, 314, 0, 0,
	0, 320, 329, 0, 449, 446, 526, 0, 0, 264,
	270, 270, 0, 637, 638, 0, 0, 0, 0, 197,
	0, 0, 351, 0, 393, 391, 0, 413, 0, 415,
	0, 0, 0, 417, 0, 403, 0, 402, 0, 0,
	411, 0, 0, -2, 0, 579, -2, -2, 692, 699,
	785, 375, 630, 632, 633, 736, 681, 678, 0, 665,
	648, 649, 715, 0, 0, 0, 0, 699, 695, 654,
	0, 660, 661, 469, 352, 34, 0, 213, 214, 799,
	0, 217, 220, 0, 222, 801, 207, 0, 233, 234,
	231, 0, 36, 37, 46, 52, 38, 44, 0, 0,
	0, 0, 0, 337, 338, 0, 0, 236, 0, 273,
	780, 0, 273, 0, 0, 0, 226, 207, 236, 0,
	669, 671, 0, 0, 414, 0, 433, 416, 0, 406,
	0, 0, 420, -2, -2, 580, 694, 0, 375, 0,
	667, -2, 0, 0, 0, 697, 0, 211, 215, 0,
	0, 242, 0, 230, 0, 0, 54, 0, 280, 282,
	0, 323, 444, 325, 0, 207, 265, 266, 269, 267,
	270, 375, 236, 195, 207, 0, 0, 0, 424, 0,
	404, 401, 418, 631, 684, 0, -2, 0, 614, 659,
	0, 221, 247, 0, 0, 0, 238, 40, 0, 51,
	0, 324, 0, 224, 273, 0, 207, 260, 0, 672,
	673, 432, 0, 0, 0, 680, 615, 0, 223, 243,
	244, 0, 239, 240, 241, 800, 235, 242, 53, 444,
	0, 268, 629, 225, 236, 677, 682, 685, -2, 913,
	830, 0, 683, 216, 245, 0, 246, 0, 0, 0,
	247, 322, 50, 207, 0, 687, 688, 689, 690, 691,
	248, 0, 251, 252, 0, 249, 232, 206, 261, 0,
	250, 253, 254, 686,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 289, 3, 295, 290, 3,
	300, 301, 293, 291, 304, 292, 302, 294, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 308, 303,
	283, 285, 284, 3, 305, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 298, 3, 299, 288, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 306, 287, 307, 297,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 286, 57626, 296, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:715
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:721
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:727
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 18:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:751
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 26:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:762
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:768
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:772
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:778
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:782
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:789
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:794
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:799
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:804
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:809
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:814
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:818
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:821
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: Name(sqlDollar[5].str)}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:826
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:836
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:839
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:843
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:845
		{
			unimplemented()
		}
	case 44:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:848
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:857
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:867
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:871
		{
			sqlVAL.union.val = nil
		}
	case 48:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:877
		{
			sqlVAL.union.val = DropCascade
		}
	case 49:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:881
		{
			sqlVAL.union.val = DropRestrict
		}
	case 50:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:885
		{
			sqlVAL.union.val = DropDefault
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:890
		{
			unimplementedWithIssue(2473)
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:891
		{
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:894
		{
			unimplemented()
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:895
		{
		}
	case 55:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:899
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:903
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:907
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:922
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:929
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:933
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:937
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:945
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:953
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:957
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:963
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:967
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 72:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:973
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:977
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 74:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:983
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:987
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 76:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:994
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:998
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1004
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1013
		{ /* SKIP DOC */
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1017
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1021
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 89:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1031
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1041
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 91:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1045
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 92:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1051
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1061
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1072
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 98:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1076
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 99:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1083
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1089
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1095
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1099
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1106
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1113
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1120
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1124
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1128
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1135
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1138
		{
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1142
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1146
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 112:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1153
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1157
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1161
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1165
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1169
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1173
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1177
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1189
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1197
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1201
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1205
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1209
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1212
		{ /* SKIP DOC */
		}
	case 126:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1218
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1224
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1231
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1235
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1239
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1243
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1250
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1256
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1260
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1264
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1268
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1275
		{
			unimplemented()
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1281
		{
			unimplemented()
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1288
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 144:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1292
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1310
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 151:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1318
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1322
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1328
		{
			sqlVAL.union.val = Low
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1332
		{
			sqlVAL.union.val = Normal
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.union.val = High
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1342
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1346
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1350
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1365
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1369
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1373
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1383
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1387
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1392
		{
			unimplemented()
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1393
		{
			unimplemented()
		}
	case 168:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1394
		{
		}
	case 169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1408
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1412
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1416
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1420
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1424
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1432
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1436
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1440
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1444
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1448
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1452
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1464
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1468
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 187:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1478
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1483
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1489
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 191:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1493
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 192:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1499
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 193:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1503
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1510
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1514
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1520
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[5].union.slct()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1524
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[8].union.slct()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1531
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1537
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1541
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1547
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1553
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 206:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1559
		{
			/* SKIP DOC */
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1567
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1579
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 210:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1583
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1589
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1593
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1596
		{
			unimplemented()
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1598
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1602
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1606
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1624
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1628
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1632
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1636
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1640
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1644
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1648
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1657
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1666
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1679
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1691
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1696
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 229:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1702
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 230:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1708
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1718
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1728
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1751
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 236:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1755
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1761
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 238:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1765
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1770
		{
			unimplemented()
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1771
		{
			unimplemented()
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1772
		{
			unimplemented()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1773
		{
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1780
		{
			unimplemented()
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1781
		{
			unimplemented()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1782
		{
			unimplemented()
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1783
		{
			unimplemented()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1784
		{
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1787
		{
			unimplemented()
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1790
		{
			unimplemented()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1793
		{
			unimplemented()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1794
		{
			unimplemented()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1795
		{
			unimplemented()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1796
		{
			unimplemented()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1797
		{
			unimplemented()
		}
	case 255:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1801
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1809
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 258:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1816
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 259:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1823
		{
			sqlVAL.union.val = &CreateView{
				Name:     sqlDollar[3].union.normalizableTableName(),
				ToCols:   sqlDollar[4].union.nameList(),
				AsSource: sqlDollar[6].union.slct(),
			}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1836
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1847
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1861
		{
			sqlVAL.union.val = true
		}
	case 263:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1865
		{
			sqlVAL.union.val = false
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1871
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1875
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1884
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1887
		{
			unimplemented()
		}
	case 268:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1888
		{
			unimplemented()
		}
	case 269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1891
		{
			unimplemented()
		}
	case 270:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1892
		{
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1896
		{
			sqlVAL.union.val = Ascending
		}
	case 272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1900
		{
			sqlVAL.union.val = Descending
		}
	case 273:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1904
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 274:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1911
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 275:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1915
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false}
		}
	case 276:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1919
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1923
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 282:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1949
		{
			sqlVAL.union.val = true
		}
	case 284:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1953
		{
			sqlVAL.union.val = false
		}
	case 285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1958
		{
		}
	case 286:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1959
		{
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1963
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1969
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1976
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1980
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1984
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1988
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1992
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2001
		{
		}
	case 295:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2002
		{
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2006
		{
			sqlVAL.str = ""
		}
	case 297:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2010
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2014
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 299:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2018
		{
			sqlVAL.str = ""
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2024
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2028
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2038
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2042
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2046
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2050
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2056
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2066
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2075
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2085
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 313:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 314:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2096
		{
			unimplementedWithIssue(6637)
		}
	case 315:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2098
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2103
		{
			unimplementedWithIssue(6637)
		}
	case 317:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2111
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2115
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2121
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2125
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2129
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2135
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2139
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2145
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2149
		{
			unimplemented()
		}
	case 326:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2157
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 328:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2161
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 329:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2168
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2174
		{
			unimplementedWithIssue(7841)
		}
	case 331:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2175
		{
		}
	case 332:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2179
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2183
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2193
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 337:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2205
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2209
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2253
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2259
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2263
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2278
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2282
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2286
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2290
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2294
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2298
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2332
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2344
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2356
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2364
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2373
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2382
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2400
		{
			unimplemented()
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2401
		{
			unimplemented()
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2402
		{
			unimplemented()
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2405
		{
			unimplemented()
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2406
		{
			unimplemented()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2409
		{
			unimplemented()
		}
	case 364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2412
		{
			unimplemented()
		}
	case 365:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2413
		{
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2416
		{
		}
	case 367:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2417
		{
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2421
		{
			sqlVAL.union.val = true
		}
	case 369:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2425
		{
			sqlVAL.union.val = false
		}
	case 370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2429
		{
			sqlVAL.union.val = false
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2435
		{
			sqlVAL.union.val = true
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2440
		{
		}
	case 373:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2441
		{
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2445
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 375:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2449
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2455
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 377:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2479
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2488
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2499
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2512
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2519
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2526
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2540
		{
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2541
		{
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2567
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 392:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2571
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2577
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 394:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2581
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2591
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2603
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2607
		{
			sqlVAL.union.val = &From{}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2613
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2617
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 401:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2623
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2628
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2634
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2639
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2659
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 406:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2663
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 407:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2667
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2674
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2678
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 410:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2682
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 411:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2686
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2706
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2710
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2714
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2718
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2722
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2732
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2736
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2740
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2744
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2751
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2757
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2761
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2767
		{
			sqlVAL.str = astFullJoin
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2771
		{
			sqlVAL.str = astLeftJoin
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2775
		{
			sqlVAL.str = astRightJoin
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2779
		{
			sqlVAL.str = astInnerJoin
		}
	case 430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2785
		{
		}
	case 431:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2786
		{
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2797
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2801
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2807
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2811
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2815
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2819
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2825
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2829
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2842
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2846
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2850
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2856
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2860
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2872
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 446:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2876
		{
			unimplementedWithIssue(2115)
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2877
		{
			unimplementedWithIssue(2115)
		}
	case 448:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2880
		{
			unimplementedWithIssue(2115)
		}
	case 449:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2881
		{
			unimplementedWithIssue(2115)
		}
	case 450:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2882
		{
		}
	case 456:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2890
		{
			unimplemented()
		}
	case 457:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2892
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2896
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2900
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2904
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 468:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2937
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2946
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 470:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2960
		{
			sqlVAL.union.val = nil
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2967
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2971
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2975
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2979
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2983
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2991
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2995
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 479:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3004
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3008
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3017
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3026
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3035
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3039
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 485:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3045
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 486:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3049
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 491:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3067
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3083
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3099
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 498:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3115
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3121
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3125
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3129
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 502:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3133
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3138
		{
		}
	case 504:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3139
		{
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3144
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3148
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 507:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3152
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3156
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3160
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3165
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3170
		{
			unimplemented()
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3171
		{
			unimplemented()
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3172
		{
			unimplemented()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3173
		{
			unimplemented()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3174
		{
			unimplemented()
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3175
		{
			unimplemented()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3176
		{
			unimplemented()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3177
		{
			unimplemented()
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3178
		{
			unimplemented()
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3179
		{
			unimplemented()
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3180
		{
			unimplemented()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3181
		{
			unimplemented()
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3182
		{
			unimplemented()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3183
		{
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3186
		{
			unimplemented()
		}
	case 526:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3187
		{
			unimplemented()
		}
	case 528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3211
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3215
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3218
		{
			unimplemented()
		}
	case 531:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3219
		{
			unimplemented()
		}
	case 532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3228
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3232
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3236
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3240
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3256
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3260
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3276
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3379
		{
			unimplemented()
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3381
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3385
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3389
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3393
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3458
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3462
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3466
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3470
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3583
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3587
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3593
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3597
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3601
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3607
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 626:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3611
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 627:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3615
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName()}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3630
		{
			unimplemented()
		}
	case 631:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3631
		{
			unimplemented()
		}
	case 632:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3633
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3637
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3641
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: Exprs{StarExpr()}}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3654
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3658
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 637:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3667
		{
			unimplemented()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3668
		{
			unimplemented()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3672
		{
			unimplemented()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3678
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3682
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3686
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3689
		{
			unimplemented()
		}
	case 645:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3690
		{
			unimplemented()
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3691
		{
			unimplemented()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3692
		{
			unimplemented()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3694
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3702
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3706
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3710
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3714
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3717
		{
			unimplemented()
		}
	case 655:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3719
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3723
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3727
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3731
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3739
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3743
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3747
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3761
		{
			unimplemented()
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3762
		{
		}
	case 667:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3765
		{
			unimplemented()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3766
		{
		}
	case 669:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3770
		{
			unimplemented()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3771
		{
		}
	case 671:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3774
		{
			unimplemented()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3775
		{
			unimplemented()
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3778
		{
			unimplemented()
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3781
		{
			unimplemented()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3782
		{
			unimplemented()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3783
		{
		}
	case 677:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3787
		{
			unimplemented()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3798
		{
			unimplemented()
		}
	case 679:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3799
		{
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3802
		{
			unimplemented()
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3803
		{
		}
	case 682:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3811
		{
			unimplemented()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3812
		{
			unimplemented()
		}
	case 684:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3813
		{
		}
	case 685:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3816
		{
			unimplemented()
		}
	case 686:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3817
		{
			unimplemented()
		}
	case 687:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3823
		{
			unimplemented()
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3824
		{
			unimplemented()
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3825
		{
			unimplemented()
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3826
		{
			unimplemented()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3827
		{
			unimplemented()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3838
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3842
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3846
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3852
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3856
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3905
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3909
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3915
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3919
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3925
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3929
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3933
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3939
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3943
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 707:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3949
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3971
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3975
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3981
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3988
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3992
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4009
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4013
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4017
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4021
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4025
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 725:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4035
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 728:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4047
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 730:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4055
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 731:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4061
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4065
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4076
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4083
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4087
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 736:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4093
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 738:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 740:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4110
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 741:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4116
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4120
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 743:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4124
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4128
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4134
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4140
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4146
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4155
		{
		}
	case 750:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4156
		{
		}
	case 752:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4165
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4171
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4175
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 755:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4184
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4190
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4194
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4209
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4213
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4217
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4225
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4229
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4235
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4239
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4249
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4260
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4264
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4270
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4281
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4285
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4289
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4293
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4299
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4303
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 777:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 778:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4312
		{
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4322
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4326
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4333
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 782:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4337
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4341
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4345
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4348
		{
			unimplemented()
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4350
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4354
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4358
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4362
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 790:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4366
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4370
		{
			sqlVAL.union.val = DNull
		}
	case 793:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4377
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4381
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4403
		{
			sqlVAL.str = ""
		}
	case 800:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4409
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4413
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
