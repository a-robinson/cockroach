// Code generated by go yacc.
// GENERATED FILE DO NOT EDIT
//line sql.y:20
package parser

import __yyfmt__ "fmt"

//line sql.y:20
import (
	"go/constant"
	"go/token"

	"github.com/pkg/errors"

	"github.com/cockroachdb/cockroach/sql/privilege"
	"github.com/cockroachdb/cockroach/util"
)

var errUnimplemented = errors.New("unimplemented")

func unimplemented() {
	panic(errUnimplemented)
}

func unimplementedWithIssue(issue int) {
	panic(util.UnimplementedWithIssueErrorf(issue, ""))
}

//line sql.y:44

// sqlSymUnion represents a union of types, providing accessor methods
// to retrieve the underlying type stored in the union's empty interface.
// The purpose of the sqlSymUnion struct is to reduce the memory footprint of
// the sqlSymType because only one value (of a variety of types) is ever needed
// to be stored in the union field at a time.
//
// By using an empty interface, we lose the type checking previously provided
// by yacc and the Go compiler when dealing with union values. Instead, runtime
// type assertions must be relied upon in the methods below, and as such, the
// parser should be thoroughly tested whenever new sytax is added.
//
// It is important to note that when assigning values to sqlSymUnion.val, all
// nil values should be typed so that they are stored as nil instances in the
// empty interface, instead of setting the empty interface to nil. This means
// that:
//     $$ = []String(nil)
// should be used, instead of:
//     $$ = nil
// to assign a nil string slice to the union.
type sqlSymUnion struct {
	val interface{}
}

// The following accessor methods come in two forms, depending on the
// type of the value being accessed. Values and pointers are directly
// type asserted from the empty interface, meaning that they will panic
// if the type assertion is incorrect. Interfaces are handled differently
// because a nil instance of an interface inserted into the empty interface
// becomes a nil instance of the empty interface and therefore will fail a
// direct type assertion. Instead, a guarded type assertion must be used,
// which returns nil if the type assertion fails.
func (u *sqlSymUnion) numVal() *NumVal {
	return u.val.(*NumVal)
}
func (u *sqlSymUnion) strVal() *StrVal {
	return u.val.(*StrVal)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) tableWithIdx() *TableNameWithIndex {
	return u.val.(*TableNameWithIndex)
}
func (u *sqlSymUnion) tableWithIdxList() TableNameWithIndexList {
	return u.val.(TableNameWithIndexList)
}
func (u *sqlSymUnion) namePart() NamePart {
	if namePart, ok := u.val.(NamePart); ok {
		return namePart
	}
	return nil
}
func (u *sqlSymUnion) nameList() NameList {
	return u.val.(NameList)
}
func (u *sqlSymUnion) unresolvedName() UnresolvedName {
	return u.val.(UnresolvedName)
}
func (u *sqlSymUnion) unresolvedNames() UnresolvedNames {
	return u.val.(UnresolvedNames)
}
func (u *sqlSymUnion) functionName() FunctionName {
	return u.val.(FunctionName)
}
func (u *sqlSymUnion) normalizableFunctionName() NormalizableFunctionName {
	return NormalizableFunctionName{u.val.(FunctionName)}
}
func (u *sqlSymUnion) normalizableTableName() NormalizableTableName {
	return NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) newNormalizableTableName() *NormalizableTableName {
	return &NormalizableTableName{u.val.(TableNameReference)}
}
func (u *sqlSymUnion) tablePatterns() TablePatterns {
	return u.val.(TablePatterns)
}
func (u *sqlSymUnion) tableNameReferences() TableNameReferences {
	return u.val.(TableNameReferences)
}
func (u *sqlSymUnion) indexHints() *IndexHints {
	return u.val.(*IndexHints)
}
func (u *sqlSymUnion) stmt() Statement {
	if stmt, ok := u.val.(Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []Statement {
	return u.val.([]Statement)
}
func (u *sqlSymUnion) slct() *Select {
	if selectStmt, ok := u.val.(*Select); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) selectStmt() SelectStatement {
	if selectStmt, ok := u.val.(SelectStatement); ok {
		return selectStmt
	}
	return nil
}
func (u *sqlSymUnion) colDef() *ColumnTableDef {
	return u.val.(*ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() ConstraintTableDef {
	if constraintDef, ok := u.val.(ConstraintTableDef); ok {
		return constraintDef
	}
	return nil
}
func (u *sqlSymUnion) tblDef() TableDef {
	if tblDef, ok := u.val.(TableDef); ok {
		return tblDef
	}
	return nil
}
func (u *sqlSymUnion) tblDefs() TableDefs {
	return u.val.(TableDefs)
}
func (u *sqlSymUnion) colQual() NamedColumnQualification {
	if colQual, ok := u.val.(NamedColumnQualification); ok {
		return colQual
	}
	return NamedColumnQualification{}
}
func (u *sqlSymUnion) colQualElem() ColumnQualification {
	if colQual, ok := u.val.(ColumnQualification); ok {
		return colQual
	}
	return nil
}
func (u *sqlSymUnion) colQuals() []NamedColumnQualification {
	return u.val.([]NamedColumnQualification)
}
func (u *sqlSymUnion) colType() ColumnType {
	if colType, ok := u.val.(ColumnType); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []ColumnType {
	return u.val.([]ColumnType)
}
func (u *sqlSymUnion) expr() Expr {
	if expr, ok := u.val.(Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() Exprs {
	return u.val.(Exprs)
}
func (u *sqlSymUnion) selExpr() SelectExpr {
	return u.val.(SelectExpr)
}
func (u *sqlSymUnion) selExprs() SelectExprs {
	return u.val.(SelectExprs)
}
func (u *sqlSymUnion) retExprs() ReturningExprs {
	return ReturningExprs(u.val.(SelectExprs))
}
func (u *sqlSymUnion) aliasClause() AliasClause {
	return u.val.(AliasClause)
}
func (u *sqlSymUnion) asOfClause() AsOfClause {
	return u.val.(AsOfClause)
}
func (u *sqlSymUnion) tblExpr() TableExpr {
	if tblExpr, ok := u.val.(TableExpr); ok {
		return tblExpr
	}
	return nil
}
func (u *sqlSymUnion) tblExprs() TableExprs {
	return u.val.(TableExprs)
}
func (u *sqlSymUnion) from() *From {
	return u.val.(*From)
}
func (u *sqlSymUnion) joinCond() JoinCond {
	if joinCond, ok := u.val.(JoinCond); ok {
		return joinCond
	}
	return nil
}
func (u *sqlSymUnion) when() *When {
	return u.val.(*When)
}
func (u *sqlSymUnion) whens() []*When {
	return u.val.([]*When)
}
func (u *sqlSymUnion) updateExpr() *UpdateExpr {
	return u.val.(*UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() UpdateExprs {
	return u.val.(UpdateExprs)
}
func (u *sqlSymUnion) limit() *Limit {
	return u.val.(*Limit)
}
func (u *sqlSymUnion) targetList() TargetList {
	return u.val.(TargetList)
}
func (u *sqlSymUnion) targetListPtr() *TargetList {
	return u.val.(*TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *OnConflict {
	return u.val.(*OnConflict)
}
func (u *sqlSymUnion) orderBy() OrderBy {
	return u.val.(OrderBy)
}
func (u *sqlSymUnion) order() *Order {
	return u.val.(*Order)
}
func (u *sqlSymUnion) orders() []*Order {
	return u.val.([]*Order)
}
func (u *sqlSymUnion) groupBy() GroupBy {
	return u.val.(GroupBy)
}
func (u *sqlSymUnion) dir() Direction {
	return u.val.(Direction)
}
func (u *sqlSymUnion) alterTableCmd() AlterTableCmd {
	if alterTableCmd, ok := u.val.(AlterTableCmd); ok {
		return alterTableCmd
	}
	return nil
}
func (u *sqlSymUnion) alterTableCmds() AlterTableCmds {
	return u.val.(AlterTableCmds)
}
func (u *sqlSymUnion) isoLevel() IsolationLevel {
	return u.val.(IsolationLevel)
}
func (u *sqlSymUnion) userPriority() UserPriority {
	return u.val.(UserPriority)
}
func (u *sqlSymUnion) idxElem() IndexElem {
	return u.val.(IndexElem)
}
func (u *sqlSymUnion) idxElems() IndexElemList {
	return u.val.(IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() DropBehavior {
	return u.val.(DropBehavior)
}
func (u *sqlSymUnion) interleave() *InterleaveDef {
	return u.val.(*InterleaveDef)
}

//line sql.y:309
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	empty struct{}
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const SCONST = 57347
const BCONST = 57348
const ICONST = 57349
const FCONST = 57350
const PLACEHOLDER = 57351
const TYPECAST = 57352
const TYPEANNOTATE = 57353
const DOT_DOT = 57354
const LESS_EQUALS = 57355
const GREATER_EQUALS = 57356
const NOT_EQUALS = 57357
const NOT_REGMATCH = 57358
const REGIMATCH = 57359
const NOT_REGIMATCH = 57360
const ERROR = 57361
const ACTION = 57362
const ADD = 57363
const ALL = 57364
const ALTER = 57365
const ANALYSE = 57366
const ANALYZE = 57367
const AND = 57368
const ANY = 57369
const ANNOTATE_TYPE = 57370
const ARRAY = 57371
const AS = 57372
const ASC = 57373
const ASYMMETRIC = 57374
const AT = 57375
const BEGIN = 57376
const BETWEEN = 57377
const BIGINT = 57378
const BIGSERIAL = 57379
const BIT = 57380
const BLOB = 57381
const BOOL = 57382
const BOOLEAN = 57383
const BOTH = 57384
const BY = 57385
const BYTEA = 57386
const BYTES = 57387
const CASCADE = 57388
const CASE = 57389
const CAST = 57390
const CHAR = 57391
const CHARACTER = 57392
const CHARACTERISTICS = 57393
const CHECK = 57394
const COALESCE = 57395
const COLLATE = 57396
const COLLATION = 57397
const COLUMN = 57398
const COLUMNS = 57399
const COMMIT = 57400
const COMMITTED = 57401
const CONCAT = 57402
const CONFLICT = 57403
const CONSTRAINT = 57404
const CONSTRAINTS = 57405
const COPY = 57406
const COVERING = 57407
const CREATE = 57408
const CROSS = 57409
const CUBE = 57410
const CURRENT = 57411
const CURRENT_CATALOG = 57412
const CURRENT_DATE = 57413
const CURRENT_ROLE = 57414
const CURRENT_TIME = 57415
const CURRENT_TIMESTAMP = 57416
const CURRENT_USER = 57417
const CYCLE = 57418
const DATA = 57419
const DATABASE = 57420
const DATABASES = 57421
const DATE = 57422
const DAY = 57423
const DEC = 57424
const DECIMAL = 57425
const DEFAULT = 57426
const DEALLOCATE = 57427
const DEFERRABLE = 57428
const DELETE = 57429
const DESC = 57430
const DISTINCT = 57431
const DO = 57432
const DOUBLE = 57433
const DROP = 57434
const ELSE = 57435
const ENCODING = 57436
const END = 57437
const ESCAPE = 57438
const EXCEPT = 57439
const EXISTS = 57440
const EXECUTE = 57441
const EXPLAIN = 57442
const EXTRACT = 57443
const FALSE = 57444
const FAMILY = 57445
const FETCH = 57446
const FILTER = 57447
const FIRST = 57448
const FLOAT = 57449
const FLOORDIV = 57450
const FOLLOWING = 57451
const FOR = 57452
const FORCE_INDEX = 57453
const FOREIGN = 57454
const FROM = 57455
const FULL = 57456
const GRANT = 57457
const GRANTS = 57458
const GREATEST = 57459
const GROUP = 57460
const GROUPING = 57461
const HAVING = 57462
const HIGH = 57463
const HOUR = 57464
const IF = 57465
const IFNULL = 57466
const ILIKE = 57467
const IN = 57468
const INTERLEAVE = 57469
const INDEX = 57470
const INDEXES = 57471
const INITIALLY = 57472
const INNER = 57473
const INSERT = 57474
const INT = 57475
const INT8 = 57476
const INT64 = 57477
const INTEGER = 57478
const INTERSECT = 57479
const INTERVAL = 57480
const INTO = 57481
const IS = 57482
const ISOLATION = 57483
const JOIN = 57484
const KEY = 57485
const KEYS = 57486
const LATERAL = 57487
const LEADING = 57488
const LEAST = 57489
const LEFT = 57490
const LEVEL = 57491
const LIKE = 57492
const LIMIT = 57493
const LOCAL = 57494
const LOCALTIME = 57495
const LOCALTIMESTAMP = 57496
const LOW = 57497
const LSHIFT = 57498
const MATCH = 57499
const MINUTE = 57500
const MONTH = 57501
const NAME = 57502
const NAMES = 57503
const NATURAL = 57504
const NEXT = 57505
const NO = 57506
const NO_INDEX_JOIN = 57507
const NORMAL = 57508
const NOT = 57509
const NOTHING = 57510
const NULL = 57511
const NULLIF = 57512
const NULLS = 57513
const NUMERIC = 57514
const OF = 57515
const OFF = 57516
const OFFSET = 57517
const ON = 57518
const ONLY = 57519
const OR = 57520
const ORDER = 57521
const ORDINALITY = 57522
const OUT = 57523
const OUTER = 57524
const OVER = 57525
const OVERLAPS = 57526
const OVERLAY = 57527
const PARENT = 57528
const PARTIAL = 57529
const PARTITION = 57530
const PLACING = 57531
const POSITION = 57532
const PRECEDING = 57533
const PRECISION = 57534
const PREPARE = 57535
const PRIMARY = 57536
const PRIORITY = 57537
const RANGE = 57538
const READ = 57539
const REAL = 57540
const RECURSIVE = 57541
const REF = 57542
const REFERENCES = 57543
const RENAME = 57544
const REPEATABLE = 57545
const REPLACE = 57546
const RELEASE = 57547
const RESTRICT = 57548
const RETURNING = 57549
const REVOKE = 57550
const RIGHT = 57551
const ROLLBACK = 57552
const ROLLUP = 57553
const ROW = 57554
const ROWS = 57555
const RSHIFT = 57556
const SAVEPOINT = 57557
const SEARCH = 57558
const SECOND = 57559
const SELECT = 57560
const SERIAL = 57561
const SERIALIZABLE = 57562
const SESSION = 57563
const SESSION_USER = 57564
const SET = 57565
const SHOW = 57566
const SIMILAR = 57567
const SIMPLE = 57568
const SMALLINT = 57569
const SMALLSERIAL = 57570
const SNAPSHOT = 57571
const SOME = 57572
const SPLIT = 57573
const SQL = 57574
const START = 57575
const STDIN = 57576
const STRICT = 57577
const STRING = 57578
const STORING = 57579
const SUBSTRING = 57580
const SYMMETRIC = 57581
const SYSTEM = 57582
const TABLE = 57583
const TABLES = 57584
const TEXT = 57585
const THEN = 57586
const TIME = 57587
const TIMESTAMP = 57588
const TIMESTAMPTZ = 57589
const TO = 57590
const TRAILING = 57591
const TRANSACTION = 57592
const TREAT = 57593
const TRIM = 57594
const TRUE = 57595
const TRUNCATE = 57596
const TYPE = 57597
const UNBOUNDED = 57598
const UNCOMMITTED = 57599
const UNION = 57600
const UNIQUE = 57601
const UNKNOWN = 57602
const UPDATE = 57603
const UPSERT = 57604
const USER = 57605
const USING = 57606
const VALID = 57607
const VALIDATE = 57608
const VALUE = 57609
const VALUES = 57610
const VARCHAR = 57611
const VARIADIC = 57612
const VIEW = 57613
const VARYING = 57614
const WHEN = 57615
const WHERE = 57616
const WINDOW = 57617
const WITH = 57618
const WITHIN = 57619
const WITHOUT = 57620
const YEAR = 57621
const ZONE = 57622
const NOT_LA = 57623
const WITH_LA = 57624
const AS_LA = 57625
const POSTFIXOP = 57626
const UMINUS = 57627

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ACTION",
	"ADD",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CASCADE",
	"CASE",
	"CAST",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMIT",
	"COMMITTED",
	"CONCAT",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DELETE",
	"DESC",
	"DISTINCT",
	"DO",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPLAIN",
	"EXTRACT",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"HAVING",
	"HIGH",
	"HOUR",
	"IF",
	"IFNULL",
	"ILIKE",
	"IN",
	"INTERLEAVE",
	"INDEX",
	"INDEXES",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"IS",
	"ISOLATION",
	"JOIN",
	"KEY",
	"KEYS",
	"LATERAL",
	"LEADING",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MINUTE",
	"MONTH",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NULL",
	"NULLIF",
	"NULLS",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PLACING",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"RANGE",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESTRICT",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"SAVEPOINT",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SERIAL",
	"SERIALIZABLE",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STDIN",
	"STRICT",
	"STRING",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSTEM",
	"TABLE",
	"TABLES",
	"TEXT",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TREAT",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TYPE",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UPDATE",
	"UPSERT",
	"USER",
	"USING",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'|'",
	"'^'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UMINUS",
	"'~'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:4753

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 26,
	304, 26,
	-2, 367,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 44,
	1, 342,
	176, 342,
	207, 342,
	302, 342,
	304, 342,
	-2, 352,
	-1, 57,
	1, 345,
	176, 345,
	207, 345,
	302, 345,
	304, 345,
	-2, 351,
	-1, 66,
	1, 26,
	304, 26,
	-2, 367,
	-1, 284,
	1, 169,
	304, 169,
	-2, 865,
	-1, 319,
	151, 377,
	175, 377,
	-2, 348,
	-1, 322,
	151, 376,
	175, 376,
	-2, 346,
	-1, 454,
	151, 376,
	175, 376,
	-2, 349,
	-1, 510,
	301, 804,
	-2, 797,
	-1, 511,
	301, 805,
	-2, 798,
	-1, 517,
	5, 512,
	301, 512,
	-2, 956,
	-1, 540,
	5, 478,
	-2, 931,
	-1, 541,
	5, 506,
	301, 506,
	-2, 933,
	-1, 542,
	5, 486,
	-2, 934,
	-1, 543,
	5, 485,
	-2, 935,
	-1, 544,
	5, 506,
	301, 506,
	-2, 938,
	-1, 545,
	5, 506,
	301, 506,
	-2, 939,
	-1, 546,
	5, 507,
	-2, 942,
	-1, 547,
	5, 472,
	-2, 943,
	-1, 548,
	5, 472,
	-2, 944,
	-1, 549,
	5, 488,
	-2, 947,
	-1, 550,
	5, 473,
	-2, 952,
	-1, 551,
	5, 474,
	-2, 953,
	-1, 552,
	5, 475,
	-2, 954,
	-1, 553,
	5, 476,
	-2, 955,
	-1, 554,
	5, 472,
	-2, 959,
	-1, 555,
	5, 479,
	-2, 964,
	-1, 556,
	5, 477,
	-2, 967,
	-1, 557,
	5, 504,
	301, 504,
	-2, 969,
	-1, 558,
	5, 508,
	-2, 972,
	-1, 559,
	5, 510,
	-2, 973,
	-1, 560,
	5, 503,
	301, 503,
	-2, 977,
	-1, 889,
	97, 352,
	137, 352,
	151, 352,
	175, 352,
	179, 352,
	258, 352,
	-2, 624,
	-1, 897,
	301, 782,
	-2, 771,
	-1, 1095,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 547,
	-1, 1096,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 548,
	-1, 1097,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 549,
	-1, 1101,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 553,
	-1, 1102,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 554,
	-1, 1103,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 555,
	-1, 1106,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	225, 0,
	281, 0,
	-2, 560,
	-1, 1112,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	225, 0,
	281, 0,
	-2, 562,
	-1, 1115,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	225, 0,
	281, 0,
	-2, 567,
	-1, 1116,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	225, 0,
	281, 0,
	-2, 568,
	-1, 1117,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	225, 0,
	281, 0,
	-2, 569,
	-1, 1142,
	184, 695,
	-2, 698,
	-1, 1311,
	97, 352,
	137, 352,
	151, 352,
	175, 352,
	179, 352,
	258, 352,
	-2, 425,
	-1, 1315,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	225, 0,
	281, 0,
	-2, 561,
	-1, 1316,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	225, 0,
	281, 0,
	-2, 563,
	-1, 1321,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	225, 0,
	281, 0,
	-2, 564,
	-1, 1339,
	184, 694,
	-2, 697,
	-1, 1502,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	225, 0,
	281, 0,
	-2, 565,
	-1, 1507,
	140, 0,
	-2, 579,
	-1, 1515,
	184, 696,
	-2, 699,
	-1, 1549,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 605,
	-1, 1550,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 606,
	-1, 1551,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 607,
	-1, 1555,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 611,
	-1, 1556,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 612,
	-1, 1557,
	13, 0,
	14, 0,
	15, 0,
	284, 0,
	285, 0,
	286, 0,
	-2, 613,
	-1, 1662,
	140, 0,
	-2, 580,
	-1, 1665,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	225, 0,
	281, 0,
	-2, 583,
	-1, 1666,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	225, 0,
	281, 0,
	-2, 585,
	-1, 1752,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	225, 0,
	281, 0,
	-2, 584,
	-1, 1753,
	16, 0,
	17, 0,
	18, 0,
	35, 0,
	125, 0,
	126, 0,
	150, 0,
	225, 0,
	281, 0,
	-2, 586,
	-1, 1760,
	140, 0,
	-2, 614,
	-1, 1805,
	140, 0,
	-2, 615,
	-1, 1857,
	35, 0,
	125, 0,
	150, 0,
	225, 0,
	281, 0,
	-2, 930,
}

const sqlNprod = 1072
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 24627

var sqlAct = [...]int{

	511, 1856, 691, 1837, 974, 1468, 1879, 1811, 1839, 1838,
	1855, 815, 982, 1526, 1728, 1740, 596, 1705, 840, 1626,
	1654, 285, 1067, 357, 1586, 323, 1648, 892, 73, 1627,
	1481, 509, 1641, 508, 501, 74, 1047, 704, 73, 73,
	73, 344, 1395, 73, 1308, 1238, 73, 1044, 1394, 1342,
	894, 43, 1307, 1491, 73, 821, 1046, 1013, 952, 18,
	705, 73, 73, 573, 983, 73, 576, 1075, 73, 73,
	73, 1298, 943, 1188, 561, 1152, 1292, 473, 1076, 818,
	1128, 1079, 1125, 330, 56, 25, 14, 997, 836, 1006,
	752, 578, 7, 483, 768, 592, 246, 1077, 358, 356,
	359, 440, 749, 474, 441, 1039, 924, 928, 322, 9,
	376, 328, 369, 779, 371, 8, 6, 1191, 976, 4,
	56, 244, 251, 250, 372, 1050, 842, 333, 57, 252,
	456, 282, 457, 770, 458, 272, 766, 58, 748, 684,
	263, 331, 365, 327, 1747, 461, 253, 1748, 975, 327,
	56, 693, 248, 247, 1306, 1871, 249, 693, 1071, 1010,
	1853, 693, 341, 1727, 1845, 347, 1835, 1071, 1830, 1003,
	1807, 1071, 1801, 1003, 503, 1071, 1296, 1791, 1781, 1249,
	1727, 1071, 1250, 350, 1754, 320, 844, 1003, 1751, 310,
	1737, 1071, 1735, 1727, 319, 1071, 563, 588, 1295, 1726,
	1011, 562, 1727, 335, 1365, 1366, 62, 1383, 1384, 1385,
	1710, 1709, 1687, 1071, 1071, 1016, 1667, 1664, 1613, 1016,
	1003, 1016, 1016, 1612, 845, 846, 1016, 1598, 1511, 64,
	1071, 1016, 845, 846, 1337, 1454, 1012, 1009, 971, 1338,
	1795, 73, 73, 73, 73, 1448, 379, 848, 971, 1412,
	1410, 843, 1413, 1016, 1380, 848, 65, 1409, 1408, 73,
	1016, 1016, 1336, 1339, 60, 374, 1016, 1016, 847, 1341,
	61, 1295, 1562, 1514, 73, 1016, 847, 73, 73, 1283,
	1072, 380, 1071, 1071, 1025, 1015, 1730, 1016, 1016, 59,
	1275, 1002, 941, 970, 1003, 1014, 971, 328, 940, 1277,
	699, 939, 1371, 700, 1071, 1018, 1136, 1066, 1033, 469,
	73, 694, 73, 808, 73, 73, 807, 694, 73, 760,
	381, 694, 853, 360, 845, 846, 468, 361, 759, 66,
	853, 405, 340, 73, 516, 447, 449, 360, 366, 439,
	361, 361, 979, 793, 73, 455, 425, 848, 565, 1854,
	1381, 1851, 1365, 1366, 62, 1844, 73, 1008, 1802, 377,
	1736, 1692, 599, 73, 73, 73, 1688, 73, 847, 454,
	863, 1618, 1680, 1679, 1249, 696, 1678, 64, 843, 1007,
	594, 413, 568, 1673, 414, 1672, 1671, 1624, 1577, 1572,
	1571, 1570, 1517, 1365, 1366, 1500, 1480, 600, 73, 1475,
	1458, 1417, 1380, 1414, 65, 73, 1402, 73, 1382, 446,
	697, 1393, 1364, 1133, 1361, 567, 692, 900, 379, 379,
	811, 1359, 853, 1347, 1346, 1279, 599, 73, 864, 73,
	73, 73, 73, 73, 73, 73, 601, 59, 813, 73,
	1276, 1205, 794, 1159, 73, 444, 1158, 468, 810, 467,
	1371, 354, 73, 380, 380, 816, 1528, 1821, 1794, 320,
	366, 600, 1773, 1771, 1762, 1744, 1733, 1724, 319, 1702,
	73, 464, 465, 73, 470, 1685, 62, 1657, 1377, 1378,
	1379, 1634, 1376, 1373, 1374, 1375, 1367, 1368, 1369, 1370,
	1372, 1371, 381, 381, 1506, 701, 1617, 1499, 1381, 64,
	601, 1477, 1134, 1473, 686, 683, 849, 850, 851, 852,
	854, 1471, 874, 1456, 849, 850, 851, 852, 854, 746,
	874, 1428, 1427, 1623, 897, 1392, 65, 1355, 1354, 758,
	1333, 360, 845, 846, 60, 361, 1329, 1130, 1264, 328,
	61, 1230, 1229, 845, 846, 756, 755, 1217, 1216, 1198,
	1157, 1070, 929, 932, 790, 783, 1382, 936, 795, 978,
	922, 799, 800, 801, 802, 803, 848, 798, 921, 920,
	806, 919, 73, 918, 711, 917, 847, 564, 916, 809,
	73, 254, 915, 914, 73, 913, 824, 847, 73, 73,
	320, 826, 825, 320, 320, 789, 734, 838, 1217, 832,
	912, 733, 833, 834, 911, 891, 910, 909, 851, 852,
	854, 908, 874, 907, 898, 1622, 946, 1365, 1366, 896,
	59, 345, 472, 411, 55, 401, 399, 845, 846, 895,
	1376, 1373, 1374, 1375, 1367, 1368, 1369, 1370, 1372, 355,
	1258, 584, 845, 846, 442, 788, 787, 1257, 781, 776,
	35, 926, 927, 957, 959, 569, 930, 1749, 36, 1621,
	419, 1251, 933, 1061, 934, 848, 925, 1416, 935, 1415,
	1474, 1314, 435, 420, 905, 1367, 1368, 1369, 1370, 1372,
	1642, 962, 1245, 975, 817, 1529, 847, 275, 73, 1010,
	73, 73, 1350, 73, 937, 254, 73, 1153, 73, 73,
	317, 379, 966, 1817, 569, 949, 579, 1867, 580, 812,
	1780, 1868, 1606, 901, 309, 1371, 308, 1024, 303, 992,
	374, 304, 1718, 1717, 513, 791, 1442, 1420, 1419, 1317,
	1011, 1263, 1262, 579, 710, 580, 380, 1271, 55, 1261,
	853, 1260, 1113, 1017, 977, 968, 977, 965, 736, 945,
	443, 73, 73, 1742, 1202, 1439, 1201, 1084, 438, 246,
	397, 312, 1819, 998, 35, 945, 1012, 1009, 1645, 1594,
	1020, 944, 36, 1127, 241, 381, 62, 581, 1707, 740,
	1127, 1014, 1443, 56, 1234, 251, 250, 56, 863, 1000,
	999, 590, 252, 792, 599, 417, 1001, 687, 73, 64,
	315, 1595, 1876, 1779, 581, 981, 1455, 990, 991, 253,
	1038, 995, 73, 73, 377, 248, 247, 73, 73, 249,
	874, 994, 1239, 993, 242, 1014, 65, 1243, 953, 600,
	237, 874, 586, 418, 60, 1057, 930, 326, 933, 1058,
	61, 1463, 1446, 1430, 69, 73, 864, 1073, 73, 927,
	926, 1029, 1021, 1019, 1022, 845, 846, 1031, 1239, 59,
	1460, 585, 1027, 313, 1026, 1064, 1065, 693, 601, 1083,
	1247, 450, 1153, 1054, 1032, 238, 1232, 325, 848, 589,
	1832, 318, 599, 1030, 1590, 1867, 1591, 1008, 956, 1774,
	62, 1365, 1366, 314, 68, 1272, 1461, 1833, 1131, 847,
	1014, 1369, 1370, 1372, 1725, 1882, 1081, 1082, 923, 1043,
	1042, 1593, 1041, 64, 1228, 874, 594, 600, 1596, 327,
	579, 594, 580, 857, 849, 850, 851, 852, 854, 1841,
	874, 1164, 415, 782, 777, 1270, 888, 243, 436, 1174,
	65, 1437, 1204, 73, 73, 73, 1140, 1074, 60, 73,
	1708, 582, 73, 853, 61, 1014, 601, 942, 73, 73,
	73, 73, 73, 416, 408, 410, 73, 1758, 1353, 73,
	955, 1875, 73, 245, 1431, 1492, 1592, 735, 582, 73,
	1319, 73, 1132, 327, 1840, 1212, 416, 1126, 73, 1371,
	1149, 581, 437, 1866, 1253, 1864, 1254, 73, 324, 1640,
	1059, 863, 1842, 1206, 240, 239, 428, 67, 1167, 406,
	404, 1214, 459, 1137, 1141, 460, 1144, 1485, 73, 73,
	711, 711, 1241, 1880, 73, 1712, 1683, 694, 1891, 1227,
	328, 1110, 1183, 1207, 379, 954, 460, 1381, 1195, 1196,
	1197, 1843, 734, 734, 1711, 1700, 477, 733, 733, 1168,
	496, 1768, 73, 1874, 73, 1422, 73, 765, 1211, 864,
	73, 1605, 1060, 73, 1256, 1881, 1602, 823, 1604, 380,
	1284, 814, 73, 1459, 1244, 1812, 459, 1281, 71, 73,
	805, 73, 1883, 1252, 761, 1169, 1166, 1651, 255, 256,
	257, 763, 1701, 274, 1255, 1382, 286, 1219, 1218, 1655,
	1487, 577, 764, 1486, 274, 415, 364, 363, 381, 1267,
	1684, 334, 334, 1890, 325, 71, 1282, 451, 71, 71,
	353, 1108, 1111, 1266, 707, 711, 1269, 1274, 1273, 1268,
	998, 1278, 328, 1280, 855, 856, 857, 849, 850, 851,
	852, 854, 1469, 874, 1170, 261, 1107, 734, 1625, 1601,
	1482, 1603, 733, 1656, 56, 1289, 1000, 999, 1290, 1313,
	1293, 1558, 1312, 1001, 1156, 582, 1698, 1761, 1682, 1396,
	1340, 1505, 1375, 1367, 1368, 1369, 1370, 1372, 711, 1360,
	710, 710, 328, 1328, 1365, 1366, 1699, 1235, 1023, 264,
	969, 264, 1320, 1318, 736, 736, 434, 433, 432, 431,
	734, 430, 429, 426, 362, 733, 1165, 1301, 1397, 906,
	269, 797, 269, 1155, 1836, 265, 1809, 265, 73, 1583,
	1435, 1109, 1433, 1523, 1304, 1421, 1434, 1349, 1436, 1286,
	1062, 328, 1055, 996, 698, 1490, 1426, 695, 266, 1559,
	266, 1302, 690, 587, 583, 1560, 822, 1719, 1332, 462,
	73, 73, 1334, 1450, 1068, 268, 1868, 268, 422, 1399,
	1400, 1401, 338, 785, 1344, 1345, 3, 945, 1721, 945,
	961, 1123, 1730, 960, 1424, 958, 73, 1447, 73, 1776,
	73, 1418, 1371, 964, 1121, 710, 1804, 73, 302, 1483,
	466, 71, 367, 71, 286, 963, 73, 1391, 1796, 736,
	73, 1438, 1303, 260, 1476, 1056, 73, 599, 1404, 402,
	73, 1069, 73, 980, 1451, 1453, 463, 1445, 1452, 1462,
	1464, 1465, 1227, 1496, 407, 1449, 839, 286, 286, 339,
	1381, 757, 703, 346, 1470, 1005, 1888, 423, 710, 305,
	306, 267, 600, 267, 1479, 271, 1889, 1440, 1441, 1119,
	1578, 1118, 736, 1466, 73, 1124, 1493, 1494, 1495, 1472,
	274, 1457, 71, 1411, 286, 286, 1259, 1508, 452, 1519,
	1520, 1521, 1489, 1203, 1484, 1365, 1366, 1200, 1488, 845,
	846, 601, 1199, 334, 270, 1150, 270, 1036, 1382, 1516,
	1035, 1034, 1797, 1669, 71, 311, 1522, 1287, 1037, 899,
	1365, 1366, 1706, 262, 796, 1530, 71, 427, 1675, 1831,
	1352, 1535, 1757, 71, 71, 71, 1739, 688, 1532, 1533,
	73, 73, 73, 735, 735, 1154, 1537, 1538, 73, 73,
	904, 34, 1629, 489, 73, 1120, 73, 1565, 73, 73,
	73, 1584, 1122, 73, 1566, 1423, 1599, 1600, 71, 1579,
	1049, 1512, 1048, 602, 786, 753, 775, 753, 1582, 1569,
	512, 769, 1376, 1373, 1374, 1375, 1367, 1368, 1369, 1370,
	1372, 778, 1163, 566, 73, 73, 514, 286, 708, 753,
	286, 286, 286, 286, 286, 804, 515, 73, 73, 286,
	709, 73, 1635, 931, 274, 502, 1620, 1639, 1371, 706,
	73, 73, 820, 1632, 711, 1631, 1633, 831, 1619, 1632,
	1563, 1631, 1633, 375, 1294, 984, 1151, 1348, 1658, 902,
	334, 1573, 1636, 841, 1615, 488, 734, 494, 735, 73,
	493, 733, 711, 711, 1138, 1637, 1638, 398, 485, 1653,
	711, 711, 1305, 46, 1663, 1659, 1381, 412, 280, 281,
	1242, 1616, 1063, 827, 734, 734, 1432, 316, 1362, 733,
	733, 400, 734, 734, 484, 1646, 1647, 733, 733, 1652,
	707, 707, 1181, 711, 1173, 1171, 1162, 445, 1681, 572,
	985, 735, 424, 1248, 73, 1004, 73, 471, 73, 73,
	835, 337, 70, 336, 1045, 734, 421, 73, 762, 1028,
	733, 1644, 307, 1770, 1382, 1775, 1429, 1816, 63, 1696,
	1715, 1716, 1693, 24, 22, 21, 20, 19, 73, 17,
	1694, 16, 71, 15, 23, 13, 12, 11, 10, 342,
	950, 33, 349, 352, 71, 32, 1720, 31, 71, 967,
	30, 73, 29, 73, 1731, 28, 5, 2, 1, 0,
	0, 0, 73, 0, 1734, 0, 1729, 0, 73, 0,
	0, 0, 0, 1722, 710, 0, 1632, 1714, 1631, 1633,
	0, 0, 0, 0, 1743, 707, 1750, 0, 736, 0,
	0, 711, 1367, 1368, 1369, 1370, 1372, 0, 0, 1365,
	1366, 0, 710, 710, 0, 0, 1756, 0, 0, 73,
	710, 710, 0, 734, 0, 0, 736, 736, 733, 0,
	0, 1772, 0, 0, 736, 736, 0, 0, 73, 73,
	1766, 0, 73, 1763, 0, 0, 73, 0, 707, 0,
	1746, 73, 0, 710, 0, 0, 0, 0, 71, 747,
	988, 989, 1792, 71, 1784, 73, 71, 736, 286, 286,
	599, 1786, 1787, 594, 1788, 1793, 0, 1785, 0, 1632,
	0, 1631, 1633, 1798, 0, 0, 1800, 0, 1799, 0,
	0, 0, 73, 0, 73, 73, 328, 73, 1767, 0,
	0, 711, 0, 1803, 0, 600, 1820, 1371, 0, 0,
	1822, 0, 1814, 0, 0, 0, 73, 0, 1818, 1826,
	1806, 753, 841, 734, 1823, 342, 0, 352, 733, 1825,
	1829, 1828, 0, 0, 1827, 0, 1824, 0, 0, 0,
	73, 0, 73, 0, 601, 0, 1632, 1846, 1631, 1633,
	0, 1852, 1848, 0, 0, 1381, 1297, 73, 0, 0,
	1849, 710, 0, 0, 1861, 0, 1850, 1863, 1040, 1865,
	0, 1790, 0, 1870, 1869, 736, 0, 0, 0, 1873,
	711, 0, 71, 950, 0, 0, 0, 841, 286, 0,
	0, 1872, 1326, 1885, 1886, 1884, 342, 0, 1887, 0,
	0, 0, 734, 1301, 0, 1324, 1297, 733, 0, 0,
	1892, 0, 0, 1382, 0, 71, 0, 0, 286, 0,
	1304, 0, 0, 0, 0, 0, 0, 735, 570, 0,
	0, 1299, 0, 0, 0, 0, 0, 1302, 0, 0,
	593, 0, 1834, 0, 0, 0, 0, 342, 685, 685,
	0, 1300, 0, 1301, 0, 735, 735, 711, 0, 0,
	0, 710, 0, 735, 735, 1650, 0, 0, 0, 0,
	1304, 0, 1322, 0, 0, 736, 1327, 0, 0, 734,
	1175, 1299, 342, 0, 733, 0, 0, 1302, 1373, 1374,
	1375, 1367, 1368, 1369, 1370, 1372, 735, 0, 1303, 0,
	0, 1300, 0, 0, 0, 0, 1594, 0, 1587, 0,
	0, 845, 846, 71, 1209, 1210, 1585, 0, 0, 950,
	1589, 0, 1215, 0, 0, 0, 0, 0, 1220, 1221,
	1223, 1225, 1226, 0, 848, 0, 1231, 0, 1595, 1233,
	710, 0, 71, 0, 0, 0, 0, 0, 1303, 71,
	0, 1246, 0, 1649, 736, 847, 1323, 1588, 71, 0,
	0, 862, 0, 1325, 0, 0, 0, 71, 0, 0,
	0, 0, 0, 0, 707, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1330, 1331, 0, 1040, 753,
	0, 0, 0, 0, 1040, 0, 475, 475, 0, 0,
	0, 0, 707, 707, 735, 574, 0, 0, 0, 853,
	707, 707, 0, 0, 0, 0, 0, 710, 0, 0,
	595, 1590, 820, 1591, 820, 0, 286, 0, 0, 0,
	71, 736, 0, 1288, 0, 0, 1388, 1389, 1390, 0,
	0, 0, 1291, 707, 0, 0, 0, 0, 1593, 1310,
	0, 71, 0, 0, 0, 1596, 938, 863, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 342, 0,
	0, 0, 352, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1175, 1175, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 735, 0, 0, 0, 0, 0,
	0, 0, 0, 1592, 0, 864, 0, 0, 0, 828,
	830, 0, 0, 0, 0, 0, 837, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 883, 884,
	885, 886, 887, 1175, 1175, 1175, 0, 890, 0, 0,
	0, 707, 0, 0, 1365, 1366, 0, 1383, 1384, 1385,
	0, 0, 0, 0, 0, 0, 0, 903, 0, 0,
	1661, 0, 986, 0, 0, 0, 0, 352, 1503, 1504,
	352, 0, 0, 735, 0, 0, 0, 0, 841, 858,
	855, 856, 857, 849, 850, 851, 852, 854, 0, 874,
	0, 0, 0, 0, 1380, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	71, 71, 0, 0, 0, 0, 0, 1539, 1540, 1541,
	1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551,
	1552, 1553, 1554, 1555, 1556, 1557, 1467, 1561, 950, 0,
	820, 707, 1371, 0, 0, 0, 0, 1478, 490, 44,
	735, 0, 0, 0, 0, 0, 71, 0, 0, 0,
	71, 0, 0, 0, 0, 0, 1310, 0, 0, 0,
	1498, 0, 1310, 0, 1386, 1175, 1175, 0, 0, 0,
	0, 0, 0, 0, 0, 44, 342, 0, 0, 0,
	1381, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 321, 0, 0, 329, 0,
	0, 0, 0, 0, 1527, 44, 0, 0, 0, 342,
	707, 0, 0, 0, 1175, 1175, 1175, 1175, 1175, 1175,
	1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175,
	1175, 1175, 1175, 0, 1175, 0, 0, 0, 1382, 0,
	0, 0, 1365, 1366, 0, 1383, 1384, 1385, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1660, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1580, 1581, 950, 0, 0, 0, 0, 0, 841, 841,
	0, 0, 0, 0, 1607, 0, 1608, 707, 71, 1610,
	1611, 0, 1380, 1614, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1208, 1377, 1378,
	1379, 0, 1376, 1373, 1374, 1375, 1367, 1368, 1369, 1370,
	1372, 0, 1628, 0, 841, 950, 0, 0, 1628, 0,
	0, 0, 0, 0, 0, 1703, 1236, 71, 71, 0,
	1371, 71, 0, 593, 0, 0, 0, 0, 0, 0,
	841, 1310, 593, 0, 0, 0, 0, 0, 0, 0,
	0, 342, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1386, 0, 0, 0, 0, 0, 0, 1676,
	0, 0, 0, 475, 329, 0, 0, 0, 1381, 1085,
	1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095,
	1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105,
	1106, 0, 1112, 0, 1114, 1115, 1116, 1117, 0, 0,
	0, 0, 1760, 0, 1285, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 950, 0, 1695, 0, 286, 1697,
	0, 0, 1175, 0, 0, 342, 1382, 71, 0, 1160,
	1161, 0, 1172, 0, 1182, 1184, 1189, 1192, 1193, 1194,
	0, 1365, 1366, 0, 1383, 1384, 1385, 0, 841, 321,
	0, 0, 0, 0, 0, 0, 0, 1510, 0, 574,
	0, 0, 0, 0, 0, 1628, 845, 846, 0, 0,
	0, 71, 0, 1741, 0, 0, 0, 0, 0, 0,
	0, 1805, 71, 0, 0, 0, 0, 0, 841, 848,
	0, 1380, 0, 1237, 0, 1240, 1377, 1378, 1379, 0,
	1376, 1373, 1374, 1375, 1367, 1368, 1369, 1370, 1372, 1175,
	847, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 287, 0, 0, 0, 0, 0, 820,
	0, 0, 0, 0, 0, 0, 1265, 0, 0, 1371,
	0, 300, 0, 0, 0, 0, 0, 0, 1777, 1778,
	0, 0, 1782, 0, 0, 0, 1783, 0, 1628, 0,
	0, 286, 0, 0, 853, 0, 0, 0, 0, 0,
	0, 1386, 0, 0, 0, 841, 289, 0, 0, 0,
	321, 294, 295, 321, 321, 301, 837, 1381, 1175, 0,
	0, 0, 0, 0, 986, 342, 0, 288, 290, 0,
	0, 0, 1813, 0, 841, 71, 889, 286, 0, 0,
	893, 0, 863, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1628, 1741, 1315, 1316, 0,
	0, 0, 0, 1321, 0, 291, 0, 0, 0, 0,
	342, 0, 0, 0, 342, 1382, 0, 292, 293, 0,
	71, 0, 841, 0, 0, 0, 1335, 0, 0, 0,
	0, 0, 0, 296, 0, 1343, 0, 1862, 0, 0,
	864, 0, 0, 1351, 0, 0, 0, 1356, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 890,
	0, 0, 0, 0, 0, 1189, 1189, 1189, 0, 0,
	0, 0, 0, 0, 0, 1377, 1378, 1379, 0, 1376,
	1373, 1374, 1375, 1367, 1368, 1369, 1370, 1372, 0, 0,
	0, 0, 0, 0, 0, 0, 1425, 0, 0, 0,
	0, 0, 0, 0, 858, 855, 856, 857, 849, 850,
	851, 852, 854, 0, 874, 0, 0, 0, 0, 475,
	0, 297, 0, 0, 298, 0, 0, 475, 0, 299,
	0, 574, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1609, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 44, 0, 44, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 44, 0,
	0, 0, 44, 0, 0, 0, 0, 0, 0, 0,
	0, 342, 342, 0, 1501, 342, 0, 1502, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1507, 0,
	0, 0, 845, 846, 0, 865, 866, 867, 875, 876,
	877, 1265, 0, 0, 0, 0, 0, 0, 868, 0,
	1524, 0, 0, 0, 0, 848, 0, 879, 0, 0,
	1534, 0, 0, 1536, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 847, 0, 0, 0,
	0, 0, 862, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1567, 1568, 0, 0,
	0, 0, 0, 0, 0, 1574, 1575, 1576, 0, 0,
	0, 0, 44, 0, 0, 0, 0, 0, 0, 0,
	0, 1704, 0, 0, 0, 0, 0, 0, 0, 0,
	853, 0, 0, 845, 846, 0, 865, 866, 867, 875,
	876, 877, 0, 1078, 0, 0, 475, 872, 880, 868,
	0, 0, 0, 0, 0, 0, 848, 0, 879, 0,
	0, 0, 878, 0, 0, 1738, 0, 0, 0, 0,
	0, 0, 870, 0, 0, 0, 342, 847, 863, 1129,
	0, 0, 1643, 862, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	869, 0, 0, 0, 0, 1662, 0, 0, 0, 1665,
	1666, 0, 0, 0, 1668, 0, 0, 0, 1670, 0,
	0, 0, 0, 0, 0, 1674, 0, 0, 0, 1677,
	0, 853, 0, 0, 0, 0, 864, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 873, 872, 880,
	0, 0, 0, 0, 0, 0, 0, 26, 0, 0,
	0, 0, 1686, 878, 0, 0, 0, 0, 48, 0,
	0, 0, 0, 870, 0, 0, 0, 329, 0, 863,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 0, 0, 0, 0, 0, 27, 1815,
	55, 869, 0, 871, 1713, 0, 859, 860, 861, 0,
	858, 855, 856, 857, 849, 850, 851, 852, 854, 39,
	874, 0, 972, 0, 0, 0, 35, 0, 0, 51,
	1732, 973, 0, 38, 36, 1365, 1366, 864, 1383, 1384,
	1385, 0, 0, 0, 986, 0, 0, 0, 873, 40,
	1745, 1509, 0, 0, 0, 44, 0, 0, 0, 0,
	1752, 1753, 0, 0, 0, 0, 0, 0, 0, 44,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1311,
	0, 0, 0, 0, 0, 1380, 0, 0, 0, 1765,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1769, 0, 871, 0, 0, 859, 860, 861,
	1129, 858, 855, 856, 857, 849, 850, 851, 852, 854,
	0, 874, 0, 0, 574, 0, 0, 37, 1689, 889,
	0, 0, 0, 1371, 0, 0, 0, 0, 0, 53,
	0, 0, 41, 0, 52, 0, 0, 0, 0, 42,
	0, 0, 62, 0, 0, 0, 0, 45, 47, 0,
	0, 0, 0, 0, 0, 1386, 0, 49, 0, 0,
	0, 0, 0, 0, 0, 64, 0, 0, 889, 0,
	0, 1381, 0, 0, 0, 0, 0, 0, 54, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 65, 0, 0, 0, 0, 0, 0, 0,
	60, 0, 0, 0, 0, 0, 61, 1847, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1860, 1860, 0, 59, 0, 0, 0, 1382,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1078,
	0, 0, 0, 0, 0, 0, 0, 1860, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1860, 0,
	0, 0, 0, 0, 1078, 0, 0, 0, 1078, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1377,
	1378, 1379, 0, 1376, 1373, 1374, 1375, 1367, 1368, 1369,
	1370, 1372, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 510,
	499, 500, 497, 498, 486, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 76, 0, 77, 0,
	0, 0, 0, 526, 492, 0, 0, 0, 78, 79,
	0, 540, 191, 541, 80, 542, 543, 0, 81, 195,
	196, 82, 507, 525, 544, 545, 199, 0, 536, 0,
	518, 0, 83, 84, 85, 0, 86, 0, 87, 88,
	89, 0, 384, 90, 1859, 0, 519, 521, 0, 520,
	522, 92, 93, 94, 95, 546, 96, 547, 548, 0,
	97, 0, 98, 0, 0, 0, 539, 100, 0, 101,
	0, 0, 0, 491, 102, 103, 527, 505, 0, 0,
	104, 105, 549, 0, 106, 0, 107, 44, 0, 385,
	0, 108, 537, 0, 208, 0, 109, 110, 533, 535,
	0, 0, 113, 0, 111, 0, 386, 112, 550, 551,
	552, 553, 0, 517, 44, 44, 114, 389, 115, 116,
	0, 0, 538, 390, 117, 1078, 1078, 118, 0, 1078,
	119, 0, 120, 121, 122, 123, 124, 392, 125, 126,
	129, 127, 481, 128, 506, 534, 130, 554, 131, 132,
	0, 0, 0, 0, 0, 133, 219, 393, 134, 394,
	528, 135, 136, 137, 0, 529, 138, 222, 139, 0,
	140, 141, 142, 555, 143, 144, 0, 146, 147, 148,
	145, 149, 0, 150, 395, 151, 152, 495, 153, 0,
	154, 155, 156, 0, 225, 157, 158, 523, 159, 160,
	0, 161, 556, 227, 162, 0, 168, 163, 164, 165,
	167, 557, 166, 530, 0, 169, 0, 170, 171, 0,
	230, 558, 559, 0, 0, 172, 531, 532, 504, 173,
	174, 1858, 176, 0, 0, 177, 178, 179, 524, 0,
	180, 181, 182, 235, 560, 0, 0, 183, 0, 0,
	0, 0, 184, 185, 186, 187, 0, 0, 0, 0,
	1723, 0, 0, 0, 0, 0, 0, 478, 479, 0,
	0, 0, 0, 480, 0, 0, 487, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1078, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 598, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 75, 76, 603, 77, 604, 605, 606,
	607, 188, 608, 609, 610, 611, 78, 79, 189, 190,
	191, 192, 80, 193, 194, 612, 81, 195, 196, 82,
	613, 614, 197, 198, 199, 615, 200, 616, 383, 617,
	83, 84, 85, 889, 86, 618, 87, 88, 89, 619,
	384, 90, 91, 620, 621, 622, 623, 624, 625, 92,
	93, 94, 95, 201, 96, 202, 203, 626, 97, 627,
	98, 628, 629, 630, 99, 100, 631, 101, 632, 0,
	633, 204, 102, 103, 205, 634, 635, 636, 104, 105,
	206, 0, 106, 637, 107, 638, 639, 385, 640, 108,
	207, 641, 208, 642, 109, 110, 209, 210, 387, 643,
	113, 644, 111, 645, 386, 112, 211, 212, 213, 214,
	646, 215, 647, 388, 114, 389, 115, 116, 648, 649,
	216, 390, 117, 391, 650, 118, 651, 652, 119, 0,
	120, 121, 122, 123, 124, 392, 125, 126, 129, 127,
	653, 128, 654, 217, 130, 218, 131, 132, 655, 656,
	657, 658, 659, 133, 219, 393, 134, 394, 220, 135,
	136, 137, 660, 221, 138, 222, 139, 661, 140, 141,
	142, 223, 143, 144, 662, 146, 147, 148, 145, 149,
	663, 150, 395, 151, 152, 224, 153, 0, 154, 155,
	156, 664, 225, 157, 158, 665, 159, 160, 396, 161,
	226, 227, 162, 666, 168, 163, 164, 165, 167, 228,
	166, 229, 667, 169, 668, 170, 171, 669, 230, 231,
	232, 670, 671, 172, 233, 234, 672, 173, 174, 175,
	176, 673, 674, 177, 178, 179, 675, 676, 180, 181,
	182, 235, 236, 677, 678, 183, 679, 680, 681, 682,
	184, 185, 186, 187, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 598, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1497, 75, 76, 603, 77, 604, 605, 606, 607, 188,
	608, 609, 610, 611, 78, 79, 189, 190, 191, 192,
	80, 193, 194, 612, 81, 195, 196, 82, 613, 614,
	197, 198, 199, 615, 200, 616, 383, 617, 83, 84,
	85, 0, 86, 618, 87, 88, 89, 619, 384, 90,
	91, 620, 621, 622, 623, 624, 625, 92, 93, 94,
	95, 201, 96, 202, 203, 626, 97, 627, 98, 628,
	629, 630, 99, 100, 631, 101, 632, 0, 633, 204,
	102, 103, 205, 634, 635, 636, 104, 105, 206, 0,
	106, 637, 107, 638, 639, 385, 640, 108, 207, 641,
	208, 642, 109, 110, 209, 210, 387, 643, 113, 644,
	111, 645, 386, 112, 211, 212, 213, 214, 646, 215,
	647, 388, 114, 389, 115, 116, 648, 649, 216, 390,
	117, 391, 650, 118, 651, 652, 119, 0, 120, 121,
	122, 123, 124, 392, 125, 126, 129, 127, 653, 128,
	654, 217, 130, 218, 131, 132, 655, 656, 657, 658,
	659, 133, 219, 393, 134, 394, 220, 135, 136, 137,
	660, 221, 138, 222, 139, 661, 140, 141, 142, 223,
	143, 144, 662, 146, 147, 148, 145, 149, 663, 150,
	395, 151, 152, 224, 153, 0, 154, 155, 156, 664,
	225, 157, 158, 665, 159, 160, 396, 161, 226, 227,
	162, 666, 168, 163, 164, 165, 167, 228, 166, 229,
	667, 169, 668, 170, 171, 669, 230, 231, 232, 670,
	671, 172, 233, 234, 672, 173, 174, 175, 176, 673,
	674, 177, 178, 179, 675, 676, 180, 181, 182, 235,
	236, 677, 678, 183, 679, 680, 681, 682, 184, 185,
	186, 187, 598, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 597, 0, 0, 75, 76,
	603, 77, 604, 605, 606, 607, 188, 608, 609, 610,
	611, 78, 79, 189, 190, 191, 192, 80, 193, 194,
	612, 81, 195, 196, 82, 613, 614, 197, 198, 199,
	615, 200, 616, 383, 617, 83, 84, 85, 0, 86,
	618, 87, 88, 89, 619, 384, 90, 91, 620, 621,
	622, 623, 624, 625, 92, 93, 94, 95, 201, 96,
	202, 203, 626, 97, 627, 98, 628, 629, 630, 99,
	100, 631, 101, 632, 0, 633, 204, 102, 103, 205,
	634, 635, 636, 104, 105, 206, 0, 106, 637, 107,
	638, 639, 385, 640, 108, 207, 641, 208, 642, 109,
	110, 209, 210, 387, 643, 113, 644, 111, 645, 386,
	112, 211, 212, 213, 214, 646, 215, 647, 388, 114,
	389, 115, 116, 648, 649, 216, 390, 117, 391, 650,
	118, 651, 652, 119, 0, 120, 121, 122, 123, 124,
	392, 125, 126, 129, 127, 653, 128, 654, 217, 130,
	218, 131, 132, 655, 656, 657, 658, 659, 133, 219,
	393, 134, 394, 220, 135, 136, 137, 660, 221, 138,
	222, 139, 661, 140, 141, 142, 223, 143, 144, 662,
	146, 147, 148, 145, 149, 663, 150, 395, 151, 152,
	224, 153, 0, 154, 155, 156, 664, 225, 157, 158,
	665, 159, 160, 396, 161, 226, 227, 162, 666, 168,
	163, 164, 165, 167, 228, 166, 229, 667, 169, 668,
	170, 171, 669, 230, 231, 232, 670, 671, 172, 233,
	234, 672, 173, 174, 175, 176, 673, 674, 177, 178,
	179, 675, 676, 180, 181, 182, 235, 236, 677, 678,
	183, 679, 680, 681, 682, 184, 185, 186, 187, 510,
	499, 500, 497, 498, 486, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 76, 1146, 77, 0,
	0, 0, 0, 526, 492, 0, 0, 0, 78, 79,
	189, 540, 191, 541, 80, 542, 543, 0, 81, 195,
	196, 82, 507, 525, 544, 545, 199, 0, 536, 0,
	518, 0, 83, 84, 85, 0, 86, 0, 87, 88,
	89, 0, 384, 90, 91, 0, 519, 521, 0, 520,
	522, 92, 93, 94, 95, 546, 96, 547, 548, 0,
	97, 0, 98, 0, 1147, 0, 539, 100, 0, 101,
	0, 0, 0, 491, 102, 103, 527, 505, 0, 0,
	104, 105, 549, 0, 106, 0, 107, 0, 0, 385,
	0, 108, 537, 0, 208, 0, 109, 110, 533, 535,
	387, 0, 113, 0, 111, 0, 386, 112, 550, 551,
	552, 553, 0, 517, 0, 388, 114, 389, 115, 116,
	0, 0, 538, 390, 117, 391, 0, 118, 0, 0,
	119, 0, 120, 121, 122, 123, 124, 392, 125, 126,
	129, 127, 481, 128, 506, 534, 130, 554, 131, 132,
	0, 0, 0, 0, 0, 133, 219, 393, 134, 394,
	528, 135, 136, 137, 0, 529, 138, 222, 139, 0,
	140, 141, 142, 555, 143, 144, 0, 146, 147, 148,
	145, 149, 0, 150, 395, 151, 152, 495, 153, 0,
	154, 155, 156, 0, 225, 157, 158, 523, 159, 160,
	396, 161, 556, 227, 162, 0, 168, 163, 164, 165,
	167, 557, 166, 530, 0, 169, 0, 170, 171, 0,
	230, 558, 559, 0, 0, 172, 531, 532, 504, 173,
	174, 175, 176, 0, 0, 177, 178, 179, 524, 0,
	180, 181, 182, 235, 560, 1145, 0, 183, 0, 0,
	0, 0, 184, 185, 186, 187, 482, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 478, 479, 1148,
	0, 0, 0, 480, 0, 0, 487, 1143, 510, 499,
	500, 497, 498, 486, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 76, 0, 77, 0, 0,
	0, 0, 526, 492, 0, 0, 0, 78, 79, 189,
	540, 191, 541, 80, 542, 543, 0, 81, 195, 196,
	82, 507, 525, 544, 545, 199, 0, 536, 0, 518,
	0, 83, 84, 85, 0, 86, 0, 87, 88, 89,
	0, 384, 90, 91, 0, 519, 521, 0, 520, 522,
	92, 93, 94, 95, 546, 96, 547, 548, 575, 97,
	0, 98, 0, 0, 0, 539, 100, 0, 101, 0,
	0, 0, 491, 102, 103, 527, 505, 0, 0, 104,
	105, 549, 0, 106, 0, 107, 0, 0, 385, 0,
	108, 537, 0, 208, 0, 109, 110, 533, 535, 387,
	0, 113, 0, 111, 0, 386, 112, 550, 551, 552,
	553, 0, 517, 0, 388, 114, 389, 115, 116, 0,
	0, 538, 390, 117, 391, 0, 118, 0, 0, 119,
	0, 120, 121, 122, 123, 124, 392, 125, 126, 129,
	127, 481, 128, 506, 534, 130, 554, 131, 132, 0,
	0, 0, 0, 0, 133, 219, 393, 134, 394, 528,
	135, 136, 137, 0, 529, 138, 222, 139, 0, 140,
	141, 142, 555, 143, 144, 0, 146, 147, 148, 145,
	149, 0, 150, 395, 151, 152, 495, 153, 0, 154,
	155, 156, 62, 225, 157, 158, 523, 159, 160, 396,
	161, 556, 227, 162, 0, 168, 163, 164, 165, 167,
	557, 166, 530, 0, 169, 64, 170, 171, 0, 230,
	558, 559, 0, 0, 172, 531, 532, 504, 173, 174,
	175, 176, 0, 0, 177, 178, 179, 524, 0, 180,
	181, 182, 382, 560, 0, 0, 183, 0, 0, 0,
	60, 184, 185, 186, 187, 482, 61, 510, 499, 500,
	497, 498, 486, 0, 0, 0, 478, 479, 0, 0,
	0, 0, 480, 75, 76, 487, 77, 0, 0, 0,
	0, 526, 492, 0, 0, 0, 78, 79, 189, 540,
	191, 541, 80, 542, 543, 0, 81, 195, 196, 82,
	507, 525, 544, 545, 199, 0, 536, 0, 518, 0,
	83, 84, 85, 0, 86, 0, 87, 88, 89, 0,
	384, 90, 91, 0, 519, 521, 0, 520, 522, 92,
	93, 94, 95, 546, 96, 547, 548, 0, 97, 0,
	98, 0, 0, 0, 539, 100, 0, 101, 0, 0,
	0, 491, 102, 103, 527, 505, 0, 0, 104, 105,
	549, 0, 106, 0, 107, 0, 0, 385, 0, 108,
	537, 0, 208, 0, 109, 110, 533, 535, 387, 0,
	113, 0, 111, 0, 386, 112, 550, 551, 552, 553,
	0, 517, 0, 388, 114, 389, 115, 116, 0, 0,
	538, 390, 117, 391, 0, 118, 0, 0, 119, 0,
	120, 121, 122, 123, 124, 392, 125, 126, 129, 127,
	481, 128, 506, 534, 130, 554, 131, 132, 0, 0,
	0, 0, 0, 133, 219, 393, 134, 394, 528, 135,
	136, 137, 0, 529, 138, 222, 139, 0, 140, 141,
	142, 555, 143, 144, 0, 146, 147, 148, 145, 149,
	0, 150, 395, 151, 152, 495, 153, 0, 154, 155,
	156, 62, 225, 157, 158, 523, 159, 160, 396, 161,
	556, 227, 162, 0, 168, 163, 164, 165, 167, 557,
	166, 530, 0, 169, 64, 170, 171, 0, 230, 558,
	559, 0, 0, 172, 531, 532, 504, 173, 174, 175,
	176, 0, 0, 177, 178, 179, 524, 0, 180, 181,
	182, 382, 560, 0, 0, 183, 0, 0, 0, 60,
	184, 185, 186, 187, 482, 61, 510, 499, 500, 497,
	498, 486, 0, 0, 0, 478, 479, 0, 0, 0,
	0, 480, 75, 76, 487, 77, 0, 0, 0, 0,
	526, 492, 0, 0, 0, 78, 79, 189, 540, 191,
	541, 80, 542, 543, 1185, 81, 195, 196, 82, 507,
	525, 544, 545, 199, 0, 536, 0, 518, 0, 83,
	84, 85, 0, 86, 0, 87, 88, 89, 0, 384,
	90, 91, 0, 519, 521, 0, 520, 522, 92, 93,
	94, 95, 546, 96, 547, 548, 0, 97, 0, 98,
	0, 0, 0, 539, 100, 0, 101, 0, 0, 0,
	491, 102, 103, 527, 505, 0, 0, 104, 105, 549,
	0, 106, 0, 107, 0, 1190, 385, 0, 108, 537,
	0, 208, 0, 109, 110, 533, 535, 387, 0, 113,
	0, 111, 0, 386, 112, 550, 551, 552, 553, 0,
	517, 0, 388, 114, 389, 115, 116, 0, 1186, 538,
	390, 117, 391, 0, 118, 0, 0, 119, 0, 120,
	121, 122, 123, 124, 392, 125, 126, 129, 127, 481,
	128, 506, 534, 130, 554, 131, 132, 0, 0, 0,
	0, 0, 133, 219, 393, 134, 394, 528, 135, 136,
	137, 0, 529, 138, 222, 139, 0, 140, 141, 142,
	555, 143, 144, 0, 146, 147, 148, 145, 149, 0,
	150, 395, 151, 152, 495, 153, 0, 154, 155, 156,
	0, 225, 157, 158, 523, 159, 160, 396, 161, 556,
	227, 162, 0, 168, 163, 164, 165, 167, 557, 166,
	530, 0, 169, 0, 170, 171, 0, 230, 558, 559,
	0, 1187, 172, 531, 532, 504, 173, 174, 175, 176,
	0, 0, 177, 178, 179, 524, 0, 180, 181, 182,
	235, 560, 0, 0, 183, 0, 0, 0, 0, 184,
	185, 186, 187, 482, 0, 510, 499, 500, 497, 498,
	486, 0, 0, 0, 478, 479, 0, 0, 0, 0,
	480, 75, 76, 487, 77, 0, 0, 0, 0, 526,
	492, 0, 0, 0, 78, 79, 189, 540, 191, 541,
	80, 542, 543, 0, 81, 195, 196, 82, 507, 525,
	544, 545, 199, 0, 536, 0, 518, 0, 83, 84,
	85, 0, 86, 0, 87, 88, 89, 0, 384, 90,
	91, 0, 519, 521, 0, 520, 522, 92, 93, 94,
	95, 546, 96, 547, 548, 0, 97, 0, 98, 0,
	0, 0, 539, 100, 0, 101, 0, 0, 0, 491,
	102, 103, 527, 505, 0, 0, 104, 105, 549, 0,
	106, 0, 107, 0, 0, 385, 0, 108, 537, 0,
	208, 0, 109, 110, 533, 535, 387, 0, 113, 0,
	111, 0, 386, 112, 550, 551, 552, 553, 0, 517,
	0, 388, 114, 389, 115, 116, 0, 0, 538, 390,
	117, 391, 0, 118, 0, 0, 119, 0, 120, 121,
	122, 123, 124, 392, 125, 126, 129, 127, 481, 128,
	506, 534, 130, 554, 131, 132, 0, 0, 0, 0,
	0, 133, 219, 393, 134, 394, 528, 135, 136, 137,
	0, 529, 138, 222, 139, 0, 140, 141, 142, 555,
	143, 144, 0, 146, 147, 148, 145, 149, 0, 150,
	395, 151, 152, 495, 153, 0, 154, 155, 156, 0,
	225, 157, 158, 523, 159, 160, 396, 161, 556, 227,
	162, 0, 168, 163, 164, 165, 167, 557, 166, 530,
	0, 169, 0, 170, 171, 0, 230, 558, 559, 0,
	0, 172, 531, 532, 504, 173, 174, 175, 176, 0,
	0, 177, 178, 179, 524, 0, 180, 181, 182, 235,
	560, 0, 0, 183, 0, 0, 0, 0, 184, 185,
	186, 187, 482, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 478, 479, 0, 0, 0, 0, 480,
	0, 0, 487, 1564, 510, 499, 500, 497, 498, 486,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 76, 0, 77, 0, 0, 0, 0, 526, 492,
	0, 0, 0, 78, 79, 189, 540, 191, 541, 80,
	542, 543, 0, 81, 195, 196, 82, 507, 525, 544,
	545, 199, 0, 536, 0, 518, 0, 83, 84, 85,
	0, 86, 0, 87, 88, 89, 0, 384, 90, 91,
	0, 519, 521, 0, 520, 522, 92, 93, 94, 95,
	546, 96, 547, 548, 0, 97, 0, 98, 0, 0,
	0, 539, 100, 0, 101, 0, 0, 0, 491, 102,
	103, 527, 505, 0, 0, 104, 105, 549, 0, 106,
	0, 107, 0, 0, 385, 0, 108, 537, 0, 208,
	0, 109, 110, 533, 535, 387, 0, 113, 0, 111,
	0, 386, 112, 550, 551, 552, 553, 0, 517, 0,
	388, 114, 389, 115, 116, 0, 0, 538, 390, 117,
	391, 0, 118, 0, 0, 119, 0, 120, 121, 122,
	123, 124, 392, 125, 126, 129, 127, 481, 128, 506,
	534, 130, 554, 131, 132, 0, 0, 0, 0, 0,
	133, 219, 393, 134, 394, 528, 135, 136, 137, 0,
	529, 138, 222, 139, 0, 140, 141, 142, 555, 143,
	144, 0, 146, 147, 148, 145, 149, 0, 150, 395,
	151, 152, 495, 153, 0, 154, 155, 156, 0, 225,
	157, 158, 523, 159, 160, 396, 161, 556, 227, 162,
	0, 168, 163, 164, 165, 167, 557, 166, 530, 0,
	169, 0, 170, 171, 0, 230, 558, 559, 0, 0,
	172, 531, 532, 504, 173, 174, 175, 176, 0, 0,
	177, 178, 179, 524, 0, 180, 181, 182, 235, 560,
	0, 0, 183, 0, 0, 0, 0, 184, 185, 186,
	187, 482, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 478, 479, 0, 0, 0, 0, 480, 0,
	0, 487, 1513, 510, 499, 500, 497, 498, 486, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	76, 0, 77, 0, 0, 0, 0, 526, 492, 0,
	0, 0, 78, 79, 189, 540, 191, 541, 80, 542,
	543, 0, 81, 195, 196, 82, 507, 525, 544, 545,
	199, 0, 536, 0, 518, 0, 83, 84, 85, 0,
	86, 0, 87, 88, 89, 0, 384, 90, 91, 0,
	519, 521, 0, 520, 522, 92, 93, 94, 95, 546,
	96, 547, 548, 0, 97, 0, 98, 0, 0, 0,
	539, 100, 0, 101, 0, 0, 0, 491, 102, 103,
	527, 505, 0, 0, 104, 105, 549, 0, 106, 0,
	107, 0, 0, 385, 0, 108, 537, 0, 208, 0,
	109, 110, 533, 535, 387, 0, 113, 0, 111, 0,
	386, 112, 550, 551, 552, 553, 0, 517, 0, 388,
	114, 389, 115, 116, 0, 0, 538, 390, 117, 391,
	0, 118, 0, 0, 119, 0, 120, 121, 122, 123,
	124, 392, 125, 126, 129, 127, 481, 128, 506, 534,
	130, 554, 131, 132, 0, 0, 0, 0, 0, 133,
	219, 393, 134, 394, 528, 135, 136, 137, 0, 529,
	138, 222, 139, 0, 140, 141, 142, 555, 143, 144,
	0, 146, 147, 148, 145, 149, 0, 150, 395, 151,
	152, 495, 153, 0, 154, 155, 156, 0, 225, 157,
	158, 523, 159, 160, 396, 161, 556, 227, 162, 0,
	168, 163, 164, 165, 167, 557, 166, 530, 0, 169,
	0, 170, 171, 0, 230, 558, 559, 0, 0, 172,
	531, 532, 504, 173, 174, 175, 176, 0, 0, 177,
	178, 179, 524, 0, 180, 181, 182, 235, 560, 0,
	0, 183, 0, 0, 0, 0, 184, 185, 186, 187,
	482, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 480, 0, 0,
	487, 1142, 510, 499, 500, 497, 498, 486, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 75, 76,
	0, 77, 0, 0, 0, 0, 526, 492, 0, 0,
	0, 78, 79, 189, 540, 191, 541, 80, 542, 543,
	0, 81, 195, 196, 82, 507, 525, 544, 545, 199,
	0, 536, 0, 518, 0, 83, 84, 85, 0, 86,
	0, 87, 88, 89, 0, 384, 90, 91, 0, 519,
	521, 0, 520, 522, 92, 93, 94, 95, 546, 96,
	547, 548, 0, 97, 0, 98, 0, 0, 0, 539,
	100, 0, 101, 0, 0, 0, 491, 102, 103, 527,
	505, 0, 0, 104, 105, 549, 0, 106, 0, 107,
	0, 0, 385, 0, 108, 537, 0, 208, 0, 109,
	110, 533, 535, 387, 0, 113, 0, 111, 0, 386,
	112, 550, 551, 552, 553, 0, 517, 0, 388, 114,
	389, 115, 116, 0, 0, 538, 390, 117, 391, 0,
	118, 0, 0, 119, 0, 120, 121, 122, 123, 124,
	392, 125, 126, 129, 127, 481, 128, 506, 534, 130,
	554, 131, 132, 0, 0, 0, 0, 0, 133, 219,
	393, 134, 394, 528, 135, 136, 137, 0, 529, 138,
	222, 139, 0, 140, 141, 142, 555, 143, 144, 0,
	146, 147, 148, 145, 149, 0, 150, 395, 151, 152,
	495, 153, 0, 154, 155, 156, 0, 225, 157, 158,
	523, 159, 160, 396, 161, 556, 227, 162, 0, 168,
	163, 164, 165, 167, 557, 166, 530, 0, 169, 0,
	170, 171, 0, 230, 558, 559, 0, 0, 172, 531,
	532, 504, 173, 174, 175, 176, 0, 0, 177, 178,
	179, 524, 0, 180, 181, 182, 235, 560, 0, 0,
	183, 0, 0, 0, 0, 184, 185, 186, 187, 482,
	0, 0, 0, 0, 510, 499, 500, 497, 498, 486,
	478, 479, 0, 0, 0, 0, 480, 895, 1139, 487,
	75, 76, 0, 77, 0, 0, 0, 0, 526, 492,
	0, 0, 0, 78, 79, 189, 540, 191, 541, 80,
	542, 543, 0, 81, 195, 196, 82, 507, 525, 544,
	545, 199, 0, 536, 0, 518, 0, 83, 84, 85,
	0, 86, 0, 87, 88, 89, 0, 384, 90, 91,
	0, 519, 521, 0, 520, 522, 92, 93, 94, 95,
	546, 96, 547, 548, 0, 97, 0, 98, 0, 0,
	0, 539, 100, 0, 101, 0, 0, 0, 491, 102,
	103, 527, 505, 0, 0, 104, 105, 549, 0, 106,
	0, 107, 0, 0, 385, 0, 108, 537, 0, 208,
	0, 109, 110, 533, 535, 387, 0, 113, 0, 111,
	0, 386, 112, 550, 551, 552, 553, 0, 517, 0,
	388, 114, 389, 115, 116, 0, 0, 538, 390, 117,
	391, 0, 118, 0, 0, 119, 0, 120, 121, 122,
	123, 124, 392, 125, 126, 129, 127, 481, 128, 506,
	534, 130, 554, 131, 132, 0, 0, 0, 0, 0,
	133, 219, 393, 134, 394, 528, 135, 136, 137, 0,
	529, 138, 222, 139, 0, 140, 141, 142, 555, 143,
	144, 0, 146, 147, 148, 145, 149, 0, 150, 395,
	151, 152, 495, 153, 0, 154, 155, 156, 0, 225,
	157, 158, 523, 159, 160, 396, 161, 556, 227, 162,
	0, 168, 163, 164, 165, 167, 557, 166, 530, 0,
	169, 0, 170, 171, 0, 230, 558, 559, 0, 0,
	172, 531, 532, 504, 173, 174, 175, 176, 0, 0,
	177, 178, 179, 524, 0, 180, 181, 182, 235, 560,
	0, 0, 183, 0, 0, 0, 0, 184, 185, 186,
	187, 482, 0, 510, 499, 500, 497, 498, 486, 0,
	0, 0, 478, 479, 476, 0, 0, 0, 480, 75,
	76, 487, 77, 0, 0, 0, 0, 526, 492, 0,
	0, 0, 78, 79, 189, 540, 191, 541, 80, 542,
	543, 0, 81, 195, 196, 82, 507, 525, 544, 545,
	199, 0, 536, 0, 518, 0, 83, 84, 85, 0,
	86, 0, 87, 88, 89, 0, 384, 90, 91, 0,
	519, 521, 0, 520, 522, 92, 93, 94, 95, 546,
	96, 547, 548, 0, 97, 0, 98, 0, 0, 0,
	539, 100, 0, 101, 0, 0, 0, 491, 102, 103,
	527, 505, 0, 0, 104, 105, 549, 0, 106, 0,
	107, 0, 0, 385, 0, 108, 537, 0, 208, 0,
	109, 110, 533, 535, 387, 0, 113, 0, 111, 0,
	386, 112, 550, 551, 552, 553, 0, 517, 0, 388,
	114, 389, 115, 116, 0, 0, 538, 390, 117, 391,
	0, 118, 0, 0, 119, 0, 120, 121, 122, 123,
	124, 392, 125, 126, 129, 127, 481, 128, 506, 534,
	130, 554, 131, 132, 0, 0, 0, 0, 0, 133,
	219, 393, 134, 394, 528, 135, 136, 137, 0, 529,
	138, 222, 139, 0, 140, 141, 142, 555, 143, 144,
	0, 146, 147, 148, 145, 149, 0, 150, 395, 151,
	152, 495, 153, 0, 154, 155, 156, 0, 225, 157,
	158, 523, 159, 160, 396, 161, 556, 227, 162, 0,
	168, 163, 164, 165, 167, 557, 166, 530, 0, 169,
	0, 170, 171, 0, 230, 558, 559, 0, 0, 172,
	531, 532, 504, 173, 174, 175, 176, 0, 0, 177,
	178, 179, 524, 0, 180, 181, 182, 235, 560, 1518,
	0, 183, 0, 0, 0, 0, 184, 185, 186, 187,
	482, 0, 510, 499, 500, 497, 498, 486, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 480, 75, 76,
	487, 77, 0, 0, 0, 0, 526, 492, 0, 0,
	0, 78, 79, 189, 540, 191, 541, 80, 542, 543,
	0, 81, 195, 196, 82, 507, 525, 544, 545, 199,
	0, 536, 0, 518, 0, 83, 84, 85, 0, 86,
	0, 87, 88, 89, 0, 384, 90, 91, 0, 519,
	521, 0, 520, 522, 92, 93, 94, 95, 546, 96,
	547, 548, 575, 97, 0, 98, 0, 0, 0, 539,
	100, 0, 101, 0, 0, 0, 491, 102, 103, 527,
	505, 0, 0, 104, 105, 549, 0, 106, 0, 107,
	0, 0, 385, 0, 108, 537, 0, 208, 0, 109,
	110, 533, 535, 387, 0, 113, 0, 111, 0, 386,
	112, 550, 551, 552, 553, 0, 517, 0, 388, 114,
	389, 115, 116, 0, 0, 538, 390, 117, 391, 0,
	118, 0, 0, 119, 0, 120, 121, 122, 123, 124,
	392, 125, 126, 129, 127, 481, 128, 506, 534, 130,
	554, 131, 132, 0, 0, 0, 0, 0, 133, 219,
	393, 134, 394, 528, 135, 136, 137, 0, 529, 138,
	222, 139, 0, 140, 141, 142, 555, 143, 144, 0,
	146, 147, 148, 145, 149, 0, 150, 395, 151, 152,
	495, 153, 0, 154, 155, 156, 0, 225, 157, 158,
	523, 159, 160, 396, 161, 556, 227, 162, 0, 168,
	163, 164, 165, 167, 557, 166, 530, 0, 169, 0,
	170, 171, 0, 230, 558, 559, 0, 0, 172, 531,
	532, 504, 173, 174, 175, 176, 0, 0, 177, 178,
	179, 524, 0, 180, 181, 182, 235, 560, 0, 0,
	183, 0, 0, 0, 0, 184, 185, 186, 187, 482,
	0, 510, 499, 500, 497, 498, 486, 0, 0, 0,
	478, 479, 0, 0, 0, 0, 480, 75, 76, 487,
	77, 0, 0, 0, 0, 526, 492, 0, 0, 0,
	78, 79, 189, 540, 191, 541, 80, 542, 543, 0,
	81, 195, 196, 82, 507, 525, 544, 545, 199, 0,
	536, 0, 518, 0, 83, 84, 85, 0, 86, 0,
	87, 88, 89, 0, 384, 90, 91, 0, 519, 521,
	0, 520, 522, 92, 93, 94, 95, 546, 96, 547,
	548, 0, 97, 0, 98, 0, 0, 0, 539, 100,
	0, 101, 0, 0, 0, 491, 102, 103, 527, 505,
	0, 0, 104, 105, 549, 0, 106, 0, 107, 0,
	1190, 385, 0, 108, 537, 0, 208, 0, 109, 110,
	533, 535, 387, 0, 113, 0, 111, 0, 386, 112,
	550, 551, 552, 553, 0, 517, 0, 388, 114, 389,
	115, 116, 0, 0, 538, 390, 117, 391, 0, 118,
	0, 0, 119, 0, 120, 121, 122, 123, 124, 392,
	125, 126, 129, 127, 481, 128, 506, 534, 130, 554,
	131, 132, 0, 0, 0, 0, 0, 133, 219, 393,
	134, 394, 528, 135, 136, 137, 0, 529, 138, 222,
	139, 0, 140, 141, 142, 555, 143, 144, 0, 146,
	147, 148, 145, 149, 0, 150, 395, 151, 152, 495,
	153, 0, 154, 155, 156, 0, 225, 157, 158, 523,
	159, 160, 396, 161, 556, 227, 162, 0, 168, 163,
	164, 165, 167, 557, 166, 530, 0, 169, 0, 170,
	171, 0, 230, 558, 559, 0, 0, 172, 531, 532,
	504, 173, 174, 175, 176, 0, 0, 177, 178, 179,
	524, 0, 180, 181, 182, 235, 560, 0, 0, 183,
	0, 0, 0, 0, 184, 185, 186, 187, 482, 0,
	0, 0, 0, 510, 499, 500, 497, 498, 486, 478,
	479, 0, 0, 0, 0, 480, 0, 0, 487, 75,
	76, 829, 77, 0, 0, 0, 0, 526, 492, 0,
	0, 0, 78, 79, 189, 540, 191, 541, 80, 542,
	543, 0, 81, 195, 196, 82, 507, 525, 544, 545,
	199, 0, 536, 0, 518, 0, 83, 84, 85, 0,
	86, 0, 87, 88, 89, 0, 384, 90, 91, 0,
	519, 521, 0, 520, 522, 92, 93, 94, 95, 546,
	96, 547, 548, 0, 97, 0, 98, 0, 0, 0,
	539, 100, 0, 101, 0, 0, 0, 491, 102, 103,
	527, 505, 0, 0, 104, 105, 549, 0, 106, 0,
	107, 0, 0, 385, 0, 108, 537, 0, 208, 0,
	109, 110, 533, 535, 387, 0, 113, 0, 111, 0,
	386, 112, 550, 551, 552, 553, 0, 517, 0, 388,
	114, 389, 115, 116, 0, 0, 538, 390, 117, 391,
	0, 118, 0, 0, 119, 0, 120, 121, 122, 123,
	124, 392, 125, 126, 129, 127, 481, 128, 506, 534,
	130, 554, 131, 132, 0, 0, 0, 0, 0, 133,
	219, 393, 134, 394, 528, 135, 136, 137, 0, 529,
	138, 222, 139, 0, 140, 141, 142, 555, 143, 144,
	0, 146, 147, 148, 145, 149, 0, 150, 395, 151,
	152, 495, 153, 0, 154, 155, 156, 0, 225, 157,
	158, 523, 159, 160, 396, 161, 556, 227, 162, 0,
	168, 163, 164, 165, 167, 557, 166, 530, 0, 169,
	0, 170, 171, 0, 230, 558, 559, 0, 0, 172,
	531, 532, 504, 173, 174, 175, 176, 0, 0, 177,
	178, 179, 524, 0, 180, 181, 182, 235, 560, 0,
	0, 183, 0, 0, 0, 0, 184, 185, 186, 187,
	482, 0, 510, 499, 500, 497, 498, 486, 0, 0,
	0, 478, 479, 0, 0, 0, 0, 480, 75, 76,
	487, 77, 0, 0, 0, 0, 526, 492, 0, 0,
	0, 78, 79, 189, 540, 191, 541, 80, 542, 543,
	0, 81, 195, 196, 82, 507, 525, 544, 545, 199,
	0, 536, 0, 518, 0, 83, 84, 85, 0, 86,
	0, 87, 88, 89, 0, 384, 90, 1859, 0, 519,
	521, 0, 520, 522, 92, 93, 94, 95, 546, 96,
	547, 548, 0, 97, 0, 98, 0, 0, 0, 539,
	100, 0, 101, 0, 0, 0, 491, 102, 103, 527,
	505, 0, 0, 104, 105, 549, 0, 106, 0, 107,
	0, 0, 385, 0, 108, 537, 0, 208, 0, 109,
	110, 533, 535, 387, 0, 113, 0, 111, 0, 386,
	112, 550, 551, 552, 553, 0, 517, 0, 388, 114,
	389, 115, 116, 0, 0, 538, 390, 117, 391, 0,
	118, 0, 0, 119, 0, 120, 121, 122, 123, 124,
	392, 125, 126, 129, 127, 481, 128, 506, 534, 130,
	554, 131, 132, 0, 0, 0, 0, 0, 133, 219,
	393, 134, 394, 528, 135, 136, 137, 0, 529, 138,
	222, 139, 0, 140, 141, 142, 555, 143, 144, 0,
	146, 147, 148, 145, 149, 0, 150, 395, 151, 152,
	495, 153, 0, 154, 155, 156, 0, 225, 157, 158,
	523, 159, 160, 396, 161, 556, 227, 162, 0, 168,
	163, 164, 165, 167, 557, 166, 530, 0, 169, 0,
	170, 171, 0, 230, 558, 559, 0, 0, 172, 531,
	532, 504, 173, 174, 1858, 176, 0, 0, 177, 178,
	179, 524, 0, 180, 181, 182, 235, 560, 0, 0,
	183, 0, 0, 0, 0, 184, 185, 186, 187, 482,
	0, 510, 499, 500, 497, 498, 486, 0, 0, 0,
	478, 479, 0, 0, 0, 0, 480, 75, 76, 487,
	77, 0, 0, 0, 0, 526, 492, 0, 0, 0,
	78, 79, 1857, 540, 191, 541, 80, 542, 543, 0,
	81, 195, 196, 82, 507, 525, 544, 545, 199, 0,
	536, 0, 518, 0, 83, 84, 85, 0, 86, 0,
	87, 88, 89, 0, 384, 90, 1859, 0, 519, 521,
	0, 520, 522, 92, 93, 94, 95, 546, 96, 547,
	548, 0, 97, 0, 98, 0, 0, 0, 539, 100,
	0, 101, 0, 0, 0, 491, 102, 103, 527, 505,
	0, 0, 104, 105, 549, 0, 106, 0, 107, 0,
	0, 385, 0, 108, 537, 0, 208, 0, 109, 110,
	533, 535, 387, 0, 113, 0, 111, 0, 386, 112,
	550, 551, 552, 553, 0, 517, 0, 388, 114, 389,
	115, 116, 0, 0, 538, 390, 117, 391, 0, 118,
	0, 0, 119, 0, 120, 121, 122, 123, 124, 392,
	125, 126, 129, 127, 481, 128, 506, 534, 130, 554,
	131, 132, 0, 0, 0, 0, 0, 133, 219, 393,
	134, 394, 528, 135, 136, 137, 0, 529, 138, 222,
	139, 0, 140, 141, 142, 555, 143, 144, 0, 146,
	147, 148, 145, 149, 0, 150, 395, 151, 152, 495,
	153, 0, 154, 155, 156, 0, 225, 157, 158, 523,
	159, 160, 396, 161, 556, 227, 162, 0, 168, 163,
	164, 165, 167, 557, 166, 530, 0, 169, 0, 170,
	171, 0, 230, 558, 559, 0, 0, 172, 531, 532,
	504, 173, 174, 1858, 176, 0, 0, 177, 178, 179,
	524, 0, 180, 181, 182, 235, 560, 0, 0, 183,
	0, 0, 0, 0, 184, 185, 186, 187, 482, 0,
	510, 499, 500, 497, 498, 486, 0, 0, 0, 478,
	479, 0, 0, 0, 0, 480, 75, 76, 487, 77,
	0, 0, 0, 0, 526, 492, 0, 0, 0, 78,
	79, 189, 540, 191, 541, 80, 542, 543, 0, 81,
	195, 196, 82, 507, 525, 544, 545, 199, 0, 536,
	0, 518, 0, 83, 84, 85, 0, 86, 0, 87,
	88, 89, 0, 384, 90, 91, 0, 519, 521, 0,
	520, 522, 92, 93, 94, 95, 546, 96, 547, 548,
	0, 97, 0, 98, 0, 0, 0, 539, 100, 0,
	101, 0, 0, 0, 491, 102, 103, 527, 505, 0,
	0, 104, 105, 549, 0, 106, 0, 107, 0, 0,
	385, 0, 108, 537, 0, 208, 0, 109, 110, 533,
	535, 387, 0, 113, 0, 111, 0, 386, 112, 550,
	551, 552, 553, 0, 517, 0, 388, 114, 389, 115,
	116, 0, 0, 538, 390, 117, 391, 0, 118, 0,
	0, 119, 0, 120, 121, 122, 123, 124, 392, 125,
	126, 129, 127, 481, 128, 506, 534, 130, 554, 131,
	132, 0, 0, 0, 0, 0, 133, 219, 393, 134,
	394, 528, 135, 136, 137, 0, 529, 138, 222, 139,
	0, 140, 141, 142, 555, 143, 144, 0, 146, 147,
	148, 145, 149, 0, 150, 395, 151, 152, 495, 153,
	0, 154, 155, 156, 0, 225, 157, 158, 523, 159,
	160, 396, 161, 556, 227, 162, 0, 168, 163, 164,
	165, 167, 557, 166, 530, 0, 169, 0, 170, 171,
	0, 230, 558, 559, 0, 0, 172, 531, 532, 504,
	173, 174, 175, 176, 0, 0, 177, 178, 179, 524,
	0, 180, 181, 182, 235, 560, 0, 0, 183, 0,
	0, 0, 0, 184, 185, 186, 187, 482, 0, 510,
	499, 500, 497, 498, 486, 0, 0, 0, 478, 479,
	0, 0, 0, 0, 480, 75, 76, 487, 77, 0,
	0, 0, 0, 526, 492, 0, 0, 0, 78, 79,
	189, 540, 191, 541, 80, 542, 543, 0, 81, 195,
	196, 82, 507, 525, 544, 545, 199, 0, 536, 0,
	518, 0, 83, 84, 85, 0, 86, 0, 87, 88,
	89, 0, 384, 90, 91, 0, 519, 521, 0, 520,
	522, 92, 93, 94, 95, 546, 96, 547, 548, 0,
	97, 0, 98, 0, 0, 0, 539, 100, 0, 101,
	0, 0, 0, 491, 102, 103, 527, 505, 0, 0,
	104, 105, 549, 0, 106, 0, 107, 0, 0, 385,
	0, 108, 537, 0, 208, 0, 109, 110, 533, 535,
	387, 0, 113, 0, 111, 0, 386, 112, 550, 551,
	552, 553, 0, 517, 0, 388, 114, 389, 115, 116,
	0, 0, 538, 390, 117, 391, 0, 118, 0, 0,
	119, 0, 120, 121, 122, 123, 124, 392, 125, 126,
	129, 127, 0, 128, 506, 534, 130, 554, 131, 132,
	0, 0, 0, 0, 0, 133, 219, 393, 134, 394,
	528, 135, 136, 137, 0, 529, 138, 222, 139, 0,
	140, 141, 142, 555, 143, 144, 0, 146, 147, 148,
	145, 149, 0, 150, 395, 151, 152, 1180, 153, 0,
	154, 155, 156, 0, 225, 157, 158, 523, 159, 160,
	396, 161, 556, 227, 162, 0, 168, 163, 164, 165,
	167, 557, 166, 530, 0, 169, 0, 170, 171, 0,
	230, 558, 559, 0, 0, 172, 531, 532, 504, 173,
	174, 175, 176, 0, 0, 177, 178, 179, 524, 0,
	180, 181, 182, 235, 560, 0, 0, 183, 0, 0,
	0, 0, 184, 185, 186, 187, 0, 0, 510, 0,
	0, 0, 0, 0, 0, 0, 0, 1176, 1177, 0,
	0, 0, 0, 1178, 75, 76, 1179, 77, 0, 0,
	0, 0, 526, 0, 0, 0, 0, 78, 79, 189,
	190, 191, 192, 80, 193, 194, 0, 81, 195, 196,
	82, 0, 525, 197, 198, 199, 0, 536, 0, 518,
	0, 83, 84, 85, 0, 86, 0, 87, 88, 89,
	0, 384, 90, 91, 0, 519, 521, 0, 520, 522,
	92, 93, 94, 95, 201, 96, 202, 203, 0, 97,
	0, 98, 0, 0, 0, 99, 100, 0, 101, 0,
	0, 0, 204, 102, 103, 527, 0, 0, 0, 104,
	105, 206, 0, 106, 0, 107, 0, 0, 385, 0,
	108, 537, 0, 208, 0, 109, 110, 533, 535, 387,
	0, 113, 0, 111, 0, 386, 112, 211, 212, 213,
	214, 0, 215, 0, 388, 114, 389, 115, 116, 0,
	0, 538, 390, 117, 391, 0, 118, 0, 0, 119,
	0, 120, 121, 122, 123, 124, 392, 125, 126, 129,
	127, 0, 128, 0, 534, 130, 218, 131, 132, 0,
	0, 0, 0, 0, 133, 219, 393, 134, 394, 528,
	135, 136, 137, 0, 529, 138, 222, 139, 0, 140,
	141, 142, 223, 143, 144, 0, 146, 147, 148, 145,
	149, 0, 150, 395, 151, 152, 224, 153, 0, 154,
	155, 156, 0, 225, 157, 158, 523, 159, 160, 396,
	161, 226, 227, 162, 0, 168, 163, 164, 165, 167,
	228, 166, 530, 0, 169, 0, 170, 171, 0, 230,
	231, 232, 0, 0, 172, 531, 532, 0, 173, 174,
	175, 176, 0, 0, 177, 178, 179, 524, 0, 180,
	181, 182, 235, 236, 0, 0, 183, 378, 0, 0,
	0, 184, 185, 186, 187, 0, 0, 0, 0, 0,
	0, 0, 0, 75, 76, 0, 77, 0, 0, 0,
	0, 188, 0, 0, 0, 1630, 78, 79, 189, 190,
	191, 192, 80, 193, 194, 0, 81, 195, 196, 82,
	0, 0, 197, 198, 199, 0, 200, 0, 383, 0,
	83, 84, 85, 0, 86, 0, 87, 88, 89, 0,
	384, 90, 91, 0, 0, 0, 0, 0, 0, 92,
	93, 94, 95, 201, 96, 202, 203, 0, 97, 0,
	98, 0, 0, 0, 99, 100, 0, 101, 0, 0,
	0, 204, 102, 103, 205, 0, 0, 0, 104, 105,
	206, 0, 106, 0, 107, 0, 0, 385, 0, 108,
	207, 0, 208, 0, 109, 110, 209, 210, 387, 0,
	113, 0, 111, 0, 386, 112, 211, 212, 213, 214,
	0, 215, 0, 388, 114, 389, 115, 116, 0, 0,
	216, 390, 117, 391, 0, 118, 0, 0, 119, 0,
	120, 121, 122, 123, 124, 392, 125, 126, 129, 127,
	0, 128, 0, 217, 130, 218, 131, 132, 0, 0,
	0, 0, 0, 133, 219, 393, 134, 394, 220, 135,
	136, 137, 0, 221, 138, 222, 139, 0, 140, 141,
	142, 223, 143, 144, 0, 146, 147, 148, 145, 149,
	0, 150, 395, 151, 152, 224, 153, 0, 154, 155,
	156, 62, 225, 157, 158, 0, 159, 160, 396, 161,
	226, 227, 162, 0, 168, 163, 164, 165, 167, 228,
	166, 229, 0, 169, 64, 170, 171, 0, 230, 231,
	232, 0, 0, 172, 233, 234, 0, 173, 174, 175,
	176, 0, 0, 177, 178, 179, 0, 0, 180, 181,
	182, 382, 236, 0, 0, 183, 0, 0, 0, 60,
	184, 185, 186, 187, 0, 61, 378, 780, 0, 781,
	776, 771, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 76, 59, 77, 0, 0, 0, 0,
	188, 0, 0, 0, 0, 78, 79, 189, 190, 191,
	192, 80, 193, 194, 0, 81, 195, 196, 82, 0,
	0, 197, 198, 199, 0, 200, 0, 383, 0, 83,
	84, 85, 0, 86, 0, 87, 88, 89, 0, 384,
	90, 91, 0, 0, 0, 0, 0, 0, 92, 93,
	94, 95, 201, 96, 202, 203, 784, 97, 0, 98,
	0, 0, 0, 99, 100, 0, 101, 0, 0, 0,
	204, 102, 103, 205, 773, 0, 0, 104, 105, 206,
	0, 106, 0, 107, 0, 0, 385, 0, 108, 207,
	0, 208, 0, 109, 110, 209, 210, 387, 0, 113,
	0, 111, 0, 386, 112, 211, 212, 213, 214, 0,
	215, 0, 388, 114, 389, 115, 116, 0, 0, 216,
	390, 117, 391, 0, 118, 0, 0, 119, 0, 120,
	121, 122, 123, 124, 392, 125, 126, 129, 127, 0,
	128, 0, 217, 130, 218, 131, 132, 0, 774, 0,
	0, 0, 133, 219, 393, 134, 394, 220, 135, 136,
	137, 0, 221, 138, 222, 139, 0, 140, 141, 142,
	223, 143, 144, 0, 146, 147, 148, 145, 149, 0,
	150, 395, 151, 152, 224, 153, 0, 154, 155, 156,
	0, 225, 157, 158, 0, 159, 160, 396, 161, 226,
	227, 162, 0, 168, 163, 164, 165, 167, 228, 166,
	229, 0, 169, 0, 170, 171, 0, 230, 231, 232,
	0, 0, 172, 233, 234, 772, 173, 174, 175, 176,
	0, 0, 177, 178, 179, 0, 0, 180, 181, 182,
	235, 236, 378, 780, 183, 781, 776, 771, 0, 184,
	185, 186, 187, 0, 0, 0, 0, 0, 75, 76,
	0, 77, 0, 0, 782, 777, 188, 0, 0, 0,
	0, 78, 79, 189, 190, 191, 192, 80, 193, 194,
	0, 81, 195, 196, 82, 0, 0, 197, 198, 199,
	0, 200, 0, 383, 0, 83, 84, 85, 0, 86,
	0, 87, 88, 89, 0, 384, 90, 91, 0, 0,
	0, 0, 0, 0, 92, 93, 94, 95, 201, 96,
	202, 203, 767, 97, 0, 98, 0, 0, 0, 99,
	100, 0, 101, 0, 0, 0, 204, 102, 103, 205,
	773, 0, 0, 104, 105, 206, 0, 106, 0, 107,
	0, 0, 385, 0, 108, 207, 0, 208, 0, 109,
	110, 209, 210, 387, 0, 113, 0, 111, 0, 386,
	112, 211, 212, 213, 214, 0, 215, 0, 388, 114,
	389, 115, 116, 0, 0, 216, 390, 117, 391, 0,
	118, 0, 0, 119, 0, 120, 121, 122, 123, 124,
	392, 125, 126, 129, 127, 0, 128, 0, 217, 130,
	218, 131, 132, 0, 774, 0, 0, 0, 133, 219,
	393, 134, 394, 220, 135, 136, 137, 0, 221, 138,
	222, 139, 0, 140, 141, 142, 223, 143, 144, 0,
	146, 147, 148, 145, 149, 0, 150, 395, 151, 152,
	224, 153, 0, 154, 155, 156, 0, 225, 157, 158,
	0, 159, 160, 396, 161, 226, 227, 162, 0, 168,
	163, 164, 165, 167, 228, 166, 229, 0, 169, 0,
	170, 171, 0, 230, 231, 232, 0, 0, 172, 233,
	234, 772, 173, 174, 175, 176, 0, 0, 177, 178,
	179, 0, 0, 180, 181, 182, 235, 236, 378, 780,
	183, 781, 776, 771, 0, 184, 185, 186, 187, 0,
	0, 0, 0, 0, 75, 76, 0, 77, 0, 0,
	782, 777, 188, 0, 0, 0, 0, 78, 79, 189,
	190, 191, 192, 80, 193, 194, 0, 81, 195, 196,
	82, 0, 0, 197, 198, 199, 0, 200, 0, 383,
	0, 83, 84, 85, 0, 86, 0, 87, 88, 89,
	0, 384, 90, 91, 0, 0, 0, 0, 0, 0,
	92, 93, 94, 95, 201, 96, 202, 203, 0, 97,
	0, 98, 0, 0, 0, 99, 100, 0, 101, 0,
	0, 0, 204, 102, 103, 205, 773, 0, 0, 104,
	105, 206, 0, 106, 0, 107, 0, 0, 385, 0,
	108, 207, 0, 208, 0, 109, 110, 209, 210, 387,
	0, 113, 0, 111, 0, 386, 112, 211, 212, 213,
	214, 0, 215, 0, 388, 114, 389, 115, 116, 0,
	0, 216, 390, 117, 391, 0, 118, 0, 0, 119,
	0, 120, 121, 122, 123, 124, 392, 125, 126, 129,
	127, 0, 128, 0, 217, 130, 218, 131, 132, 0,
	774, 0, 0, 0, 133, 219, 393, 134, 394, 220,
	135, 136, 137, 0, 221, 138, 222, 139, 0, 140,
	141, 142, 223, 143, 144, 0, 146, 147, 148, 145,
	149, 0, 150, 395, 151, 152, 224, 153, 0, 154,
	155, 156, 0, 225, 157, 158, 0, 159, 160, 396,
	161, 226, 227, 162, 0, 168, 163, 164, 165, 167,
	228, 166, 229, 0, 169, 0, 170, 171, 0, 230,
	231, 232, 0, 0, 172, 233, 234, 772, 173, 174,
	175, 176, 0, 0, 177, 178, 179, 0, 0, 180,
	181, 182, 235, 236, 72, 0, 183, 0, 0, 0,
	0, 184, 185, 186, 187, 0, 0, 0, 0, 0,
	75, 76, 0, 77, 0, 0, 782, 777, 188, 0,
	0, 0, 0, 78, 79, 189, 190, 191, 192, 80,
	193, 194, 0, 81, 195, 196, 82, 0, 0, 197,
	198, 199, 0, 200, 0, 0, 0, 83, 84, 85,
	0, 86, 0, 87, 88, 89, 0, 0, 90, 91,
	0, 0, 0, 0, 0, 0, 92, 93, 94, 95,
	201, 96, 202, 203, 0, 97, 0, 98, 0, 0,
	0, 99, 100, 0, 101, 0, 0, 0, 204, 102,
	103, 205, 0, 0, 0, 104, 105, 206, 0, 106,
	0, 107, 0, 0, 0, 0, 108, 207, 0, 208,
	0, 109, 110, 209, 210, 0, 0, 113, 0, 111,
	0, 0, 112, 211, 212, 213, 214, 0, 215, 0,
	0, 114, 0, 115, 116, 0, 0, 216, 0, 117,
	0, 0, 118, 0, 0, 119, 0, 120, 121, 122,
	123, 124, 0, 125, 126, 129, 127, 0, 128, 0,
	217, 130, 218, 131, 132, 0, 0, 343, 0, 0,
	133, 219, 0, 134, 0, 220, 135, 136, 137, 0,
	221, 138, 222, 139, 0, 140, 141, 142, 223, 143,
	144, 0, 146, 147, 148, 145, 149, 0, 150, 0,
	151, 152, 224, 153, 0, 154, 155, 156, 62, 225,
	157, 158, 0, 159, 160, 0, 161, 226, 227, 162,
	0, 168, 163, 164, 165, 167, 228, 166, 229, 0,
	169, 64, 170, 171, 0, 230, 231, 232, 0, 0,
	172, 233, 234, 0, 173, 174, 175, 176, 0, 0,
	177, 178, 179, 0, 0, 180, 181, 182, 382, 236,
	0, 0, 183, 72, 0, 0, 60, 184, 185, 186,
	187, 0, 61, 0, 0, 0, 0, 0, 0, 75,
	76, 0, 77, 0, 0, 0, 0, 188, 0, 0,
	0, 1080, 78, 79, 189, 190, 191, 192, 80, 193,
	194, 0, 81, 195, 196, 82, 0, 0, 197, 198,
	199, 0, 200, 0, 0, 0, 83, 84, 85, 0,
	86, 0, 87, 88, 89, 0, 0, 90, 91, 0,
	0, 0, 0, 0, 0, 92, 93, 94, 95, 201,
	96, 202, 203, 0, 97, 0, 98, 0, 0, 0,
	99, 100, 0, 101, 0, 0, 0, 204, 102, 103,
	205, 0, 0, 0, 104, 105, 206, 0, 106, 0,
	107, 0, 0, 0, 0, 108, 207, 0, 208, 0,
	109, 110, 209, 210, 0, 0, 113, 0, 111, 0,
	0, 112, 211, 212, 213, 214, 0, 215, 0, 0,
	114, 0, 115, 116, 0, 0, 216, 0, 117, 0,
	0, 118, 0, 0, 119, 0, 120, 121, 122, 123,
	124, 0, 125, 126, 129, 127, 0, 128, 0, 217,
	130, 218, 131, 132, 0, 0, 0, 0, 0, 133,
	219, 0, 134, 0, 220, 135, 136, 137, 0, 221,
	138, 222, 139, 0, 140, 141, 142, 223, 143, 144,
	0, 146, 147, 148, 145, 149, 0, 150, 0, 151,
	152, 224, 153, 0, 154, 155, 156, 62, 225, 157,
	158, 0, 159, 160, 0, 161, 226, 227, 162, 0,
	168, 163, 164, 165, 167, 228, 166, 229, 0, 169,
	64, 170, 171, 0, 230, 231, 232, 0, 0, 172,
	233, 234, 0, 173, 174, 175, 176, 0, 0, 177,
	178, 179, 0, 0, 180, 181, 182, 382, 236, 0,
	0, 183, 72, 0, 0, 60, 184, 185, 186, 187,
	0, 61, 0, 0, 0, 0, 0, 0, 75, 76,
	0, 77, 0, 0, 0, 0, 188, 0, 1309, 0,
	59, 78, 79, 189, 190, 191, 192, 80, 193, 194,
	0, 81, 195, 196, 82, 0, 0, 197, 198, 199,
	0, 200, 0, 0, 0, 83, 84, 85, 0, 86,
	0, 87, 88, 89, 0, 0, 90, 91, 0, 0,
	0, 0, 0, 0, 92, 93, 94, 95, 201, 96,
	202, 203, 0, 97, 0, 98, 0, 0, 0, 99,
	100, 0, 101, 0, 0, 0, 204, 102, 103, 205,
	0, 0, 0, 104, 105, 206, 0, 106, 0, 107,
	0, 0, 0, 0, 108, 207, 0, 208, 0, 109,
	110, 209, 210, 0, 0, 113, 0, 111, 0, 0,
	112, 211, 212, 213, 214, 0, 215, 0, 0, 114,
	0, 115, 116, 0, 0, 216, 0, 117, 0, 0,
	118, 0, 0, 119, 0, 120, 121, 122, 123, 124,
	0, 125, 126, 129, 127, 0, 128, 0, 217, 130,
	218, 131, 132, 0, 0, 0, 0, 0, 133, 219,
	0, 134, 0, 220, 135, 136, 137, 0, 221, 138,
	222, 139, 0, 140, 141, 142, 223, 143, 144, 0,
	146, 147, 148, 145, 149, 0, 150, 0, 151, 152,
	224, 153, 0, 154, 155, 156, 0, 225, 157, 158,
	0, 159, 160, 0, 161, 226, 227, 162, 0, 168,
	163, 164, 165, 167, 228, 166, 229, 0, 169, 0,
	170, 171, 0, 230, 231, 232, 0, 0, 172, 233,
	234, 0, 173, 174, 175, 176, 0, 0, 177, 178,
	179, 0, 0, 180, 181, 182, 235, 236, 0, 0,
	183, 0, 72, 0, 0, 184, 185, 186, 187, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 75, 76,
	0, 77, 0, 0, 0, 0, 188, 0, 0, 0,
	468, 78, 79, 189, 190, 191, 192, 80, 193, 194,
	0, 81, 195, 196, 82, 0, 0, 197, 198, 199,
	0, 200, 0, 0, 0, 83, 84, 85, 0, 86,
	0, 87, 88, 89, 0, 0, 90, 91, 0, 0,
	0, 0, 0, 0, 92, 93, 94, 95, 201, 96,
	202, 203, 0, 97, 0, 98, 0, 0, 0, 99,
	100, 0, 101, 0, 0, 0, 204, 102, 103, 205,
	0, 0, 0, 104, 105, 206, 0, 106, 0, 107,
	0, 0, 0, 0, 108, 207, 0, 208, 0, 109,
	110, 209, 210, 0, 0, 113, 0, 111, 0, 0,
	112, 211, 212, 213, 214, 0, 215, 0, 0, 114,
	0, 115, 116, 0, 0, 216, 0, 117, 0, 0,
	118, 0, 0, 119, 0, 120, 121, 122, 123, 124,
	0, 125, 126, 129, 127, 0, 128, 0, 217, 130,
	218, 131, 132, 0, 0, 343, 0, 0, 133, 219,
	0, 134, 0, 220, 135, 136, 137, 0, 221, 138,
	222, 139, 0, 140, 141, 142, 223, 143, 144, 0,
	146, 147, 148, 145, 149, 0, 150, 0, 151, 152,
	224, 153, 0, 154, 155, 156, 0, 225, 157, 158,
	0, 159, 160, 0, 161, 226, 227, 162, 0, 168,
	163, 164, 165, 167, 228, 166, 229, 0, 169, 0,
	170, 171, 0, 230, 231, 232, 0, 0, 172, 233,
	234, 0, 173, 174, 175, 176, 0, 0, 177, 178,
	179, 0, 0, 180, 181, 182, 235, 236, 0, 0,
	183, 72, 0, 0, 0, 184, 185, 186, 187, 0,
	0, 0, 0, 0, 0, 0, 0, 75, 76, 0,
	77, 0, 0, 0, 0, 188, 0, 0, 0, 1080,
	78, 79, 189, 190, 191, 192, 80, 193, 194, 0,
	81, 195, 196, 82, 0, 0, 197, 198, 199, 0,
	200, 0, 0, 0, 83, 84, 85, 0, 86, 0,
	87, 88, 89, 0, 0, 90, 91, 0, 0, 0,
	0, 0, 0, 92, 93, 94, 95, 201, 96, 202,
	203, 0, 97, 0, 98, 0, 0, 0, 99, 100,
	0, 101, 0, 0, 0, 204, 102, 103, 205, 0,
	0, 0, 104, 105, 206, 0, 106, 0, 107, 0,
	0, 0, 0, 108, 207, 0, 208, 0, 109, 110,
	209, 210, 0, 0, 113, 0, 111, 0, 0, 112,
	211, 212, 213, 214, 0, 215, 0, 0, 114, 0,
	115, 116, 0, 0, 216, 0, 117, 0, 0, 118,
	0, 0, 119, 0, 120, 121, 122, 123, 124, 0,
	125, 126, 129, 127, 0, 128, 0, 217, 130, 218,
	131, 132, 0, 0, 0, 0, 0, 133, 219, 0,
	134, 0, 220, 135, 136, 137, 0, 221, 138, 222,
	139, 0, 140, 141, 142, 223, 143, 144, 0, 146,
	147, 148, 145, 149, 0, 150, 0, 151, 152, 224,
	153, 0, 154, 155, 156, 0, 225, 157, 158, 0,
	159, 160, 0, 161, 226, 227, 162, 0, 168, 163,
	164, 165, 167, 228, 166, 229, 0, 169, 0, 170,
	171, 0, 230, 231, 232, 0, 0, 172, 233, 234,
	0, 173, 174, 175, 176, 0, 0, 177, 178, 179,
	0, 0, 180, 181, 182, 235, 236, 0, 0, 183,
	0, 72, 0, 0, 184, 185, 186, 187, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 75, 76, 0,
	77, 0, 0, 0, 0, 188, 0, 0, 0, 591,
	78, 79, 189, 190, 191, 192, 80, 193, 194, 0,
	81, 195, 196, 82, 0, 0, 197, 198, 199, 0,
	200, 0, 0, 0, 83, 84, 85, 0, 86, 0,
	87, 88, 89, 0, 0, 90, 91, 0, 0, 0,
	0, 0, 0, 92, 93, 94, 95, 201, 96, 202,
	203, 0, 97, 0, 98, 0, 0, 0, 99, 100,
	0, 101, 0, 0, 0, 204, 102, 103, 205, 0,
	0, 0, 104, 105, 206, 0, 106, 0, 107, 0,
	0, 0, 0, 108, 207, 0, 208, 0, 109, 110,
	209, 210, 0, 0, 113, 0, 111, 0, 0, 112,
	211, 212, 213, 214, 0, 215, 0, 0, 114, 0,
	115, 116, 0, 0, 216, 0, 117, 0, 0, 118,
	0, 0, 119, 0, 120, 121, 122, 123, 124, 0,
	125, 126, 129, 127, 0, 128, 0, 217, 130, 218,
	131, 132, 0, 0, 0, 0, 0, 133, 219, 0,
	134, 0, 220, 135, 136, 137, 0, 221, 138, 222,
	139, 0, 140, 141, 142, 223, 143, 144, 0, 146,
	147, 148, 145, 149, 0, 150, 0, 151, 152, 224,
	153, 0, 154, 155, 156, 0, 225, 157, 158, 0,
	159, 160, 0, 161, 226, 227, 162, 0, 168, 163,
	164, 165, 167, 228, 166, 229, 0, 169, 0, 170,
	171, 0, 230, 231, 232, 0, 0, 172, 233, 234,
	0, 173, 174, 175, 176, 0, 0, 177, 178, 179,
	0, 0, 180, 181, 182, 235, 236, 0, 0, 183,
	72, 0, 0, 0, 184, 185, 186, 187, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 76, 0, 77,
	0, 0, 0, 0, 188, 0, 0, 0, 987, 78,
	79, 189, 190, 191, 192, 80, 193, 194, 0, 81,
	195, 196, 82, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 83, 84, 85, 0, 86, 0, 87,
	88, 89, 0, 0, 90, 91, 0, 0, 0, 0,
	0, 0, 92, 93, 94, 95, 201, 96, 202, 203,
	0, 97, 0, 98, 0, 0, 0, 99, 100, 0,
	101, 0, 0, 0, 204, 102, 103, 205, 0, 0,
	0, 104, 105, 206, 0, 106, 0, 107, 0, 0,
	0, 0, 108, 207, 0, 208, 0, 109, 110, 209,
	210, 0, 0, 113, 0, 111, 0, 0, 112, 211,
	212, 213, 214, 0, 215, 0, 0, 114, 0, 115,
	116, 0, 0, 216, 0, 117, 0, 0, 118, 0,
	0, 119, 0, 120, 121, 122, 123, 124, 0, 125,
	126, 129, 127, 0, 128, 0, 217, 130, 218, 131,
	132, 0, 0, 0, 0, 0, 133, 219, 0, 134,
	0, 220, 135, 136, 137, 0, 221, 138, 222, 139,
	0, 140, 141, 142, 223, 143, 144, 0, 146, 147,
	148, 145, 149, 0, 150, 0, 151, 152, 224, 153,
	0, 154, 155, 156, 0, 225, 157, 158, 0, 159,
	160, 0, 161, 226, 227, 162, 0, 168, 163, 164,
	165, 167, 228, 166, 229, 0, 169, 0, 170, 171,
	0, 230, 231, 232, 0, 0, 172, 233, 234, 0,
	173, 174, 175, 176, 0, 0, 177, 178, 179, 0,
	0, 180, 181, 182, 235, 236, 0, 0, 183, 72,
	0, 0, 0, 184, 185, 186, 187, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 76, 0, 77, 0,
	0, 0, 0, 188, 0, 0, 0, 1528, 78, 79,
	189, 190, 191, 192, 80, 193, 194, 0, 81, 195,
	196, 82, 0, 0, 197, 198, 199, 0, 200, 0,
	0, 0, 83, 84, 85, 0, 86, 0, 87, 88,
	89, 0, 0, 90, 91, 0, 0, 0, 0, 0,
	0, 92, 93, 94, 95, 201, 96, 202, 203, 0,
	97, 0, 98, 0, 0, 0, 99, 100, 0, 101,
	0, 0, 0, 204, 102, 103, 205, 0, 0, 0,
	104, 105, 206, 0, 106, 0, 107, 0, 0, 0,
	0, 108, 207, 0, 208, 0, 109, 110, 209, 210,
	0, 0, 113, 0, 111, 0, 0, 112, 211, 212,
	213, 214, 0, 215, 0, 0, 114, 0, 115, 116,
	0, 0, 216, 0, 117, 0, 0, 118, 0, 0,
	119, 0, 120, 121, 122, 123, 124, 0, 125, 126,
	129, 127, 0, 128, 0, 217, 130, 218, 131, 132,
	0, 0, 0, 0, 0, 133, 219, 0, 134, 0,
	220, 135, 136, 137, 0, 221, 138, 222, 139, 0,
	140, 141, 142, 223, 143, 144, 0, 146, 147, 148,
	145, 149, 0, 150, 0, 151, 152, 224, 153, 0,
	154, 155, 156, 0, 225, 157, 158, 0, 159, 160,
	0, 161, 226, 227, 162, 0, 168, 163, 164, 165,
	167, 228, 166, 229, 0, 169, 0, 170, 171, 0,
	230, 231, 232, 0, 0, 172, 233, 234, 0, 173,
	174, 175, 176, 0, 0, 177, 178, 179, 0, 0,
	180, 181, 182, 235, 236, 0, 0, 183, 72, 0,
	0, 0, 184, 185, 186, 187, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 76, 0, 77, 0, 0,
	0, 0, 188, 0, 0, 0, 571, 78, 79, 189,
	190, 191, 192, 80, 193, 194, 0, 81, 195, 196,
	82, 0, 0, 197, 198, 199, 0, 200, 0, 0,
	0, 83, 84, 85, 0, 86, 0, 87, 88, 89,
	0, 0, 90, 91, 0, 0, 0, 0, 0, 0,
	92, 93, 751, 95, 201, 96, 202, 203, 0, 97,
	0, 98, 0, 0, 0, 99, 100, 0, 101, 0,
	0, 0, 204, 102, 103, 205, 0, 0, 0, 104,
	105, 206, 0, 106, 0, 107, 0, 0, 0, 0,
	108, 207, 0, 208, 0, 109, 110, 209, 210, 0,
	0, 113, 0, 111, 0, 0, 112, 211, 212, 213,
	214, 0, 215, 0, 0, 114, 0, 115, 116, 0,
	0, 216, 0, 117, 0, 0, 118, 0, 0, 119,
	0, 120, 121, 122, 123, 124, 0, 125, 126, 129,
	127, 0, 128, 0, 217, 130, 218, 131, 132, 0,
	0, 0, 0, 0, 133, 219, 0, 134, 0, 220,
	135, 136, 137, 0, 221, 138, 222, 139, 0, 140,
	141, 142, 223, 143, 144, 0, 146, 147, 148, 145,
	149, 0, 150, 0, 151, 152, 224, 153, 0, 154,
	155, 156, 0, 225, 157, 158, 0, 159, 160, 0,
	161, 226, 227, 162, 0, 168, 163, 164, 165, 167,
	228, 166, 229, 0, 169, 750, 170, 171, 0, 230,
	231, 232, 0, 0, 172, 233, 234, 0, 173, 174,
	175, 176, 0, 0, 177, 178, 179, 0, 0, 180,
	181, 182, 235, 236, 0, 72, 183, 0, 0, 0,
	0, 184, 185, 186, 187, 0, 0, 0, 0, 0,
	0, 75, 76, 0, 77, 0, 0, 0, 754, 188,
	0, 0, 0, 0, 78, 79, 189, 190, 191, 192,
	80, 193, 194, 0, 81, 195, 196, 82, 0, 0,
	197, 198, 199, 0, 200, 0, 0, 0, 83, 84,
	85, 0, 86, 0, 87, 88, 89, 0, 0, 90,
	91, 0, 0, 0, 0, 0, 0, 92, 93, 94,
	95, 201, 96, 202, 203, 0, 97, 0, 98, 0,
	0, 0, 99, 100, 0, 101, 0, 0, 0, 204,
	102, 103, 205, 0, 0, 0, 104, 105, 206, 0,
	106, 0, 107, 0, 0, 0, 0, 108, 207, 0,
	208, 0, 109, 110, 209, 210, 0, 0, 113, 0,
	111, 0, 0, 112, 211, 212, 213, 214, 0, 215,
	0, 0, 114, 0, 115, 116, 0, 0, 216, 0,
	117, 0, 0, 118, 0, 0, 119, 0, 120, 121,
	122, 123, 124, 0, 125, 126, 129, 127, 0, 128,
	0, 217, 130, 218, 131, 132, 0, 0, 0, 0,
	0, 133, 219, 0, 134, 0, 220, 135, 136, 137,
	0, 221, 138, 222, 139, 0, 140, 141, 142, 223,
	143, 144, 0, 146, 147, 148, 145, 149, 0, 150,
	0, 151, 152, 224, 153, 0, 154, 155, 156, 0,
	225, 157, 158, 0, 159, 160, 0, 161, 226, 227,
	162, 0, 168, 163, 164, 165, 167, 228, 166, 229,
	0, 169, 0, 170, 171, 0, 230, 231, 232, 0,
	0, 172, 233, 234, 0, 173, 174, 175, 176, 0,
	0, 177, 178, 179, 0, 0, 180, 181, 182, 235,
	236, 0, 378, 183, 0, 0, 0, 0, 184, 185,
	186, 187, 0, 0, 0, 0, 0, 0, 75, 76,
	0, 77, 0, 0, 0, 754, 188, 0, 0, 0,
	0, 78, 79, 189, 190, 191, 192, 80, 193, 194,
	0, 81, 195, 196, 82, 0, 0, 197, 198, 199,
	0, 200, 0, 383, 0, 83, 84, 85, 0, 86,
	0, 87, 88, 89, 0, 384, 90, 91, 0, 0,
	0, 0, 0, 0, 92, 93, 94, 95, 201, 96,
	202, 203, 0, 97, 0, 98, 0, 0, 0, 99,
	100, 0, 101, 0, 0, 0, 204, 102, 103, 205,
	0, 0, 0, 104, 105, 206, 0, 106, 0, 107,
	0, 0, 385, 0, 108, 207, 0, 208, 0, 109,
	110, 209, 210, 387, 0, 113, 0, 111, 0, 386,
	112, 211, 212, 213, 214, 0, 215, 0, 388, 114,
	389, 115, 116, 0, 0, 216, 390, 117, 391, 0,
	118, 0, 0, 119, 0, 120, 121, 122, 123, 124,
	392, 125, 126, 129, 127, 0, 128, 0, 217, 130,
	218, 131, 132, 0, 0, 0, 0, 0, 133, 219,
	393, 134, 394, 220, 135, 136, 137, 0, 221, 138,
	222, 139, 0, 140, 141, 142, 223, 143, 144, 0,
	146, 147, 148, 145, 149, 0, 150, 395, 151, 152,
	224, 153, 0, 154, 155, 156, 0, 225, 157, 158,
	0, 159, 160, 396, 161, 226, 227, 162, 0, 168,
	163, 164, 165, 167, 228, 166, 229, 0, 169, 0,
	170, 171, 0, 230, 231, 232, 0, 0, 172, 233,
	234, 0, 173, 174, 175, 176, 0, 0, 177, 178,
	179, 0, 0, 180, 181, 182, 235, 236, 72, 0,
	183, 0, 0, 0, 0, 184, 185, 186, 187, 0,
	0, 0, 0, 0, 75, 76, 0, 77, 0, 0,
	0, 0, 188, 0, 0, 0, 0, 78, 79, 189,
	190, 191, 192, 80, 193, 194, 0, 81, 195, 196,
	82, 0, 0, 197, 198, 199, 953, 200, 0, 0,
	0, 83, 84, 85, 0, 86, 951, 87, 88, 89,
	0, 0, 90, 91, 0, 0, 0, 0, 0, 0,
	92, 93, 94, 95, 201, 96, 202, 203, 0, 97,
	0, 98, 0, 0, 0, 99, 100, 0, 101, 0,
	0, 0, 204, 102, 103, 205, 0, 1053, 0, 104,
	105, 206, 0, 106, 0, 107, 956, 0, 0, 0,
	108, 207, 0, 208, 0, 109, 110, 209, 210, 0,
	0, 113, 1051, 111, 0, 0, 112, 211, 212, 213,
	214, 0, 215, 0, 0, 114, 0, 115, 116, 0,
	0, 216, 0, 117, 0, 0, 118, 0, 0, 119,
	0, 120, 121, 122, 123, 124, 0, 125, 126, 129,
	127, 0, 128, 0, 217, 130, 218, 131, 132, 0,
	0, 0, 0, 0, 133, 219, 0, 134, 0, 220,
	135, 136, 137, 0, 221, 138, 222, 139, 955, 140,
	141, 142, 223, 143, 144, 0, 146, 147, 148, 145,
	149, 0, 150, 0, 151, 152, 224, 153, 0, 154,
	155, 156, 0, 225, 157, 158, 0, 159, 160, 0,
	161, 226, 227, 162, 0, 168, 163, 164, 165, 167,
	228, 166, 229, 0, 169, 0, 170, 171, 0, 230,
	231, 232, 0, 0, 172, 233, 234, 0, 173, 174,
	175, 176, 0, 1052, 177, 178, 179, 0, 0, 180,
	181, 182, 235, 236, 72, 0, 183, 0, 0, 0,
	0, 184, 185, 186, 187, 0, 0, 0, 0, 0,
	75, 76, 0, 77, 0, 0, 0, 0, 188, 0,
	0, 0, 0, 78, 79, 189, 190, 191, 192, 80,
	193, 194, 0, 81, 195, 196, 82, 0, 0, 197,
	198, 199, 953, 200, 0, 0, 948, 83, 84, 85,
	0, 86, 951, 87, 88, 89, 0, 0, 90, 91,
	0, 0, 0, 0, 0, 0, 92, 93, 94, 95,
	201, 96, 202, 203, 0, 97, 0, 98, 0, 0,
	0, 99, 100, 0, 101, 0, 0, 0, 204, 102,
	103, 205, 0, 0, 0, 104, 105, 206, 0, 106,
	0, 107, 956, 0, 0, 0, 108, 207, 0, 208,
	0, 109, 110, 947, 210, 0, 0, 113, 0, 111,
	0, 0, 112, 211, 212, 213, 214, 0, 215, 0,
	0, 114, 0, 115, 116, 0, 0, 216, 0, 117,
	0, 0, 118, 0, 0, 119, 0, 120, 121, 122,
	123, 124, 0, 125, 126, 129, 127, 0, 128, 0,
	217, 130, 218, 131, 132, 0, 0, 0, 0, 0,
	133, 219, 0, 134, 0, 220, 135, 136, 137, 0,
	221, 138, 222, 139, 955, 140, 141, 142, 223, 143,
	144, 0, 146, 147, 148, 145, 149, 0, 150, 0,
	151, 152, 224, 153, 0, 154, 155, 156, 0, 225,
	157, 158, 0, 159, 160, 0, 161, 226, 227, 162,
	0, 168, 163, 164, 165, 167, 228, 166, 229, 0,
	169, 0, 170, 171, 0, 230, 231, 232, 0, 0,
	172, 233, 234, 0, 173, 174, 175, 176, 0, 954,
	177, 178, 179, 0, 0, 180, 181, 182, 235, 236,
	72, 0, 183, 0, 0, 0, 0, 184, 185, 186,
	187, 0, 0, 0, 0, 0, 75, 76, 0, 77,
	0, 0, 0, 0, 188, 0, 1309, 0, 0, 78,
	79, 189, 190, 191, 192, 80, 193, 194, 0, 81,
	195, 196, 82, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 83, 84, 85, 0, 86, 0, 87,
	88, 89, 0, 0, 90, 91, 0, 0, 0, 0,
	0, 0, 92, 93, 94, 95, 201, 96, 202, 203,
	0, 97, 0, 98, 0, 0, 0, 99, 100, 0,
	101, 0, 0, 0, 204, 102, 103, 205, 0, 0,
	0, 104, 105, 206, 0, 106, 0, 107, 0, 0,
	0, 0, 108, 207, 0, 208, 0, 109, 110, 209,
	210, 0, 0, 113, 0, 111, 0, 0, 112, 211,
	212, 213, 214, 0, 215, 0, 0, 114, 0, 115,
	116, 0, 0, 216, 0, 117, 0, 0, 118, 0,
	0, 119, 0, 120, 121, 122, 123, 124, 0, 125,
	126, 129, 127, 0, 128, 0, 217, 130, 218, 131,
	132, 0, 0, 0, 0, 0, 133, 219, 0, 134,
	0, 220, 135, 136, 137, 0, 221, 138, 222, 139,
	0, 140, 141, 142, 223, 143, 144, 0, 146, 147,
	148, 145, 149, 0, 150, 0, 151, 152, 224, 153,
	0, 154, 155, 156, 0, 225, 157, 158, 0, 159,
	160, 0, 161, 226, 227, 162, 0, 168, 163, 164,
	165, 167, 228, 166, 229, 0, 169, 0, 170, 171,
	0, 230, 231, 232, 0, 0, 172, 233, 234, 0,
	173, 174, 175, 176, 0, 0, 177, 178, 179, 0,
	0, 180, 181, 182, 235, 236, 72, 0, 183, 0,
	0, 0, 0, 184, 185, 186, 187, 0, 0, 0,
	0, 0, 75, 76, 0, 77, 0, 0, 0, 0,
	188, 0, 0, 0, 0, 78, 79, 189, 190, 191,
	192, 80, 193, 194, 0, 81, 195, 196, 82, 0,
	0, 197, 198, 199, 0, 200, 0, 0, 0, 83,
	84, 85, 0, 86, 0, 87, 88, 89, 0, 0,
	90, 91, 0, 0, 0, 0, 0, 0, 92, 93,
	94, 95, 201, 96, 202, 203, 0, 97, 0, 98,
	0, 0, 0, 99, 100, 0, 101, 0, 0, 0,
	204, 102, 103, 205, 0, 0, 0, 104, 105, 206,
	0, 106, 0, 107, 0, 0, 0, 0, 108, 207,
	0, 208, 0, 109, 110, 209, 210, 0, 0, 113,
	0, 111, 0, 0, 112, 211, 212, 213, 214, 0,
	215, 0, 0, 114, 0, 115, 116, 0, 0, 216,
	0, 117, 0, 0, 118, 0, 0, 119, 0, 120,
	121, 122, 123, 124, 0, 125, 126, 129, 127, 0,
	128, 0, 217, 130, 218, 131, 132, 0, 0, 343,
	0, 0, 133, 219, 0, 134, 0, 220, 135, 136,
	137, 0, 221, 138, 222, 139, 0, 140, 141, 142,
	223, 143, 144, 0, 146, 147, 148, 145, 149, 0,
	150, 0, 151, 152, 224, 153, 0, 154, 155, 156,
	0, 225, 157, 158, 0, 159, 160, 0, 161, 226,
	227, 162, 0, 168, 163, 164, 165, 167, 228, 166,
	229, 0, 169, 0, 170, 171, 0, 230, 231, 232,
	0, 0, 172, 233, 234, 0, 173, 174, 175, 176,
	0, 0, 177, 178, 179, 0, 0, 180, 181, 182,
	235, 236, 72, 0, 183, 0, 0, 0, 0, 184,
	185, 186, 187, 0, 0, 0, 0, 0, 75, 76,
	0, 77, 0, 0, 0, 0, 188, 0, 0, 0,
	0, 78, 79, 189, 190, 191, 192, 80, 193, 194,
	0, 81, 195, 196, 82, 0, 0, 197, 198, 199,
	0, 200, 0, 0, 0, 83, 84, 85, 0, 86,
	0, 87, 88, 89, 0, 0, 90, 91, 0, 0,
	0, 0, 0, 0, 92, 93, 94, 95, 201, 96,
	202, 203, 0, 97, 0, 98, 0, 0, 0, 99,
	100, 0, 101, 0, 0, 0, 204, 102, 103, 205,
	0, 0, 0, 104, 105, 206, 0, 106, 0, 107,
	0, 0, 0, 0, 108, 207, 0, 208, 0, 109,
	110, 702, 210, 0, 0, 113, 0, 111, 0, 0,
	112, 211, 212, 213, 214, 0, 215, 0, 0, 114,
	0, 115, 116, 0, 0, 216, 0, 117, 0, 0,
	118, 0, 0, 119, 0, 120, 121, 122, 123, 124,
	0, 125, 126, 129, 127, 0, 128, 0, 217, 130,
	218, 131, 132, 0, 0, 343, 0, 0, 133, 219,
	0, 134, 0, 220, 135, 136, 137, 0, 221, 138,
	222, 139, 0, 140, 141, 142, 223, 143, 144, 0,
	146, 147, 148, 145, 149, 0, 150, 0, 151, 152,
	224, 153, 0, 154, 155, 156, 0, 225, 157, 158,
	0, 159, 160, 0, 161, 226, 227, 162, 0, 168,
	163, 164, 165, 167, 228, 166, 229, 0, 169, 0,
	170, 171, 0, 230, 231, 232, 0, 0, 172, 233,
	234, 0, 173, 174, 175, 176, 0, 0, 177, 178,
	179, 0, 0, 180, 181, 182, 235, 236, 72, 0,
	183, 0, 0, 0, 0, 184, 185, 186, 187, 0,
	0, 0, 0, 0, 75, 76, 403, 77, 0, 0,
	0, 0, 188, 0, 0, 0, 0, 78, 79, 189,
	190, 191, 192, 80, 193, 194, 0, 81, 195, 196,
	82, 0, 0, 197, 198, 199, 0, 200, 0, 0,
	0, 83, 84, 85, 0, 86, 0, 87, 88, 89,
	0, 0, 90, 91, 0, 0, 0, 0, 0, 0,
	92, 93, 94, 95, 201, 96, 202, 203, 0, 97,
	0, 98, 0, 0, 0, 99, 100, 0, 101, 0,
	0, 0, 204, 102, 103, 205, 0, 0, 0, 104,
	105, 206, 0, 106, 0, 107, 0, 0, 0, 0,
	108, 207, 0, 208, 0, 109, 110, 209, 210, 0,
	0, 113, 0, 111, 0, 0, 112, 211, 212, 213,
	214, 0, 215, 0, 0, 114, 0, 115, 116, 0,
	0, 216, 0, 117, 0, 0, 118, 0, 0, 119,
	0, 120, 121, 122, 123, 124, 0, 125, 126, 129,
	127, 0, 128, 0, 217, 130, 218, 131, 132, 0,
	0, 0, 0, 0, 133, 219, 0, 134, 0, 220,
	135, 136, 137, 0, 221, 138, 222, 139, 0, 140,
	141, 142, 223, 143, 144, 0, 146, 147, 148, 145,
	149, 0, 150, 0, 151, 152, 224, 153, 0, 154,
	155, 156, 0, 225, 157, 158, 0, 159, 160, 0,
	161, 226, 227, 162, 0, 168, 163, 164, 165, 167,
	228, 166, 229, 0, 169, 0, 170, 171, 0, 230,
	231, 232, 0, 0, 172, 233, 234, 0, 173, 174,
	175, 176, 0, 0, 177, 178, 179, 0, 0, 180,
	181, 182, 235, 236, 72, 0, 183, 0, 0, 0,
	0, 184, 185, 186, 187, 0, 0, 0, 0, 0,
	75, 76, 0, 77, 0, 0, 0, 0, 188, 0,
	0, 0, 0, 78, 79, 189, 190, 191, 192, 80,
	193, 194, 0, 81, 195, 196, 82, 0, 0, 197,
	198, 199, 0, 200, 0, 0, 0, 83, 84, 85,
	0, 86, 0, 87, 88, 89, 0, 0, 90, 91,
	0, 0, 0, 0, 0, 0, 92, 93, 94, 95,
	201, 96, 202, 203, 0, 97, 0, 98, 0, 0,
	0, 99, 100, 0, 101, 0, 0, 0, 204, 102,
	103, 205, 0, 0, 0, 104, 105, 206, 0, 106,
	0, 107, 0, 0, 0, 0, 108, 207, 0, 208,
	0, 109, 110, 348, 210, 0, 0, 113, 0, 111,
	0, 0, 112, 211, 212, 213, 214, 0, 215, 0,
	0, 114, 0, 115, 116, 0, 0, 216, 0, 117,
	0, 0, 118, 0, 0, 119, 0, 120, 121, 122,
	123, 124, 0, 125, 126, 129, 127, 0, 128, 0,
	217, 130, 218, 131, 132, 0, 0, 343, 0, 0,
	133, 219, 0, 134, 0, 220, 135, 136, 137, 0,
	221, 138, 222, 139, 0, 140, 141, 142, 223, 143,
	144, 0, 146, 147, 148, 145, 149, 0, 150, 0,
	151, 152, 224, 153, 0, 154, 155, 156, 0, 225,
	157, 158, 0, 159, 160, 0, 161, 226, 227, 162,
	0, 168, 163, 164, 165, 167, 228, 166, 229, 0,
	169, 0, 170, 171, 0, 230, 231, 232, 0, 0,
	172, 233, 234, 0, 173, 174, 175, 176, 0, 0,
	177, 178, 179, 0, 0, 180, 181, 182, 235, 236,
	72, 0, 183, 0, 0, 0, 0, 184, 185, 186,
	187, 0, 0, 0, 0, 0, 75, 76, 259, 77,
	0, 0, 0, 0, 188, 0, 0, 0, 0, 78,
	79, 189, 190, 191, 192, 80, 193, 194, 0, 81,
	195, 196, 82, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 83, 84, 85, 0, 86, 0, 87,
	88, 89, 0, 0, 90, 91, 0, 0, 0, 0,
	0, 0, 92, 93, 94, 95, 201, 96, 202, 203,
	0, 97, 0, 98, 0, 0, 0, 99, 100, 0,
	101, 0, 0, 0, 204, 102, 103, 205, 0, 0,
	0, 104, 105, 206, 0, 106, 0, 107, 0, 0,
	0, 0, 108, 207, 0, 208, 0, 109, 110, 209,
	210, 0, 0, 113, 0, 111, 0, 0, 112, 211,
	212, 213, 214, 0, 215, 0, 0, 114, 0, 115,
	116, 0, 0, 216, 0, 117, 0, 0, 118, 0,
	0, 119, 0, 120, 121, 122, 123, 124, 0, 125,
	126, 129, 127, 0, 128, 0, 217, 130, 218, 131,
	132, 0, 0, 0, 0, 0, 133, 219, 0, 134,
	0, 220, 135, 136, 137, 0, 221, 138, 222, 258,
	0, 140, 141, 142, 223, 143, 144, 0, 146, 147,
	148, 145, 149, 0, 150, 0, 151, 152, 224, 153,
	0, 154, 155, 156, 0, 225, 157, 158, 0, 159,
	160, 0, 161, 226, 227, 162, 0, 168, 163, 164,
	165, 167, 228, 166, 229, 0, 169, 0, 170, 171,
	0, 230, 231, 232, 0, 0, 172, 233, 234, 0,
	173, 174, 175, 176, 0, 0, 177, 178, 179, 0,
	0, 180, 181, 182, 235, 236, 72, 0, 183, 0,
	0, 0, 0, 184, 185, 186, 187, 0, 0, 0,
	0, 0, 75, 76, 0, 77, 0, 0, 0, 0,
	188, 0, 0, 0, 0, 78, 79, 189, 190, 191,
	192, 80, 193, 194, 0, 81, 195, 196, 82, 0,
	0, 197, 198, 199, 0, 200, 0, 0, 0, 83,
	84, 85, 0, 86, 0, 87, 88, 89, 0, 0,
	90, 91, 0, 0, 0, 0, 0, 0, 92, 93,
	94, 95, 201, 96, 202, 203, 0, 97, 0, 98,
	0, 0, 0, 99, 100, 0, 101, 0, 0, 0,
	204, 102, 103, 205, 0, 0, 0, 104, 105, 206,
	0, 106, 0, 107, 0, 0, 0, 0, 108, 207,
	0, 208, 0, 109, 110, 209, 210, 0, 0, 113,
	0, 111, 0, 0, 112, 211, 212, 213, 214, 0,
	215, 0, 0, 114, 0, 115, 116, 0, 0, 216,
	0, 117, 0, 0, 118, 0, 0, 119, 0, 120,
	121, 122, 123, 124, 0, 125, 126, 129, 127, 0,
	128, 0, 217, 130, 218, 131, 132, 0, 0, 0,
	0, 0, 133, 219, 0, 134, 0, 220, 135, 136,
	137, 0, 221, 138, 222, 139, 0, 140, 141, 142,
	223, 143, 144, 0, 146, 147, 148, 145, 149, 0,
	150, 0, 151, 152, 224, 153, 0, 154, 155, 156,
	0, 225, 157, 158, 0, 159, 160, 0, 161, 226,
	227, 162, 0, 168, 163, 164, 165, 167, 228, 166,
	229, 0, 169, 0, 170, 171, 0, 230, 231, 232,
	0, 0, 172, 233, 234, 0, 173, 174, 175, 176,
	0, 0, 177, 178, 179, 0, 0, 180, 181, 182,
	235, 236, 72, 0, 183, 0, 0, 0, 0, 184,
	185, 186, 187, 0, 0, 0, 0, 0, 75, 76,
	0, 77, 0, 0, 0, 0, 188, 0, 0, 0,
	0, 78, 79, 189, 190, 191, 192, 80, 193, 194,
	0, 81, 195, 196, 82, 0, 0, 197, 198, 199,
	0, 200, 0, 0, 0, 83, 84, 85, 0, 86,
	0, 87, 88, 89, 0, 0, 90, 91, 0, 0,
	0, 0, 0, 0, 92, 93, 94, 95, 201, 96,
	202, 203, 0, 97, 0, 98, 0, 0, 0, 99,
	100, 0, 101, 0, 0, 0, 204, 102, 103, 205,
	0, 0, 0, 104, 105, 206, 0, 106, 0, 107,
	0, 0, 0, 0, 108, 207, 0, 208, 0, 109,
	110, 1224, 210, 0, 0, 113, 0, 111, 0, 0,
	112, 211, 212, 213, 214, 0, 215, 0, 0, 114,
	0, 115, 116, 0, 0, 216, 0, 117, 0, 0,
	118, 0, 0, 119, 0, 120, 121, 122, 123, 124,
	0, 125, 126, 129, 127, 0, 128, 0, 217, 130,
	218, 131, 132, 0, 0, 0, 0, 0, 133, 219,
	0, 134, 0, 220, 135, 136, 137, 0, 221, 138,
	222, 139, 0, 140, 141, 142, 223, 143, 144, 0,
	146, 147, 148, 145, 149, 0, 150, 0, 151, 152,
	224, 153, 0, 154, 155, 156, 0, 225, 157, 158,
	0, 159, 160, 0, 161, 226, 227, 162, 0, 168,
	163, 164, 165, 167, 228, 166, 229, 0, 169, 0,
	170, 171, 0, 230, 231, 232, 0, 0, 172, 233,
	234, 0, 173, 174, 175, 176, 0, 0, 177, 178,
	179, 0, 0, 180, 181, 182, 235, 236, 72, 0,
	183, 0, 0, 0, 0, 184, 185, 186, 187, 0,
	0, 0, 0, 0, 75, 76, 0, 77, 0, 0,
	0, 0, 188, 0, 0, 0, 0, 78, 79, 189,
	190, 191, 192, 80, 193, 194, 0, 81, 195, 196,
	82, 0, 0, 197, 198, 199, 0, 200, 0, 0,
	0, 83, 84, 85, 0, 86, 0, 87, 88, 89,
	0, 0, 90, 91, 0, 0, 0, 0, 0, 0,
	92, 93, 94, 95, 201, 96, 202, 203, 0, 97,
	0, 98, 0, 0, 0, 99, 100, 0, 101, 0,
	0, 0, 204, 102, 103, 205, 0, 0, 0, 104,
	105, 206, 0, 106, 0, 107, 0, 0, 0, 0,
	108, 207, 0, 208, 0, 109, 110, 1222, 210, 0,
	0, 113, 0, 111, 0, 0, 112, 211, 212, 213,
	214, 0, 215, 0, 0, 114, 0, 115, 116, 0,
	0, 216, 0, 117, 0, 0, 118, 0, 0, 119,
	0, 120, 121, 122, 123, 124, 0, 125, 126, 129,
	127, 0, 128, 0, 217, 130, 218, 131, 132, 0,
	0, 0, 0, 0, 133, 219, 0, 134, 0, 220,
	135, 136, 137, 0, 221, 138, 222, 139, 0, 140,
	141, 142, 223, 143, 144, 0, 146, 147, 148, 145,
	149, 0, 150, 0, 151, 152, 224, 153, 0, 154,
	155, 156, 0, 225, 157, 158, 0, 159, 160, 0,
	161, 226, 227, 162, 0, 168, 163, 164, 165, 167,
	228, 166, 229, 0, 169, 0, 170, 171, 0, 230,
	231, 232, 0, 0, 172, 233, 234, 0, 173, 174,
	175, 176, 0, 0, 177, 178, 179, 0, 0, 180,
	181, 182, 235, 236, 72, 0, 183, 0, 0, 0,
	0, 184, 185, 186, 187, 0, 0, 0, 0, 0,
	75, 76, 0, 77, 0, 0, 0, 0, 188, 0,
	0, 0, 0, 78, 79, 189, 190, 191, 192, 80,
	193, 194, 0, 81, 195, 196, 82, 0, 0, 197,
	198, 199, 0, 200, 0, 0, 0, 83, 84, 85,
	0, 86, 0, 87, 88, 89, 0, 0, 90, 91,
	0, 0, 0, 0, 0, 0, 92, 93, 94, 95,
	201, 96, 202, 203, 0, 97, 0, 98, 0, 0,
	0, 99, 100, 0, 101, 0, 0, 0, 204, 102,
	103, 205, 0, 0, 0, 104, 105, 206, 0, 106,
	0, 107, 0, 0, 0, 0, 108, 207, 0, 208,
	0, 109, 110, 1213, 210, 0, 0, 113, 0, 111,
	0, 0, 112, 211, 212, 213, 214, 0, 215, 0,
	0, 114, 0, 115, 116, 0, 0, 216, 0, 117,
	0, 0, 118, 0, 0, 119, 0, 120, 121, 122,
	123, 124, 0, 125, 126, 129, 127, 0, 128, 0,
	217, 130, 218, 131, 132, 0, 0, 0, 0, 0,
	133, 219, 0, 134, 0, 220, 135, 136, 137, 0,
	221, 138, 222, 139, 0, 140, 141, 142, 223, 143,
	144, 0, 146, 147, 148, 145, 149, 0, 150, 0,
	151, 152, 224, 153, 0, 154, 155, 156, 0, 225,
	157, 158, 0, 159, 160, 0, 161, 226, 227, 162,
	0, 168, 163, 164, 165, 167, 228, 166, 229, 0,
	169, 0, 170, 171, 0, 230, 231, 232, 0, 0,
	172, 233, 234, 0, 173, 174, 175, 176, 0, 0,
	177, 178, 179, 0, 0, 180, 181, 182, 235, 236,
	72, 0, 183, 0, 0, 0, 0, 184, 185, 186,
	187, 0, 0, 0, 0, 0, 75, 76, 0, 77,
	0, 0, 0, 0, 188, 0, 0, 0, 0, 78,
	79, 189, 190, 191, 192, 80, 193, 194, 0, 81,
	195, 196, 82, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 83, 84, 85, 0, 86, 0, 87,
	88, 89, 0, 0, 90, 91, 0, 0, 0, 0,
	0, 0, 92, 93, 94, 95, 201, 96, 202, 203,
	0, 97, 0, 98, 0, 0, 0, 99, 100, 0,
	101, 0, 0, 0, 204, 102, 103, 205, 0, 0,
	0, 104, 105, 206, 0, 106, 0, 107, 0, 0,
	0, 0, 108, 207, 0, 208, 0, 109, 110, 819,
	210, 0, 0, 113, 0, 111, 0, 0, 112, 211,
	212, 213, 214, 0, 215, 0, 0, 114, 0, 115,
	116, 0, 0, 216, 0, 117, 0, 0, 118, 0,
	0, 119, 0, 120, 121, 122, 123, 124, 0, 125,
	126, 129, 127, 0, 128, 0, 217, 130, 218, 131,
	132, 0, 0, 0, 0, 0, 133, 219, 0, 134,
	0, 220, 135, 136, 137, 0, 221, 138, 222, 139,
	0, 140, 141, 142, 223, 143, 144, 0, 146, 147,
	148, 145, 149, 0, 150, 0, 151, 152, 224, 153,
	0, 154, 155, 156, 0, 225, 157, 158, 0, 159,
	160, 0, 161, 226, 227, 162, 0, 168, 163, 164,
	165, 167, 228, 166, 229, 0, 169, 0, 170, 171,
	0, 230, 231, 232, 0, 0, 172, 233, 234, 0,
	173, 174, 175, 176, 0, 0, 177, 178, 179, 0,
	0, 180, 181, 182, 235, 236, 72, 0, 183, 0,
	0, 0, 0, 184, 185, 186, 187, 0, 0, 0,
	0, 0, 75, 76, 0, 77, 0, 0, 0, 0,
	188, 0, 0, 0, 0, 78, 79, 189, 190, 191,
	192, 80, 193, 194, 0, 81, 195, 196, 82, 0,
	0, 197, 198, 199, 0, 200, 0, 0, 0, 83,
	84, 85, 0, 86, 0, 87, 88, 89, 0, 0,
	90, 91, 0, 0, 0, 0, 0, 0, 92, 93,
	94, 95, 201, 96, 202, 203, 0, 97, 0, 98,
	0, 0, 0, 99, 100, 0, 101, 0, 0, 0,
	204, 102, 103, 205, 0, 0, 0, 104, 105, 206,
	0, 106, 0, 107, 0, 0, 0, 0, 108, 207,
	0, 208, 0, 109, 110, 209, 210, 0, 0, 113,
	0, 111, 0, 0, 112, 211, 212, 213, 214, 0,
	215, 0, 0, 114, 0, 115, 116, 0, 0, 216,
	0, 117, 0, 0, 118, 0, 0, 119, 0, 120,
	121, 122, 123, 124, 0, 125, 126, 129, 127, 0,
	128, 0, 217, 130, 218, 131, 132, 0, 0, 0,
	0, 0, 133, 219, 0, 134, 0, 220, 135, 136,
	137, 0, 221, 138, 222, 139, 0, 140, 141, 142,
	223, 143, 144, 0, 146, 147, 148, 145, 149, 0,
	150, 0, 151, 152, 224, 153, 0, 273, 155, 156,
	0, 225, 157, 158, 0, 159, 160, 0, 161, 226,
	227, 162, 0, 168, 163, 164, 165, 167, 228, 166,
	229, 0, 169, 0, 170, 171, 0, 230, 231, 232,
	0, 0, 172, 233, 234, 0, 173, 174, 175, 176,
	0, 0, 177, 178, 179, 0, 0, 180, 181, 182,
	235, 236, 72, 0, 183, 0, 0, 0, 0, 184,
	185, 186, 187, 0, 0, 0, 0, 0, 75, 76,
	0, 77, 0, 0, 0, 0, 188, 0, 689, 0,
	0, 78, 79, 189, 190, 191, 192, 80, 193, 194,
	0, 81, 195, 196, 82, 0, 0, 197, 198, 199,
	0, 200, 0, 0, 0, 83, 84, 85, 0, 86,
	0, 87, 88, 89, 0, 0, 90, 91, 0, 0,
	0, 0, 0, 0, 92, 93, 94, 95, 201, 96,
	202, 203, 0, 97, 0, 98, 0, 0, 0, 99,
	100, 0, 101, 0, 0, 0, 204, 102, 103, 205,
	0, 0, 0, 104, 105, 206, 0, 106, 0, 107,
	0, 0, 0, 0, 108, 207, 0, 208, 0, 109,
	110, 209, 210, 0, 0, 113, 0, 111, 0, 0,
	112, 211, 212, 213, 214, 0, 215, 0, 0, 114,
	0, 115, 116, 0, 0, 216, 0, 117, 0, 0,
	118, 0, 0, 119, 0, 120, 121, 122, 123, 124,
	0, 125, 126, 129, 127, 0, 128, 0, 217, 130,
	218, 131, 132, 0, 0, 0, 0, 0, 133, 219,
	0, 134, 0, 220, 135, 136, 137, 0, 221, 138,
	222, 139, 0, 140, 141, 142, 223, 143, 144, 0,
	146, 147, 148, 145, 149, 0, 150, 0, 151, 152,
	224, 153, 0, 154, 155, 156, 0, 225, 157, 158,
	0, 0, 160, 0, 161, 226, 227, 162, 0, 168,
	163, 164, 165, 167, 228, 166, 229, 0, 169, 0,
	170, 171, 0, 230, 231, 232, 0, 0, 172, 233,
	234, 0, 173, 174, 175, 176, 0, 0, 177, 178,
	179, 0, 0, 180, 181, 182, 235, 236, 72, 0,
	183, 0, 0, 0, 0, 184, 185, 186, 187, 0,
	0, 0, 0, 0, 75, 76, 0, 77, 0, 0,
	0, 0, 188, 0, 0, 0, 0, 78, 79, 189,
	190, 191, 192, 80, 193, 194, 0, 81, 195, 196,
	82, 0, 0, 197, 198, 199, 0, 200, 0, 0,
	0, 83, 84, 85, 0, 86, 0, 87, 88, 89,
	0, 0, 90, 91, 0, 0, 0, 0, 0, 0,
	92, 93, 94, 95, 201, 96, 202, 203, 0, 97,
	0, 98, 0, 0, 0, 99, 100, 0, 101, 0,
	0, 0, 204, 102, 103, 205, 0, 0, 0, 104,
	105, 206, 0, 106, 0, 107, 0, 0, 0, 0,
	108, 207, 0, 208, 0, 109, 110, 453, 210, 0,
	0, 113, 0, 111, 0, 0, 112, 211, 212, 213,
	214, 0, 215, 0, 0, 114, 0, 115, 116, 0,
	0, 216, 0, 117, 0, 0, 118, 0, 0, 119,
	0, 120, 121, 122, 123, 124, 0, 125, 126, 129,
	127, 0, 128, 0, 217, 130, 218, 131, 132, 0,
	0, 0, 0, 0, 133, 219, 0, 134, 0, 220,
	135, 136, 137, 0, 221, 138, 222, 139, 0, 140,
	141, 142, 223, 143, 144, 0, 146, 147, 148, 145,
	149, 0, 150, 0, 151, 152, 224, 153, 0, 154,
	155, 156, 0, 225, 157, 158, 0, 159, 160, 0,
	161, 226, 227, 162, 0, 168, 163, 164, 165, 167,
	228, 166, 229, 0, 169, 0, 170, 171, 0, 230,
	231, 232, 0, 0, 172, 233, 234, 0, 173, 174,
	175, 176, 0, 0, 177, 178, 179, 0, 0, 180,
	181, 182, 235, 236, 72, 0, 183, 0, 0, 0,
	0, 184, 185, 186, 187, 0, 0, 0, 0, 0,
	75, 76, 0, 77, 0, 0, 0, 0, 188, 0,
	0, 0, 0, 78, 79, 189, 190, 191, 192, 80,
	193, 194, 0, 81, 195, 196, 82, 0, 0, 197,
	198, 199, 0, 200, 0, 0, 0, 83, 84, 85,
	0, 86, 0, 87, 88, 89, 0, 0, 90, 91,
	0, 0, 0, 0, 0, 0, 92, 93, 94, 95,
	201, 96, 202, 203, 0, 97, 0, 98, 0, 0,
	0, 99, 100, 0, 101, 0, 0, 0, 204, 102,
	103, 205, 0, 0, 0, 104, 105, 206, 0, 106,
	0, 107, 0, 0, 0, 0, 108, 207, 0, 208,
	0, 109, 110, 448, 210, 0, 0, 113, 0, 111,
	0, 0, 112, 211, 212, 213, 214, 0, 215, 0,
	0, 114, 0, 115, 116, 0, 0, 216, 0, 117,
	0, 0, 118, 0, 0, 119, 0, 120, 121, 122,
	123, 124, 0, 125, 126, 129, 127, 0, 128, 0,
	217, 130, 218, 131, 132, 0, 0, 0, 0, 0,
	133, 219, 0, 134, 0, 220, 135, 136, 137, 0,
	221, 138, 222, 139, 0, 140, 141, 142, 223, 143,
	144, 0, 146, 147, 148, 145, 149, 0, 150, 0,
	151, 152, 224, 153, 0, 154, 155, 156, 0, 225,
	157, 158, 0, 159, 160, 0, 161, 226, 227, 162,
	0, 168, 163, 164, 165, 167, 228, 166, 229, 0,
	169, 0, 170, 171, 0, 230, 231, 232, 0, 0,
	172, 233, 234, 0, 173, 174, 175, 176, 0, 0,
	177, 178, 179, 0, 0, 180, 181, 182, 235, 236,
	72, 0, 183, 0, 0, 0, 0, 184, 185, 186,
	187, 0, 0, 0, 0, 0, 75, 76, 0, 77,
	0, 0, 0, 0, 188, 0, 0, 0, 0, 78,
	79, 189, 190, 191, 192, 80, 193, 194, 0, 81,
	195, 196, 82, 0, 0, 197, 198, 409, 0, 200,
	0, 0, 0, 83, 84, 85, 0, 86, 0, 87,
	88, 89, 0, 0, 90, 91, 0, 0, 0, 0,
	0, 0, 92, 93, 94, 95, 201, 96, 202, 203,
	0, 97, 0, 98, 0, 0, 0, 99, 100, 0,
	101, 0, 0, 0, 204, 102, 103, 205, 0, 0,
	0, 104, 105, 206, 0, 106, 0, 107, 0, 0,
	0, 0, 108, 207, 0, 208, 0, 109, 110, 209,
	210, 0, 0, 113, 0, 111, 0, 0, 112, 211,
	212, 213, 214, 0, 215, 0, 0, 114, 0, 115,
	116, 0, 0, 216, 0, 117, 0, 0, 118, 0,
	0, 119, 0, 120, 121, 122, 123, 284, 0, 125,
	126, 129, 127, 0, 128, 0, 217, 130, 218, 131,
	132, 0, 0, 0, 0, 0, 133, 219, 0, 134,
	0, 220, 135, 136, 137, 0, 221, 138, 222, 139,
	0, 140, 141, 142, 223, 143, 144, 0, 146, 147,
	148, 145, 149, 0, 150, 0, 151, 152, 224, 153,
	0, 154, 155, 156, 0, 225, 157, 158, 0, 159,
	160, 0, 161, 226, 227, 162, 0, 168, 163, 164,
	165, 167, 228, 166, 229, 0, 169, 0, 170, 171,
	0, 283, 231, 232, 0, 0, 279, 233, 234, 0,
	173, 174, 175, 176, 0, 0, 177, 178, 179, 0,
	0, 180, 181, 182, 235, 236, 72, 0, 183, 0,
	0, 0, 0, 184, 185, 186, 187, 0, 0, 0,
	0, 0, 75, 76, 0, 77, 0, 0, 0, 0,
	188, 0, 0, 0, 0, 78, 79, 189, 190, 191,
	192, 80, 193, 194, 0, 81, 195, 196, 82, 0,
	0, 197, 198, 199, 0, 200, 0, 0, 0, 83,
	84, 85, 0, 86, 0, 87, 88, 89, 0, 0,
	90, 91, 0, 0, 0, 0, 0, 0, 92, 93,
	94, 95, 201, 96, 202, 203, 0, 97, 0, 98,
	0, 0, 0, 99, 100, 0, 101, 0, 0, 0,
	204, 102, 103, 205, 0, 0, 0, 104, 105, 206,
	0, 106, 0, 107, 0, 0, 0, 0, 108, 207,
	0, 208, 0, 109, 110, 209, 210, 0, 0, 113,
	0, 111, 0, 0, 112, 211, 212, 213, 214, 0,
	215, 0, 0, 114, 0, 115, 116, 0, 0, 216,
	0, 117, 0, 0, 118, 0, 0, 119, 0, 120,
	121, 122, 123, 284, 0, 125, 126, 129, 127, 0,
	128, 0, 217, 130, 218, 131, 132, 0, 0, 0,
	0, 0, 133, 219, 0, 134, 0, 220, 135, 136,
	137, 0, 221, 138, 222, 139, 0, 140, 141, 142,
	223, 143, 144, 0, 146, 147, 148, 145, 149, 0,
	150, 0, 151, 152, 224, 153, 0, 154, 155, 156,
	0, 225, 157, 158, 0, 159, 160, 0, 161, 226,
	227, 162, 0, 168, 163, 164, 165, 167, 228, 166,
	229, 0, 169, 0, 170, 171, 0, 283, 231, 232,
	0, 0, 279, 233, 234, 0, 173, 174, 175, 176,
	0, 0, 177, 178, 179, 0, 0, 180, 181, 182,
	235, 236, 72, 0, 183, 0, 0, 0, 0, 184,
	185, 186, 187, 0, 0, 0, 0, 0, 75, 76,
	0, 77, 0, 0, 0, 0, 188, 0, 0, 0,
	0, 78, 79, 189, 190, 191, 192, 80, 193, 194,
	0, 81, 195, 196, 82, 0, 0, 197, 198, 199,
	0, 200, 0, 0, 0, 83, 84, 85, 0, 86,
	0, 87, 88, 89, 0, 0, 90, 91, 0, 0,
	0, 0, 0, 0, 92, 93, 94, 95, 201, 96,
	202, 203, 0, 97, 0, 98, 0, 0, 0, 99,
	100, 0, 101, 0, 0, 0, 204, 102, 103, 205,
	0, 0, 0, 104, 105, 206, 0, 106, 0, 107,
	0, 0, 0, 0, 108, 207, 0, 208, 0, 109,
	110, 373, 210, 0, 0, 113, 0, 111, 0, 0,
	112, 211, 212, 213, 214, 0, 215, 0, 0, 114,
	0, 115, 116, 0, 0, 216, 0, 117, 0, 0,
	118, 0, 0, 119, 0, 120, 121, 122, 123, 124,
	0, 125, 126, 129, 127, 0, 128, 0, 217, 130,
	218, 131, 132, 0, 0, 0, 0, 0, 133, 219,
	0, 134, 0, 220, 135, 136, 137, 0, 221, 138,
	222, 139, 0, 140, 141, 142, 223, 143, 144, 0,
	146, 147, 148, 145, 149, 0, 150, 0, 151, 152,
	224, 153, 0, 154, 155, 156, 0, 225, 157, 158,
	0, 159, 160, 0, 161, 226, 227, 162, 0, 168,
	163, 164, 165, 167, 228, 166, 229, 0, 169, 0,
	170, 171, 0, 230, 231, 232, 0, 0, 172, 233,
	234, 0, 173, 174, 175, 176, 0, 0, 177, 178,
	179, 0, 0, 180, 181, 182, 235, 236, 72, 0,
	183, 0, 0, 0, 0, 184, 185, 186, 187, 0,
	0, 0, 0, 0, 75, 76, 0, 77, 0, 0,
	0, 0, 188, 0, 0, 0, 0, 78, 79, 189,
	190, 191, 192, 80, 193, 194, 0, 81, 195, 196,
	82, 0, 0, 197, 198, 199, 0, 200, 0, 0,
	0, 83, 84, 85, 0, 86, 0, 87, 88, 89,
	0, 0, 90, 91, 0, 0, 0, 0, 0, 0,
	92, 93, 94, 95, 201, 96, 202, 203, 0, 97,
	0, 98, 0, 0, 0, 99, 100, 0, 101, 0,
	0, 0, 204, 102, 103, 205, 0, 0, 0, 104,
	105, 206, 0, 106, 0, 107, 0, 0, 0, 0,
	108, 207, 0, 208, 0, 109, 110, 370, 210, 0,
	0, 113, 0, 111, 0, 0, 112, 211, 212, 213,
	214, 0, 215, 0, 0, 114, 0, 115, 116, 0,
	0, 216, 0, 117, 0, 0, 118, 0, 0, 119,
	0, 120, 121, 122, 123, 124, 0, 125, 126, 129,
	127, 0, 128, 0, 217, 130, 218, 131, 132, 0,
	0, 0, 0, 0, 133, 219, 0, 134, 0, 220,
	135, 136, 137, 0, 221, 138, 222, 139, 0, 140,
	141, 142, 223, 143, 144, 0, 146, 147, 148, 145,
	149, 0, 150, 0, 151, 152, 224, 153, 0, 154,
	155, 156, 0, 225, 157, 158, 0, 159, 160, 0,
	161, 226, 227, 162, 0, 168, 163, 164, 165, 167,
	228, 166, 229, 0, 169, 0, 170, 171, 0, 230,
	231, 232, 0, 0, 172, 233, 234, 0, 173, 174,
	175, 176, 0, 0, 177, 178, 179, 0, 0, 180,
	181, 182, 235, 236, 72, 0, 183, 0, 0, 0,
	0, 184, 185, 186, 187, 0, 0, 0, 0, 0,
	75, 76, 0, 77, 0, 0, 0, 0, 188, 0,
	0, 0, 0, 78, 79, 189, 190, 191, 192, 80,
	193, 194, 0, 81, 195, 196, 82, 0, 0, 197,
	198, 199, 0, 200, 0, 0, 0, 83, 84, 85,
	0, 86, 0, 87, 88, 89, 0, 0, 90, 91,
	0, 0, 0, 0, 0, 0, 92, 93, 94, 95,
	201, 96, 202, 203, 0, 97, 0, 98, 0, 0,
	0, 99, 100, 0, 101, 0, 0, 0, 204, 102,
	103, 205, 0, 0, 0, 104, 105, 206, 0, 106,
	0, 107, 0, 0, 0, 0, 108, 207, 0, 208,
	0, 109, 110, 368, 210, 0, 0, 113, 0, 111,
	0, 0, 112, 211, 212, 213, 214, 0, 215, 0,
	0, 114, 0, 115, 116, 0, 0, 216, 0, 117,
	0, 0, 118, 0, 0, 119, 0, 120, 121, 122,
	123, 124, 0, 125, 126, 129, 127, 0, 128, 0,
	217, 130, 218, 131, 132, 0, 0, 0, 0, 0,
	133, 219, 0, 134, 0, 220, 135, 136, 137, 0,
	221, 138, 222, 139, 0, 140, 141, 142, 223, 143,
	144, 0, 146, 147, 148, 145, 149, 0, 150, 0,
	151, 152, 224, 153, 0, 154, 155, 156, 0, 225,
	157, 158, 0, 159, 160, 0, 161, 226, 227, 162,
	0, 168, 163, 164, 165, 167, 228, 166, 229, 0,
	169, 0, 170, 171, 0, 230, 231, 232, 0, 0,
	172, 233, 234, 0, 173, 174, 175, 176, 0, 0,
	177, 178, 179, 0, 0, 180, 181, 182, 235, 236,
	72, 0, 183, 0, 0, 0, 0, 184, 185, 186,
	187, 0, 0, 0, 0, 0, 75, 76, 0, 77,
	0, 0, 0, 0, 188, 0, 0, 0, 0, 78,
	79, 189, 190, 191, 192, 80, 193, 194, 0, 81,
	195, 196, 82, 0, 0, 197, 198, 199, 0, 200,
	0, 0, 0, 83, 84, 85, 0, 86, 0, 87,
	88, 89, 0, 0, 90, 91, 0, 0, 0, 0,
	0, 0, 92, 93, 94, 95, 201, 96, 202, 203,
	0, 97, 0, 98, 0, 0, 0, 99, 100, 0,
	101, 0, 0, 0, 204, 102, 103, 205, 0, 0,
	0, 104, 105, 206, 0, 106, 0, 107, 0, 0,
	0, 0, 108, 207, 0, 208, 0, 109, 110, 351,
	210, 0, 0, 113, 0, 111, 0, 0, 112, 211,
	212, 213, 214, 0, 215, 0, 0, 114, 0, 115,
	116, 0, 0, 216, 0, 117, 0, 0, 118, 0,
	0, 119, 0, 120, 121, 122, 123, 124, 0, 125,
	126, 129, 127, 0, 128, 0, 217, 130, 218, 131,
	132, 0, 0, 0, 0, 0, 133, 219, 0, 134,
	0, 220, 135, 136, 137, 0, 221, 138, 222, 139,
	0, 140, 141, 142, 223, 143, 144, 0, 146, 147,
	148, 145, 149, 0, 150, 0, 151, 152, 224, 153,
	0, 154, 155, 156, 0, 225, 157, 158, 0, 159,
	160, 0, 161, 226, 227, 162, 0, 168, 163, 164,
	165, 167, 228, 166, 229, 0, 169, 0, 170, 171,
	0, 230, 231, 232, 0, 0, 172, 233, 234, 0,
	173, 174, 175, 176, 0, 0, 177, 178, 179, 0,
	0, 180, 181, 182, 235, 236, 72, 0, 183, 0,
	0, 0, 0, 184, 185, 186, 187, 0, 0, 0,
	0, 0, 75, 76, 0, 77, 0, 0, 0, 0,
	188, 0, 0, 0, 0, 78, 79, 189, 190, 191,
	192, 80, 193, 194, 0, 81, 195, 196, 82, 0,
	0, 197, 198, 199, 0, 200, 0, 0, 0, 83,
	84, 85, 0, 86, 0, 87, 88, 89, 0, 0,
	90, 91, 0, 0, 0, 0, 0, 0, 92, 93,
	94, 95, 201, 96, 202, 203, 0, 97, 0, 98,
	0, 0, 0, 99, 100, 0, 101, 0, 0, 0,
	204, 102, 103, 205, 0, 0, 0, 104, 105, 206,
	0, 106, 0, 107, 0, 0, 0, 0, 108, 207,
	0, 208, 0, 109, 110, 209, 210, 0, 0, 113,
	0, 111, 0, 0, 112, 211, 212, 213, 214, 0,
	215, 0, 0, 114, 0, 115, 116, 0, 0, 216,
	0, 117, 0, 0, 118, 0, 0, 119, 0, 120,
	121, 122, 123, 124, 0, 125, 126, 129, 127, 0,
	128, 0, 217, 130, 218, 131, 132, 0, 0, 0,
	0, 0, 133, 219, 0, 134, 0, 220, 135, 136,
	137, 0, 221, 138, 222, 139, 0, 140, 141, 142,
	223, 332, 144, 0, 146, 147, 148, 145, 149, 0,
	150, 0, 151, 152, 224, 153, 0, 154, 155, 156,
	0, 225, 157, 158, 0, 159, 160, 0, 161, 226,
	227, 162, 0, 168, 163, 164, 165, 167, 228, 166,
	229, 0, 169, 0, 170, 171, 0, 230, 231, 232,
	0, 0, 172, 233, 234, 0, 173, 174, 175, 176,
	0, 0, 177, 178, 179, 0, 0, 180, 181, 182,
	235, 236, 72, 0, 183, 0, 0, 0, 0, 184,
	185, 186, 187, 0, 0, 0, 0, 0, 75, 76,
	0, 77, 0, 0, 0, 0, 188, 0, 0, 0,
	0, 78, 79, 189, 190, 191, 192, 80, 193, 194,
	0, 81, 195, 196, 82, 0, 0, 197, 198, 199,
	0, 200, 0, 0, 0, 83, 84, 85, 0, 86,
	0, 87, 88, 89, 0, 0, 90, 91, 0, 0,
	0, 0, 0, 0, 92, 93, 94, 95, 201, 96,
	202, 203, 0, 97, 0, 98, 0, 0, 0, 99,
	100, 0, 101, 0, 0, 0, 204, 102, 103, 205,
	0, 0, 0, 104, 105, 206, 0, 106, 0, 107,
	0, 0, 0, 0, 108, 207, 0, 208, 0, 109,
	110, 209, 210, 0, 0, 113, 0, 111, 0, 0,
	112, 211, 212, 213, 214, 0, 215, 0, 0, 114,
	0, 115, 116, 0, 0, 216, 0, 117, 0, 0,
	276, 0, 0, 119, 0, 120, 121, 122, 123, 284,
	0, 125, 126, 129, 127, 0, 128, 0, 217, 130,
	218, 131, 132, 0, 0, 0, 0, 0, 133, 219,
	0, 134, 0, 220, 135, 136, 137, 0, 221, 138,
	222, 139, 0, 140, 141, 142, 223, 143, 144, 0,
	146, 147, 148, 145, 149, 0, 150, 0, 151, 152,
	278, 153, 0, 154, 155, 156, 0, 225, 157, 277,
	0, 159, 160, 0, 161, 226, 227, 162, 0, 168,
	163, 164, 165, 167, 228, 166, 229, 0, 169, 0,
	170, 171, 0, 283, 231, 232, 0, 0, 279, 233,
	234, 0, 173, 174, 175, 176, 0, 0, 177, 178,
	179, 0, 0, 180, 181, 182, 235, 236, 72, 0,
	183, 0, 0, 0, 0, 184, 185, 186, 187, 0,
	0, 0, 0, 0, 75, 76, 0, 77, 0, 0,
	0, 0, 188, 0, 0, 0, 0, 78, 79, 189,
	190, 191, 192, 80, 193, 194, 0, 81, 195, 196,
	82, 0, 0, 197, 198, 199, 0, 200, 0, 0,
	0, 83, 84, 85, 0, 86, 0, 87, 88, 89,
	0, 0, 90, 91, 0, 0, 0, 0, 0, 0,
	92, 93, 94, 95, 201, 96, 202, 203, 0, 97,
	0, 98, 0, 0, 0, 99, 100, 0, 101, 0,
	0, 0, 204, 102, 103, 205, 0, 0, 0, 104,
	105, 206, 0, 106, 0, 107, 0, 0, 0, 0,
	108, 207, 0, 208, 0, 109, 110, 209, 210, 0,
	0, 113, 0, 111, 0, 0, 112, 211, 212, 213,
	214, 0, 215, 0, 0, 114, 0, 115, 116, 0,
	0, 216, 0, 117, 0, 0, 118, 0, 0, 119,
	0, 120, 121, 122, 123, 124, 0, 125, 126, 129,
	127, 0, 128, 0, 217, 130, 218, 131, 132, 0,
	0, 0, 0, 0, 133, 219, 0, 134, 0, 220,
	135, 136, 0, 0, 221, 138, 222, 139, 0, 140,
	0, 142, 223, 143, 144, 0, 146, 147, 148, 145,
	149, 0, 150, 0, 151, 152, 224, 0, 0, 154,
	155, 156, 0, 225, 157, 158, 0, 159, 160, 0,
	161, 226, 227, 162, 0, 168, 163, 164, 165, 167,
	228, 166, 229, 0, 169, 0, 170, 171, 0, 230,
	231, 232, 0, 0, 172, 233, 234, 0, 173, 174,
	175, 176, 0, 0, 177, 178, 179, 0, 0, 180,
	181, 182, 235, 236, 0, 0, 183, 0, 0, 0,
	0, 184, 185, 186, 187, 845, 846, 0, 865, 866,
	867, 875, 876, 877, 0, 0, 0, 0, 0, 0,
	0, 868, 0, 0, 0, 0, 0, 0, 848, 0,
	879, 845, 846, 0, 865, 866, 867, 875, 876, 877,
	0, 0, 0, 0, 0, 0, 0, 868, 0, 847,
	0, 0, 0, 0, 848, 862, 879, 0, 0, 0,
	845, 846, 0, 865, 866, 867, 875, 876, 877, 0,
	0, 0, 0, 0, 0, 847, 868, 0, 0, 0,
	0, 862, 0, 848, 0, 879, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 853, 847, 0, 0, 0, 0, 0,
	862, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	872, 880, 0, 0, 0, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 878, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 870, 872, 880, 0, 0,
	0, 863, 0, 0, 0, 0, 0, 0, 853, 0,
	0, 878, 1365, 1366, 0, 1383, 1384, 1385, 0, 0,
	0, 870, 0, 869, 0, 872, 880, 863, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	878, 0, 0, 0, 0, 0, 0, 0, 0, 869,
	870, 0, 0, 0, 0, 0, 863, 0, 0, 864,
	0, 0, 1380, 0, 0, 0, 0, 0, 0, 0,
	873, 0, 0, 0, 0, 0, 0, 0, 869, 0,
	0, 0, 0, 0, 0, 864, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 873, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1371, 0, 0, 0, 864, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 873, 871, 0, 1387, 859,
	860, 861, 0, 858, 855, 856, 857, 849, 850, 851,
	852, 854, 1386, 874, 0, 0, 0, 0, 0, 0,
	1407, 0, 871, 0, 0, 859, 860, 861, 1381, 858,
	855, 856, 857, 849, 850, 851, 852, 854, 0, 874,
	0, 0, 0, 0, 1365, 1366, 1406, 1383, 1384, 1385,
	0, 871, 0, 0, 859, 860, 861, 0, 858, 855,
	856, 857, 849, 850, 851, 852, 854, 0, 874, 0,
	0, 0, 0, 845, 846, 1405, 865, 866, 867, 875,
	876, 877, 0, 0, 0, 0, 1382, 0, 0, 868,
	0, 0, 0, 0, 1380, 0, 848, 0, 879, 845,
	846, 0, 865, 866, 867, 875, 876, 877, 0, 0,
	0, 0, 0, 0, 0, 868, 0, 847, 0, 0,
	0, 0, 848, 862, 879, 0, 0, 0, 845, 846,
	0, 865, 866, 867, 875, 876, 877, 0, 0, 0,
	0, 0, 1371, 847, 868, 0, 0, 0, 0, 862,
	0, 848, 0, 879, 0, 0, 1377, 1378, 1379, 0,
	1376, 1373, 1374, 1375, 1367, 1368, 1369, 1370, 1372, 0,
	0, 853, 847, 0, 1386, 0, 0, 0, 862, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 872, 880,
	1381, 0, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 878, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 870, 872, 880, 0, 0, 0, 863,
	0, 0, 0, 0, 0, 0, 853, 0, 0, 878,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 870,
	0, 869, 0, 872, 880, 863, 0, 0, 1382, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 878, 0,
	0, 0, 0, 0, 0, 0, 0, 869, 870, 0,
	0, 0, 0, 0, 863, 0, 0, 864, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 873, 0,
	0, 0, 0, 0, 0, 0, 869, 0, 0, 0,
	0, 0, 0, 864, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 873, 0, 0, 0, 1377, 1378,
	1379, 0, 1376, 1373, 1374, 1375, 1367, 1368, 1369, 1370,
	1372, 0, 864, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 873, 871, 0, 0, 859, 860, 861,
	0, 858, 855, 856, 857, 849, 850, 851, 852, 854,
	0, 874, 0, 0, 0, 0, 0, 0, 1358, 0,
	871, 0, 0, 859, 860, 861, 0, 858, 855, 856,
	857, 849, 850, 851, 852, 854, 0, 874, 0, 0,
	0, 1810, 0, 0, 0, 0, 0, 0, 0, 871,
	0, 0, 859, 860, 861, 0, 858, 855, 856, 857,
	849, 850, 851, 852, 854, 0, 874, 0, 845, 846,
	1808, 865, 866, 867, 875, 876, 877, 0, 0, 0,
	0, 0, 0, 0, 868, 0, 0, 0, 0, 0,
	0, 848, 0, 879, 845, 846, 0, 865, 866, 867,
	875, 876, 877, 0, 0, 0, 0, 0, 0, 0,
	868, 0, 847, 0, 0, 0, 0, 848, 862, 879,
	0, 0, 0, 845, 846, 0, 865, 866, 867, 875,
	876, 877, 0, 0, 0, 0, 0, 0, 847, 868,
	0, 0, 0, 0, 862, 0, 848, 0, 879, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 853, 847, 0, 0,
	0, 0, 0, 862, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 872, 880, 0, 0, 0, 0, 0,
	0, 0, 853, 0, 0, 0, 0, 0, 878, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 870, 872,
	880, 0, 0, 0, 863, 0, 0, 0, 0, 0,
	0, 853, 0, 0, 878, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 870, 0, 869, 0, 872, 880,
	863, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 878, 0, 0, 0, 0, 0, 0,
	0, 0, 869, 870, 0, 0, 0, 0, 0, 863,
	0, 0, 864, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 873, 0, 0, 0, 0, 0, 0,
	0, 869, 0, 0, 0, 0, 0, 0, 864, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 873,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 864, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 873, 871,
	0, 0, 859, 860, 861, 0, 858, 855, 856, 857,
	849, 850, 851, 852, 854, 0, 874, 0, 0, 0,
	1789, 0, 0, 0, 0, 871, 0, 0, 859, 860,
	861, 0, 858, 855, 856, 857, 849, 850, 851, 852,
	854, 0, 874, 0, 0, 0, 1764, 0, 0, 0,
	0, 0, 0, 0, 871, 0, 0, 859, 860, 861,
	0, 858, 855, 856, 857, 849, 850, 851, 852, 854,
	0, 874, 0, 845, 846, 1759, 865, 866, 867, 875,
	876, 877, 0, 0, 0, 0, 0, 0, 0, 868,
	0, 0, 0, 0, 0, 0, 848, 0, 879, 845,
	846, 0, 865, 866, 867, 875, 876, 877, 0, 0,
	0, 0, 0, 0, 0, 868, 0, 847, 0, 0,
	0, 0, 848, 862, 879, 0, 0, 0, 845, 846,
	0, 865, 866, 867, 875, 876, 877, 0, 0, 0,
	0, 0, 0, 847, 868, 0, 0, 0, 0, 862,
	0, 848, 0, 879, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 853, 847, 0, 0, 0, 0, 0, 862, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 872, 880,
	0, 0, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 878, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 870, 872, 880, 0, 0, 0, 863,
	0, 0, 0, 0, 0, 0, 853, 0, 0, 878,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 870,
	0, 869, 0, 872, 880, 863, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 878, 0,
	0, 0, 0, 0, 0, 0, 0, 869, 870, 0,
	0, 0, 0, 0, 863, 0, 0, 864, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 873, 0,
	0, 0, 0, 0, 0, 0, 869, 0, 0, 0,
	0, 0, 0, 864, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 873, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 864, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 873, 871, 0, 0, 859, 860, 861,
	0, 858, 855, 856, 857, 849, 850, 851, 852, 854,
	0, 874, 0, 0, 0, 1755, 0, 0, 0, 0,
	871, 0, 0, 859, 860, 861, 0, 858, 855, 856,
	857, 849, 850, 851, 852, 854, 0, 874, 0, 0,
	0, 1691, 0, 0, 0, 0, 0, 0, 0, 871,
	0, 0, 859, 860, 861, 0, 858, 855, 856, 857,
	849, 850, 851, 852, 854, 0, 874, 0, 845, 846,
	1690, 865, 866, 867, 875, 876, 877, 0, 0, 0,
	0, 0, 0, 0, 868, 0, 0, 0, 0, 0,
	0, 848, 0, 879, 845, 846, 0, 865, 866, 867,
	875, 876, 877, 0, 0, 0, 0, 0, 0, 0,
	868, 0, 847, 0, 0, 0, 0, 848, 862, 879,
	0, 0, 0, 845, 846, 0, 865, 866, 867, 875,
	876, 877, 0, 0, 0, 0, 0, 0, 847, 868,
	0, 0, 0, 0, 862, 0, 848, 0, 879, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 853, 847, 0, 0,
	0, 0, 0, 862, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 872, 880, 0, 0, 0, 0, 0,
	0, 0, 853, 0, 0, 0, 0, 0, 878, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 870, 872,
	880, 0, 0, 0, 863, 0, 0, 0, 0, 0,
	0, 853, 0, 0, 878, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 870, 0, 869, 0, 872, 880,
	863, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 878, 0, 0, 0, 0, 0, 0,
	0, 0, 869, 870, 0, 0, 0, 0, 0, 863,
	0, 0, 864, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 873, 0, 0, 0, 0, 0, 0,
	0, 869, 0, 0, 0, 0, 0, 0, 864, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 873,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 864, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 873, 871,
	0, 0, 859, 860, 861, 0, 858, 855, 856, 857,
	849, 850, 851, 852, 854, 0, 874, 0, 0, 0,
	1597, 0, 0, 0, 0, 871, 0, 0, 859, 860,
	861, 0, 858, 855, 856, 857, 849, 850, 851, 852,
	854, 0, 874, 0, 0, 0, 1531, 0, 0, 0,
	0, 0, 0, 0, 871, 0, 0, 859, 860, 861,
	0, 858, 855, 856, 857, 849, 850, 851, 852, 854,
	0, 874, 0, 845, 846, 1515, 865, 866, 867, 875,
	876, 877, 0, 0, 0, 0, 0, 0, 0, 868,
	0, 0, 0, 0, 0, 0, 848, 0, 879, 845,
	846, 0, 865, 866, 867, 875, 876, 877, 0, 0,
	0, 0, 0, 0, 0, 868, 0, 847, 0, 0,
	0, 0, 848, 862, 879, 0, 0, 0, 845, 846,
	0, 865, 866, 867, 875, 876, 877, 0, 0, 0,
	0, 0, 0, 847, 868, 0, 0, 0, 0, 862,
	0, 848, 0, 879, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 853, 847, 0, 0, 0, 0, 0, 862, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 872, 880,
	0, 0, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 0, 878, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 870, 872, 880, 0, 0, 0, 863,
	0, 0, 0, 0, 0, 0, 853, 1878, 0, 878,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 870,
	0, 869, 0, 872, 880, 863, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 878, 0,
	0, 0, 0, 0, 0, 0, 0, 869, 870, 0,
	0, 0, 0, 0, 863, 0, 0, 864, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 873, 0,
	0, 0, 0, 0, 0, 0, 869, 0, 0, 0,
	0, 0, 0, 864, 0, 0, 0, 0, 0, 1877,
	0, 0, 0, 0, 873, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 864, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 873, 871, 0, 0, 859, 860, 861,
	0, 858, 855, 856, 857, 849, 850, 851, 852, 854,
	0, 874, 0, 0, 0, 1135, 0, 0, 0, 0,
	871, 0, 0, 859, 860, 861, 0, 858, 855, 856,
	857, 849, 850, 851, 852, 854, 0, 874, 0, 1444,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 871,
	0, 0, 859, 860, 861, 0, 858, 855, 856, 857,
	849, 850, 851, 852, 854, 0, 874, 845, 846, 0,
	865, 866, 867, 875, 876, 877, 0, 0, 0, 0,
	0, 0, 0, 868, 0, 0, 0, 0, 0, 0,
	848, 0, 879, 845, 846, 0, 865, 866, 867, 875,
	876, 877, 0, 0, 0, 0, 0, 0, 0, 868,
	0, 847, 0, 0, 1068, 0, 848, 862, 879, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 847, 0, 0,
	0, 0, 0, 862, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 853, 0, 1397, 0, 0,
	1396, 1069, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 872, 880, 0, 0, 0, 0, 0, 0,
	0, 853, 0, 0, 0, 0, 0, 878, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 870, 872, 880,
	0, 0, 0, 863, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 878, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 870, 0, 869, 0, 0, 0, 863,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 869, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 864, 0, 0, 0, 0, 0, 0, 882, 0,
	0, 0, 873, 0, 845, 846, 0, 865, 866, 867,
	875, 876, 877, 0, 0, 0, 0, 864, 0, 0,
	868, 0, 0, 0, 881, 0, 0, 848, 873, 879,
	845, 846, 0, 865, 866, 867, 875, 876, 877, 0,
	0, 0, 0, 0, 0, 0, 868, 0, 847, 0,
	0, 0, 0, 848, 862, 879, 0, 0, 871, 0,
	0, 859, 860, 861, 0, 858, 855, 856, 857, 849,
	850, 851, 852, 854, 847, 874, 0, 0, 0, 0,
	862, 0, 0, 0, 871, 0, 0, 859, 860, 861,
	0, 858, 855, 856, 857, 849, 850, 851, 852, 854,
	0, 874, 853, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 872,
	880, 0, 0, 0, 0, 0, 0, 0, 853, 0,
	0, 0, 0, 0, 878, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 870, 872, 880, 0, 0, 0,
	863, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	878, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	870, 0, 869, 0, 0, 0, 863, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 869, 327,
	0, 0, 0, 0, 0, 0, 0, 0, 864, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 873,
	0, 845, 846, 0, 865, 866, 867, 875, 876, 877,
	0, 0, 0, 0, 864, 0, 0, 868, 0, 0,
	0, 0, 0, 0, 848, 873, 879, 845, 846, 0,
	865, 866, 867, 875, 876, 877, 0, 0, 0, 0,
	0, 0, 0, 868, 0, 847, 0, 0, 0, 0,
	848, 862, 879, 0, 0, 871, 0, 0, 859, 860,
	861, 0, 858, 855, 856, 857, 849, 850, 851, 852,
	854, 847, 874, 0, 0, 0, 0, 862, 0, 0,
	0, 871, 0, 0, 859, 860, 861, 0, 858, 855,
	856, 857, 849, 850, 851, 852, 854, 0, 874, 853,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 872, 880, 0, 0,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 0,
	1403, 878, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 870, 872, 880, 0, 0, 0, 863, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 878, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 870, 0, 869,
	0, 0, 0, 863, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 869, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 864, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 873, 0, 845, 846,
	0, 865, 866, 867, 875, 876, 877, 0, 0, 0,
	0, 864, 0, 0, 868, 1525, 0, 0, 1398, 0,
	0, 848, 873, 879, 845, 846, 0, 865, 866, 867,
	875, 876, 877, 0, 0, 0, 0, 0, 0, 0,
	868, 0, 847, 0, 0, 0, 0, 848, 862, 879,
	0, 0, 871, 0, 0, 859, 860, 861, 0, 858,
	855, 856, 857, 849, 850, 851, 852, 854, 847, 874,
	0, 0, 0, 0, 862, 0, 0, 0, 871, 0,
	0, 859, 860, 861, 0, 858, 855, 856, 857, 849,
	850, 851, 852, 854, 0, 874, 853, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 872, 880, 0, 0, 0, 0, 0,
	0, 0, 853, 0, 0, 0, 0, 0, 878, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 870, 872,
	880, 0, 0, 0, 863, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 878, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 870, 0, 869, 0, 0, 0,
	863, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 869, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 864, 1363, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 873, 0, 845, 846, 0, 865, 866,
	867, 875, 876, 877, 0, 0, 0, 0, 864, 0,
	0, 868, 0, 0, 0, 1357, 0, 0, 848, 873,
	879, 845, 846, 0, 865, 866, 867, 875, 876, 877,
	0, 0, 0, 0, 0, 0, 0, 868, 0, 847,
	0, 0, 0, 0, 848, 862, 879, 0, 0, 871,
	0, 0, 859, 860, 861, 0, 858, 855, 856, 857,
	849, 850, 851, 852, 854, 847, 874, 0, 0, 0,
	0, 862, 0, 0, 0, 871, 0, 0, 859, 860,
	861, 0, 858, 855, 856, 857, 849, 850, 851, 852,
	854, 0, 874, 853, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	872, 880, 0, 0, 0, 0, 0, 0, 0, 853,
	0, 0, 0, 0, 0, 878, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 870, 872, 880, 0, 0,
	0, 863, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 878, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 870, 0, 869, 0, 0, 0, 863, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 869,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 864,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	873, 0, 845, 846, 0, 865, 866, 867, 875, 876,
	877, 0, 0, 0, 0, 864, 0, 0, 868, 0,
	0, 0, 0, 0, 0, 848, 873, 879, 845, 846,
	0, 865, 866, 867, 875, 876, 877, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 847, 0, 0, 0,
	0, 848, 862, 879, 0, 0, 871, 0, 0, 859,
	860, 861, 0, 858, 855, 856, 857, 849, 850, 851,
	852, 854, 847, 874, 0, 0, 0, 0, 862, 0,
	0, 0, 871, 0, 0, 859, 860, 861, 0, 858,
	855, 856, 857, 849, 850, 851, 852, 854, 0, 874,
	853, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 845, 846, 872, 880, 0,
	0, 875, 876, 877, 0, 0, 853, 0, 0, 0,
	0, 0, 878, 0, 0, 0, 0, 0, 848, 0,
	879, 0, 870, 872, 880, 0, 0, 0, 863, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 878, 847,
	0, 0, 0, 0, 0, 862, 0, 0, 870, 0,
	0, 0, 0, 0, 863, 0, 0, 845, 846, 0,
	865, 866, 867, 875, 876, 877, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	848, 0, 879, 0, 0, 0, 864, 0, 0, 0,
	0, 0, 0, 853, 0, 0, 0, 873, 0, 0,
	0, 847, 0, 0, 0, 0, 0, 862, 0, 0,
	872, 880, 864, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 873, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 870, 0, 0, 0, 0,
	0, 863, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 871, 0, 853, 859, 860, 861, 0,
	858, 855, 856, 857, 849, 850, 851, 852, 854, 0,
	874, 0, 872, 880, 0, 0, 0, 0, 0, 871,
	0, 0, 859, 860, 861, 0, 858, 855, 856, 857,
	849, 850, 851, 852, 854, 0, 874, 870, 0, 864,
	0, 0, 0, 863, 0, 0, 0, 0, 0, 0,
	873, 0, 0, 724, 718, 741, 712, 732, 731, 0,
	0, 714, 713, 0, 0, 0, 743, 742, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 737, 0, 729,
	728, 864, 0, 0, 0, 0, 871, 0, 727, 0,
	0, 0, 873, 858, 855, 856, 857, 849, 850, 851,
	852, 854, 0, 874, 726, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	719, 720, 721, 722, 0, 740, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 871, 0,
	0, 859, 860, 861, 0, 858, 855, 856, 857, 849,
	850, 851, 852, 854, 0, 874, 0, 0, 0, 730,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 725, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 716, 0, 0, 0,
	0, 0, 0, 0, 723, 717, 0, 0, 0, 0,
	0, 0, 0, 745, 0, 0, 0, 0, 0, 0,
	715, 0, 0, 738, 739, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 744,
}
var sqlPact = [...]int{

	3274, -1000, 25, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 766, 16102, -1000, -1000,
	-1000, -1000, -1000, -1000, 743, 696, 672, 16102, 16102, 15836,
	1123, 1123, 17432, -1000, -1000, 20358, -1000, 2739, 468, 471,
	468, 468, 466, 17432, 520, 622, 136, -1000, 740, -12,
	20092, 16102, 1240, 27, 14772, 320, 3274, 15570, 19826, 16102,
	338, 38, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1091, 968, 967,
	14772, 19560, 19294, 19028, -1000, 9943, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 519, 325, 324, -1000, 15304, -1000,
	834, -1000, 26, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 833, -1000, 16102, -1000, -1000, 18762, 18496, 322, 791,
	-1000, -1000, 547, 393, 1253, -1000, 43, -1000, -1000, 1090,
	-1000, 830, 1089, 1088, 1086, 1085, 1084, 1083, 392, 797,
	-1000, 517, 791, -1000, 791, -1000, -1000, -1000, 502, 17432,
	-1000, 14772, -1000, 18230, 16102, 667, 989, 17964, -1000, 740,
	-1000, -1000, -1000, 861, 1227, 1227, 1227, 1247, 147, 145,
	136, 4, 16102, -1000, 321, 4, 7160, 7160, -1000, -1000,
	320, -1000, 361, 12905, -1000, 7718, -1000, 899, 1146, 410,
	630, 1145, -109, 677, 557, 12097, 38, -1000, -1000, -1000,
	9116, 4291, 14772, 16102, 16102, 574, 17698, -1000, 1144, 111,
	1139, -1000, 105, 1136, -1000, -2, -1000, -1000, -1000, -1000,
	-1000, -1000, 320, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 15038, 1302, 24357,
	-1000, 9116, -1000, -1000, 13174, 1125, 13174, -1000, -1000, 1301,
	-1000, 9116, -1000, 23, 14, 935, 936, 10488, 10222, 1194,
	641, -1000, -1000, -1000, 40, 4568, 16102, 1101, 13174, 16102,
	16102, 16102, 16102, 16102, 16102, -1000, 931, -1000, 16102, -1000,
	11, 8, -1000, 17432, -1000, 115, -1000, 408, 904, 154,
	413, 17166, 1152, 900, -1000, 861, -1000, 840, 925, 8279,
	9116, 136, -1000, -1000, 136, 136, 9116, -1000, -1000, 16102,
	4, 1296, 16102, 73, -1000, 23184, -1000, -1000, 9116, 9116,
	9116, 9116, 9116, 752, -1000, -1000, -1000, 5423, -1000, -1000,
	38, 319, 330, -1000, -1000, 318, 38, -1000, -1000, -1000,
	-1000, 313, 1394, 412, -1000, -1000, -1000, 9116, 397, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1099, 312,
	310, -1000, -1000, -1000, -1000, 306, 305, 303, 299, 284,
	282, 281, 277, 274, 272, 270, 268, 267, 259, 716,
	-1000, 394, -1000, -1000, 394, 394, -1000, 251, 251, 252,
	-1000, -1000, -1000, -1000, 251, -1000, -1000, -1000, 386, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 256, 73, -1000, -1000,
	-1000, 16102, -4, -1000, 23861, -1000, -13, 709, -1000, 14240,
	1213, 1211, 1208, 14772, 1262, 1250, 499, 16102, 16102, 497,
	-1000, 1077, -9, -1000, -1000, 3062, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 409, 258, 1283, 258, 12367, -1000, 16102,
	16102, -1000, 16102, -1000, -1000, 16102, -1000, 16102, 16102, 558,
	13708, 685, 1135, -12, -11, -1000, 1306, -1000, -1000, -1000,
	-1000, 78, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 252, 716, 251, 251,
	251, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 386, -1000,
	-1000, 394, 394, 394, -1000, -1000, -17, 23861, 495, 0,
	13441, 16102, -1000, 37, -1000, -1000, 1075, 467, -18, 768,
	964, 654, -1000, -1000, -1000, -1000, 3, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1383, -1000, -1000,
	-1000, -1000, 1380, 3, -1000, -1000, -1000, -1000, -1000, 1393,
	-1000, -1000, -1000, 4568, -1000, -1000, -1000, 16102, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 768, 964, -1000,
	-1000, 14772, 13974, -12, 1134, 1275, 16102, 16102, 824, 895,
	-1000, -1000, 377, 1132, -1000, -1000, -1000, -1000, 23861, -1000,
	23861, 653, 977, -1000, 977, 2, -1000, 22993, -1000, 250,
	-22, -1000, 409, 7160, 11828, 24357, 24357, 16102, 512, 9116,
	9116, 9116, 9116, 9116, 9116, 9116, 9116, 9116, 9116, 9116,
	9116, 9116, 9116, 9116, 9116, 9116, 9116, 9116, 9116, 9116,
	9116, 996, 9116, 494, 9116, 9116, 9116, 9116, 1182, 748,
	236, 4568, -1000, 617, 617, 617, 24078, 24078, 201, 24,
	22623, 1, 38, -1000, -1000, 6878, 6579, 38, 4845, -1000,
	608, 1378, 424, 23861, 1108, 1046, 249, 144, 141, 9116,
	9116, 927, 9116, 9395, 9116, 9116, 5702, 9116, 9116, 9116,
	9116, 9116, 9116, -1000, 248, -1000, -1000, -1000, -1000, 1375,
	-1000, -1000, 1370, -1000, 511, 509, 1366, 409, 139, 7718,
	-1000, 685, 16102, 16102, 16102, -1000, -1000, 891, 16900, -1000,
	24357, 16102, -1000, 247, 246, 955, 954, 16102, 16102, 16634,
	16368, 16102, 712, 241, 240, 16102, 674, -1000, 16102, 550,
	1074, 16102, -1000, 9116, 615, 9116, 651, -1000, 11289, 414,
	16102, 663, 69, -1000, -1000, -1000, 375, 16102, -1000, -1000,
	-1000, 111, -1000, 105, -1000, -1000, 14772, -1000, -1000, -1000,
	-1000, -1000, -1000, 24357, 348, 341, -1000, 1359, 493, -1000,
	491, 484, 483, -1000, 237, -1000, 9116, 16102, 13441, 0,
	-1, -1000, -1000, 16102, 964, -1000, -1000, -1000, -1000, 678,
	-1000, 698, -1000, 10754, -1000, -1000, -1000, 608, -1000, -15,
	-1000, -1000, -1000, -1000, 138, -6, -1000, -1000, -1000, -1000,
	-1000, 16102, 297, 16102, -1000, 16102, -12, -23, 154, 16102,
	1131, 1392, 16102, -1000, -1000, -1000, 9116, -1000, -1000, -1000,
	-12, 16102, -1000, 1042, -1000, -107, 1819, -152, 14506, -1000,
	11020, -1000, -1000, -1000, 391, 314, 314, 533, 533, 533,
	533, 632, 632, 214, 845, 24165, 24165, 24165, 2676, 222,
	222, 24165, 24165, 24165, 24078, 24052, 1981, 9116, 9116, 481,
	741, 236, 1981, 9116, 1369, 1981, 1981, 1981, -1000, 1783,
	-1000, -1000, -1000, 1070, 235, 9395, 9395, -1000, -1000, -1000,
	5423, -1000, -1000, 229, 9116, -1000, 9116, -38, -66, -1000,
	-1000, -39, -1000, -1000, -36, 9116, 9116, 9116, 122, -1000,
	121, 599, -1000, 9116, 785, 227, 226, 9116, -1000, -1000,
	23835, 21243, 119, 1066, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 112, 23644, 110, 21052, -1000, 9395, 9395, 9395, 5423,
	224, 109, 22967, -83, 23618, 7997, 7997, 7997, 104, 23427,
	9116, -83, 20950, 20921, 20895, -44, -45, -52, 1356, -53,
	101, 389, 387, 99, 1042, -1000, -1000, -1000, -1000, 480,
	479, 1127, -1000, 888, -1000, 776, 9116, 16102, 221, 220,
	751, -1000, 1124, 821, 1122, 821, -1000, -13, 693, 9116,
	9116, -1000, 478, -1000, -1000, 548, -1000, 22649, -1000, 7160,
	23861, -1000, 635, 1216, -57, -1000, -1000, 7160, 409, 12367,
	11828, 7718, -67, -1000, -1000, 685, -1000, 506, 1354, 98,
	914, 738, 683, 564, 1346, 23861, -15, -1000, -15, -1000,
	-1000, -1000, -1000, -1000, -1000, 16102, 1015, 13974, 210, 16102,
	202, 369, -1000, -1000, 1274, 200, 16102, -1000, 1152, -1000,
	94, -1000, 1030, 1246, -1000, 11828, 844, 961, 958, 11828,
	1093, 793, 793, 793, -1000, 14506, 4003, -1000, -1000, 16102,
	196, 11558, 93, 1819, 9116, 1981, 1981, 9116, 9395, 9395,
	-1000, 1981, -1000, -1000, -1000, -1000, 1058, 193, 9116, 24357,
	3365, 2651, -74, 6280, -32, 22333, -1000, -1000, 330, -1000,
	90, 7439, -1000, 23210, -30, -30, -1000, 1391, 1128, -1000,
	9116, 23401, -1000, 12636, 411, 804, 22304, 24357, 24357, -1000,
	9116, -1000, 1056, 9116, -1000, 24357, 24357, 9395, 9395, 9395,
	9395, 9395, 9395, 9395, 9395, 9395, 9395, 9395, 9395, 9395,
	9395, 9395, 9395, 9395, 9395, 9395, 1072, 9395, 1365, 1365,
	1365, -33, 5981, -1000, 1098, 1056, 9116, 9116, 24357, 89,
	88, 87, -1000, 9116, -83, 9116, 9116, 9116, -1000, -1000,
	-1000, 86, -1000, 1343, -1000, -1000, -1000, -1000, 1030, 16102,
	16102, 16102, 1121, 1934, -1000, 22278, -75, 16102, 16102, -1000,
	982, 984, 457, 16102, -1000, 16102, -1000, 16102, 16102, 16102,
	-79, -84, 16102, -1000, -1000, -54, 7160, 195, -12, -54,
	615, -1000, -34, -1000, 373, -1000, 315, 223, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 85, -1000, -1000, 1022,
	-1000, 9674, 180, 16102, 13974, -12, -12, 9674, 823, -1000,
	-1000, 405, 9116, 9116, 1819, 528, 11828, 11828, 1769, 945,
	11828, -1000, -1000, -1000, -1000, -1000, -1000, 988, 176, 16102,
	14506, 522, 1981, 2432, 2224, 9116, 24357, 24227, -85, 9116,
	9116, -1000, -86, -1000, 9116, -1000, -1000, 1388, 9116, 84,
	83, 81, -1000, -1000, 23861, 9116, -1000, -1000, 20624, 9116,
	74, -1000, 71, 70, 23861, 1098, 23861, -1000, -1000, 607,
	607, 1365, 1365, 1365, 1365, 881, 881, 1390, 1679, 342,
	342, 342, 1174, 383, 383, 342, 342, 342, 1055, 937,
	174, 21214, 9116, -90, -1000, -1000, -1000, 23861, 23861, 64,
	-1000, -1000, -1000, -83, 3163, 21988, 21959, -1000, 59, 405,
	-1000, -1000, -1000, 16102, -1000, 16102, -1000, 16102, 16102, 1063,
	876, -1000, -1000, 949, 168, 9395, 16102, -1000, 713, -91,
	-92, 875, -1000, 856, 9116, -1000, 24357, 821, 821, -1000,
	475, 474, -1000, -1000, -1000, -54, 1157, 16102, 1206, -1000,
	-1000, 166, -1000, -1000, -1000, 718, -103, -1000, 232, 1218,
	9116, -1000, -1000, 165, 9674, -110, 58, -1000, -1000, -112,
	16102, -1000, 16102, 23861, -83, 508, -1000, 1769, -1000, 164,
	9116, 11828, -1000, -161, -1000, 371, -1000, 16102, -114, -1000,
	9116, 9116, 24227, -118, -1000, 1981, 1981, -1000, 21933, -1000,
	23210, -1000, -1000, -1000, 23861, 779, -1000, 21643, -1000, -1000,
	-1000, -1000, 9395, 1054, 163, 24357, 21614, -1000, -1000, 9116,
	-1000, -1000, -1000, -1000, -1000, 717, -1000, -1000, 16102, 884,
	-1000, -1000, 9116, 21214, 162, 1015, 161, -1000, -1000, -1000,
	688, -1000, -1000, 23861, 1225, -1000, -1000, 16102, 16102, 542,
	-124, 16102, -1000, -1000, 5144, 16102, 713, 9674, 1223, 38,
	16102, 1223, 21588, 4845, -125, -1000, 1015, 713, 157, -65,
	-1000, 1268, 1387, -1000, 16102, 23861, -1000, 988, -1000, 4568,
	-130, -1000, 1981, 1981, -1000, -1000, 56, 804, 1243, -1000,
	194, 9395, 24357, -132, -1000, 21298, -1000, -1000, 1118, 21269,
	918, 16102, -1000, 16102, 16102, 439, 16102, -1000, -1000, 539,
	-1000, 409, -1000, 156, 1015, -1000, -1000, -1000, -1000, 1218,
	-36, 713, -1000, 1015, 9674, 16102, 155, -1000, -134, -1000,
	-1000, -1000, -1000, 684, 9116, 194, -136, -1000, -1000, 1111,
	-1000, 808, 815, 53, -138, 154, -1000, 9116, -1000, 12367,
	-1000, 16102, -1000, 1223, 49, 1015, -1000, -142, -1000, -1000,
	-1000, 47, 8837, 8837, -83, -1000, 16102, -1000, 819, 817,
	624, -1000, -1000, -1000, -1000, -1000, 918, 23861, -126, -147,
	-1000, -1000, -1000, 713, -1000, -1000, -1000, 3675, 862, 590,
	22678, -1000, -1000, -1000, 1169, -1000, 446, 859, 859, 808,
	-1000, 821, 1015, 1310, -1000, -1000, -1000, -1000, -1000, -1000,
	1326, -1000, -1000, 944, -1000, -1000, -1000, -1000, 8558, -1000,
	-1000, -1000, -1000,
}
var sqlPgo = [...]int{

	0, 1648, 1647, 1266, 119, 1646, 116, 1645, 1642, 1640,
	1637, 1635, 1631, 92, 115, 109, 121, 1628, 87, 1627,
	1626, 1625, 86, 1624, 1623, 1621, 59, 1619, 1617, 1616,
	1615, 1614, 1613, 85, 51, 137, 2338, 128, 1608, 1607,
	1606, 22, 91, 66, 1605, 2, 55, 101, 104, 1050,
	79, 1603, 1602, 135, 34, 14, 1564, 90, 139, 114,
	112, 1599, 1598, 1596, 47, 1594, 5, 1593, 1591, 11,
	49, 25, 1590, 19, 18, 1587, 1585, 126, 1583, 67,
	95, 102, 21, 124, 117, 1582, 77, 12, 64, 1580,
	27, 1579, 41, 76, 130, 1577, 45, 145, 53, 26,
	71, 1576, 1575, 1574, 1572, 73, 1561, 89, 57, 1558,
	1557, 72, 1556, 132, 134, 1553, 1552, 118, 1551, 1550,
	1549, 687, 1548, 1547, 339, 1543, 17, 36, 56, 4,
	100, 98, 23, 1542, 20, 1539, 1739, 939, 1046, 1538,
	48, 42, 80, 30, 50, 37, 1537, 1534, 93, 1530,
	1527, 1525, 1519, 1517, 75, 1516, 63, 133, 44, 52,
	88, 29, 78, 81, 97, 142, 103, 1515, 1514, 110,
	1513, 60, 1499, 1495, 724, 107, 1493, 1490, 1486, 577,
	348, 334, 174, 1478, 1476, 201, 196, 1473, 1472, 106,
	1471, 1461, 136, 131, 16, 1460, 113, 1456, 94, 1454,
	0, 74, 35, 1453, 125, 58, 1452, 1450, 1445, 1441,
	24, 3, 8, 7, 9, 6, 33, 31, 1433, 1432,
	127, 83, 1431, 141, 1430, 1425, 32, 1416, 1412, 15,
	1410, 13, 1409, 10, 1, 1408, 138, 1407, 105, 1404,
	1303, 1403, 140, 1402, 1395, 1288, 82,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 4, 43,
	43, 42, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 42, 42, 42, 42, 40, 40, 45, 45,
	45, 44, 44, 39, 39, 5, 5, 5, 6, 6,
	6, 6, 6, 6, 13, 14, 14, 14, 14, 14,
	14, 83, 83, 82, 82, 85, 85, 15, 15, 16,
	16, 16, 16, 16, 16, 16, 16, 170, 170, 169,
	17, 146, 146, 18, 18, 18, 18, 19, 106, 106,
	20, 20, 20, 20, 21, 25, 236, 236, 236, 240,
	240, 241, 241, 242, 242, 242, 242, 242, 242, 242,
	238, 238, 28, 28, 28, 28, 28, 125, 121, 121,
	123, 123, 123, 123, 48, 120, 120, 120, 120, 122,
	122, 122, 122, 193, 192, 192, 198, 198, 198, 61,
	61, 61, 61, 61, 62, 62, 62, 191, 191, 191,
	191, 199, 199, 199, 199, 199, 199, 63, 63, 63,
	197, 197, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 237,
	237, 239, 239, 30, 30, 9, 9, 10, 10, 64,
	64, 65, 65, 128, 128, 128, 128, 66, 66, 127,
	208, 208, 209, 209, 209, 209, 209, 209, 210, 210,
	210, 210, 210, 210, 210, 206, 206, 207, 204, 204,
	205, 205, 205, 205, 243, 243, 126, 126, 69, 69,
	213, 213, 213, 213, 211, 211, 211, 211, 211, 214,
	212, 215, 215, 215, 215, 215, 157, 157, 157, 32,
	11, 12, 8, 8, 110, 110, 73, 73, 161, 161,
	161, 55, 55, 41, 41, 41, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 111, 111, 112, 112, 23,
	27, 31, 31, 31, 31, 31, 245, 245, 52, 52,
	52, 52, 53, 53, 124, 124, 124, 124, 124, 47,
	7, 7, 46, 46, 22, 22, 22, 22, 22, 58,
	58, 117, 117, 117, 119, 119, 118, 118, 118, 96,
	96, 33, 78, 78, 87, 87, 88, 88, 167, 89,
	89, 26, 26, 36, 36, 34, 34, 34, 34, 34,
	34, 35, 35, 37, 37, 37, 37, 37, 37, 37,
	221, 221, 221, 223, 223, 220, 222, 222, 244, 244,
	97, 97, 97, 68, 67, 67, 71, 71, 70, 72,
	72, 160, 94, 94, 94, 94, 113, 114, 114, 115,
	115, 116, 116, 93, 93, 143, 143, 38, 38, 77,
	77, 79, 79, 134, 134, 135, 135, 133, 133, 133,
	162, 162, 162, 162, 163, 163, 163, 163, 163, 163,
	158, 158, 158, 158, 159, 159, 168, 168, 100, 100,
	100, 100, 98, 98, 99, 99, 164, 164, 164, 164,
	95, 95, 165, 165, 165, 129, 129, 171, 171, 171,
	76, 76, 76, 172, 172, 172, 172, 172, 172, 172,
	172, 172, 172, 172, 172, 172, 173, 173, 173, 173,
	175, 175, 175, 174, 174, 174, 174, 174, 174, 174,
	174, 174, 174, 174, 174, 174, 174, 176, 176, 183,
	183, 184, 184, 185, 186, 177, 177, 178, 178, 179,
	180, 187, 187, 187, 187, 189, 189, 181, 181, 181,
	181, 181, 182, 107, 107, 107, 107, 107, 107, 107,
	107, 107, 107, 107, 107, 107, 107, 108, 108, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 136,
	136, 136, 136, 136, 136, 136, 136, 136, 136, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	216, 216, 216, 216, 216, 216, 216, 218, 218, 219,
	219, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 217, 217, 217,
	217, 217, 217, 217, 217, 217, 217, 224, 224, 225,
	225, 226, 226, 227, 227, 229, 230, 230, 230, 231,
	235, 235, 228, 228, 232, 232, 232, 233, 233, 234,
	234, 234, 234, 234, 148, 148, 148, 149, 149, 150,
	84, 84, 145, 145, 144, 144, 144, 147, 147, 101,
	188, 188, 188, 188, 188, 188, 188, 102, 102, 109,
	103, 103, 104, 104, 104, 104, 104, 104, 140, 141,
	105, 105, 105, 142, 142, 151, 155, 155, 154, 153,
	153, 152, 152, 132, 132, 132, 132, 131, 130, 90,
	90, 246, 246, 156, 156, 91, 91, 92, 86, 86,
	166, 166, 166, 166, 80, 80, 60, 60, 81, 81,
	56, 56, 59, 57, 57, 57, 57, 74, 74, 75,
	75, 54, 54, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 190, 190, 190, 49, 49, 49,
	50, 50, 51, 51, 195, 195, 195, 196, 196, 196,
	196, 194, 194, 194, 194, 194, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 200, 200, 200, 200, 200, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 202, 202,
	202, 202, 202, 202, 202, 202, 202, 202, 201, 201,
	201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
	201, 201, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203, 203, 203, 203, 203, 203, 203, 203, 203,
	203, 203,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 4, 6, 1,
	3, 2, 5, 3, 6, 4, 6, 6, 6, 4,
	8, 2, 3, 3, 6, 4, 3, 2, 1, 1,
	0, 2, 0, 2, 0, 4, 6, 7, 1, 1,
	1, 1, 1, 1, 6, 3, 5, 4, 6, 4,
	6, 1, 3, 1, 2, 2, 3, 2, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	5, 3, 0, 1, 1, 1, 1, 3, 3, 0,
	2, 3, 2, 3, 6, 6, 1, 2, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 3, 6, 3, 1, 5, 2, 1,
	1, 1, 3, 3, 2, 3, 3, 3, 3, 1,
	3, 3, 2, 1, 1, 3, 1, 1, 1, 2,
	2, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 1, 1, 1, 1, 0,
	1, 1, 2, 2, 4, 2, 4, 4, 4, 4,
	4, 4, 4, 2, 3, 4, 3, 2, 4, 2,
	0, 2, 0, 8, 8, 7, 10, 5, 8, 1,
	0, 1, 3, 1, 1, 1, 1, 8, 0, 3,
	2, 0, 3, 1, 2, 2, 3, 6, 2, 1,
	1, 2, 4, 2, 5, 7, 8, 5, 3, 1,
	4, 6, 5, 10, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 4,
	6, 8, 11, 14, 1, 0, 1, 3, 3, 3,
	5, 2, 0, 1, 1, 0, 6, 6, 8, 6,
	8, 8, 10, 8, 10, 1, 0, 2, 0, 2,
	2, 3, 3, 2, 2, 2, 1, 0, 1, 3,
	2, 0, 2, 1, 1, 1, 3, 3, 0, 3,
	4, 7, 3, 0, 6, 6, 8, 5, 7, 1,
	3, 1, 4, 2, 8, 5, 4, 3, 0, 2,
	0, 8, 2, 0, 1, 3, 1, 1, 3, 5,
	5, 1, 1, 3, 3, 1, 2, 3, 2, 3,
	4, 1, 1, 8, 8, 1, 2, 4, 4, 4,
	2, 2, 3, 1, 3, 6, 1, 0, 1, 0,
	1, 1, 0, 1, 1, 0, 1, 0, 3, 1,
	3, 2, 2, 2, 1, 1, 2, 2, 3, 1,
	1, 1, 1, 3, 0, 2, 0, 2, 3, 3,
	0, 1, 3, 3, 1, 1, 3, 2, 4, 0,
	3, 2, 1, 4, 3, 4, 5, 4, 5, 4,
	5, 2, 4, 1, 1, 0, 5, 0, 2, 2,
	2, 1, 1, 0, 4, 2, 1, 2, 2, 4,
	1, 3, 1, 2, 3, 2, 0, 2, 5, 2,
	3, 4, 0, 1, 1, 1, 1, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 2, 2, 2, 1, 1, 3, 0, 1,
	1, 1, 1, 5, 2, 1, 1, 1, 1, 4,
	1, 2, 2, 1, 1, 1, 0, 1, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 0, 1, 4, 1,
	3, 3, 3, 5, 2, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 4, 3, 4, 4, 5, 3, 3, 3, 3,
	3, 4, 3, 3, 4, 3, 4, 3, 4, 5,
	6, 6, 7, 6, 7, 6, 7, 3, 4, 1,
	3, 3, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 6, 6, 7, 1, 1,
	1, 3, 1, 1, 1, 2, 2, 2, 1, 1,
	3, 5, 6, 8, 6, 6, 4, 4, 1, 1,
	1, 5, 1, 3, 1, 3, 1, 1, 1, 1,
	6, 6, 4, 4, 4, 4, 6, 5, 5, 5,
	4, 8, 6, 6, 4, 4, 4, 5, 0, 5,
	0, 2, 0, 1, 3, 3, 2, 2, 0, 6,
	1, 0, 3, 0, 2, 2, 0, 1, 4, 2,
	2, 2, 2, 2, 4, 3, 5, 4, 3, 5,
	1, 3, 1, 3, 3, 3, 2, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 4, 3, 2,
	3, 0, 3, 3, 2, 2, 1, 0, 2, 2,
	3, 2, 1, 1, 3, 5, 1, 2, 4, 2,
	0, 1, 0, 1, 1, 3, 5, 2, 2, 1,
	2, 1, 0, 1, 1, 1, 3, 3, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 3, 1, 3,
	1, 2, 3, 1, 1, 2, 2, 1, 3, 3,
	0, 1, 2, 1, 1, 1, 1, 6, 2, 3,
	5, 1, 1, 1, 1, 2, 2, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -13, -14, -15,
	-17, -19, -20, -21, -22, -24, -25, -27, -26, -28,
	-29, -30, -31, -23, -32, -33, 23, 64, -7, -8,
	-9, -10, -11, -12, -222, 92, 100, 193, 99, 85,
	115, 208, 215, -34, -36, 223, -125, 224, 34, 233,
	58, 95, 210, 205, 254, 66, -221, -37, -35, 301,
	276, 282, 218, -38, 241, 268, 304, 241, 128, 78,
	-56, -49, 4, -200, -202, 20, 21, 23, 33, 34,
	39, 43, 46, 57, 58, 59, 61, 63, 64, 65,
	68, 69, 76, 77, 78, 79, 81, 85, 87, 91,
	92, 94, 99, 100, 105, 106, 109, 111, 116, 121,
	122, 129, 132, 127, 141, 143, 144, 149, 152, 155,
	157, 158, 159, 160, 161, 163, 164, 166, 168, 165,
	171, 173, 174, 180, 183, 186, 187, 188, 191, 193,
	195, 196, 197, 199, 200, 205, 202, 203, 204, 206,
	208, 210, 211, 213, 215, 216, 217, 220, 221, 223,
	224, 226, 229, 232, 233, 234, 237, 235, 231, 240,
	242, 243, 250, 254, 255, 256, 257, 260, 261, 262,
	265, 266, 267, 272, 277, 278, 279, 280, 28, 35,
	36, 37, 38, 40, 41, 44, 45, 49, 50, 51,
	53, 80, 82, 83, 98, 101, 107, 117, 119, 123,
	124, 133, 134, 135, 136, 138, 147, 170, 172, 181,
	185, 190, 192, 198, 212, 219, 227, 228, 236, 238,
	245, 246, 247, 251, 252, 268, 269, 87, 132, 262,
	261, 78, 128, 241, -16, 301, -26, -6, -14, -4,
	-22, -33, -13, -15, 23, -49, -49, -49, 193, 22,
	-240, 22, -241, -242, 66, 92, 115, 218, 132, 87,
	261, -240, -53, 215, -49, -121, 152, 221, 212, 250,
	-122, -120, -193, 245, 161, -82, -49, 4, 78, 57,
	79, 116, 128, 129, 62, 63, 144, 242, 245, 250,
	22, 66, -245, 250, 250, -245, -245, -52, 250, 248,
	-53, -244, 241, 241, 271, 178, -110, 78, 259, -35,
	-37, -36, -70, -71, 258, 137, 97, 179, -34, -36,
	-221, -223, 199, -220, -49, -223, -67, -68, 22, 89,
	305, -164, -56, 177, -92, 301, -3, -164, 123, -56,
	-59, 123, -56, -49, 113, 301, -90, -132, -131, -130,
	299, 303, 113, 139, 139, -165, -164, -49, 123, -60,
	123, -59, -83, 123, -82, -170, -169, -196, 4, -200,
	-202, -201, 268, 55, 67, 114, 131, 125, 140, 142,
	148, 150, 162, 182, 184, 209, 225, 241, -146, 301,
	-106, 301, -49, 22, 176, 305, 176, -49, -121, 51,
	-121, 301, -123, -47, -48, 141, 195, 248, 286, 113,
	280, -63, 5, 84, -85, 303, 113, -237, 176, 113,
	113, 113, 113, 113, 113, 280, 141, 195, 241, -124,
	-47, -48, -124, 248, -53, -95, -164, -82, 123, -82,
	204, 128, -49, 123, -70, -71, -94, -113, -114, 151,
	175, -97, 22, 89, -97, -97, 43, 302, 302, 305,
	-223, -75, 301, -86, -166, -136, 294, -138, 292, 293,
	298, 167, 281, -148, -56, -139, 9, 301, -151, -218,
	-36, 98, 29, -149, -150, 212, -49, 7, 8, 5,
	6, -54, -173, -182, 253, 102, 169, 47, -216, -217,
	4, -200, -195, -174, -184, -178, -181, 138, 55, 71,
	74, 72, 75, 222, 263, 48, 28, 101, 185, 190,
	238, 251, 252, 123, 170, 124, 53, 117, 147, 91,
	36, 38, 40, 41, 49, 50, 80, 82, 83, 107,
	133, 134, 135, 136, 172, 198, 227, 236, 246, 247,
	269, -201, -185, -186, -179, -180, -187, -86, -92, 294,
	-56, 301, -91, -156, -136, 84, -43, 202, -42, 21,
	23, 92, 266, 98, 231, 231, 202, 98, 306, 202,
	234, 302, -80, -56, -132, -136, -194, 294, 4, -200,
	-202, -201, -203, 22, 24, 25, 26, 27, 29, 30,
	31, 32, 42, 47, 48, 52, 54, 56, 62, 66,
	70, 71, 72, 73, 74, 75, 84, 86, 88, 89,
	90, 93, 95, 97, 102, 103, 104, 110, 112, 113,
	115, 118, 120, 126, 128, 130, 137, 139, 145, 146,
	151, 153, 154, 167, 169, 175, 176, 177, 178, 179,
	189, 194, 201, 207, 218, 222, 230, 239, 241, 244,
	248, 249, 253, 258, 259, 263, 264, 270, 271, 273,
	274, 275, 276, -165, -58, -56, -58, 223, -49, 30,
	98, -45, 305, 46, 206, 98, -45, 305, 98, 302,
	305, -164, 123, 30, -145, -171, -172, -174, -183, -177,
	-181, -182, 39, 45, 44, 243, 219, 228, 37, 133,
	134, 135, 136, 227, 36, 198, 107, 91, 83, 82,
	172, 41, 40, -185, -186, -179, -180, 80, 246, 247,
	138, 38, 50, 49, 269, 236, -84, -136, -236, -81,
	241, 78, -57, -49, 294, -242, -236, 30, -84, 305,
	305, 149, -62, 155, 166, 121, -192, 84, -198, -191,
	-157, 9, 253, 102, 176, -197, 8, 293, -190, -196,
	5, 7, 292, -192, 84, 69, -199, 5, 4, -182,
	-157, 84, 152, 303, -194, -193, -239, 110, -236, -193,
	-193, -193, -193, -193, -49, 149, -193, 305, 305, -53,
	-45, 305, 301, 30, 167, -69, 301, 271, -50, 123,
	-49, -46, 94, 167, -94, -114, -113, -115, -136, 22,
	-136, -138, -35, -35, -35, -72, -160, -136, -220, 30,
	-74, -49, -77, 305, 113, 10, 11, 54, 33, 292,
	293, 294, 295, 108, 296, 289, 290, 291, 288, 284,
	285, 286, 60, 156, 214, 13, 14, 15, 26, 178,
	150, 281, 125, 225, 298, 16, 17, 18, 140, 35,
	126, 30, 4, -136, -136, -136, -136, -136, 184, -36,
	-136, -84, -90, -36, -144, 299, 301, -90, 301, 5,
	5, 301, -152, -136, -224, 277, 110, 301, 301, 301,
	301, 301, 301, 301, 301, 301, 301, 301, 301, 301,
	301, 301, 301, 192, -189, 272, -189, -189, -175, 301,
	-175, -176, 301, -175, 278, 282, 301, -77, -56, 305,
	302, 305, 248, -111, 62, 56, -127, 123, 56, -204,
	-49, 62, -205, 52, 259, 194, 112, -111, 62, -111,
	62, 62, -164, 33, 33, 248, -59, -49, 248, 113,
	302, 305, 300, 309, -129, 274, -117, -26, 301, 84,
	30, -117, -87, -88, -167, -89, -56, 301, -49, -49,
	-59, -60, -82, -83, -16, -169, 98, -18, -26, -22,
	-33, -13, 302, 305, -76, 29, -107, 301, 279, 159,
	81, 122, 158, -108, 217, 302, 305, 248, 305, -81,
	-74, -131, -130, 113, 250, 302, -48, -47, -61, 197,
	229, 203, 220, 305, 8, 7, 7, 5, -194, -238,
	-49, -48, -47, -164, -64, -65, -128, -127, -206, -207,
	-204, 128, 259, 103, -26, 98, 30, -74, -82, 176,
	167, 286, 98, -116, 212, 213, 305, -41, 31, 88,
	301, 305, 302, -129, -166, -79, -162, -164, -36, -163,
	301, -171, -171, -82, 245, -136, -136, -136, -136, -136,
	-136, -136, -136, -136, -136, -136, -136, -136, -136, -136,
	-136, -136, -136, -136, -136, -136, -136, 150, 125, 225,
	35, 126, -136, 248, -136, -136, -136, -136, 169, 167,
	253, 102, 260, 89, 173, -246, 239, 32, -142, -36,
	301, -194, -148, 212, 301, 302, 305, -84, -147, 300,
	-144, -84, 302, 302, -84, 270, 22, 89, 294, -107,
	7, -155, -154, 273, -225, 105, 118, 301, 302, 302,
	-136, -136, -101, -188, 4, 279, 159, 81, 122, 158,
	217, -102, -136, -103, -137, -138, 292, 293, 298, 301,
	212, -104, -136, -84, -136, 42, 146, 249, -105, -136,
	113, -84, -136, -136, -136, -84, -84, -84, 301, 7,
	7, 245, 245, 7, -129, 302, -156, -42, -56, -49,
	-49, 167, -127, 123, -171, -49, 301, 301, 143, 143,
	-49, -49, 123, -49, 123, -49, -49, -43, 202, 301,
	301, -49, 202, -49, 234, 113, -56, -136, -96, 207,
	-136, -96, -119, 176, -80, 268, -49, 207, -78, 305,
	113, 286, -80, -45, -45, -164, -171, 299, 299, 7,
	248, 248, 248, 248, 301, -136, -238, -57, -238, -47,
	257, 59, 197, -198, -107, 305, 302, 305, -50, 128,
	-50, -82, -26, 302, -69, -56, 98, 5, -49, -160,
	-18, -49, -93, 118, -168, 305, 283, 67, -100, 142,
	162, 114, 148, 209, 131, -133, 306, -159, -158, 30,
	-49, -36, -163, -162, 280, -136, -136, 248, -246, 239,
	-142, -136, 169, 253, 102, 260, 89, 173, 113, 301,
	-137, -137, -84, 301, -84, -136, 300, 300, 305, 302,
	-71, 305, -70, -136, -84, -84, 302, 302, -153, -154,
	93, -136, -230, 183, 301, 301, -136, 30, 305, 302,
	113, 302, -109, 189, 302, 10, 11, 292, 293, 294,
	295, 108, 296, 289, 290, 291, 288, 284, 285, 286,
	60, 156, 214, 13, 14, 15, 140, 126, -137, -137,
	-137, -84, 301, 302, -140, -141, 113, 110, 30, -105,
	-105, -105, 302, 113, -84, 305, 305, 305, 302, 302,
	302, 7, 302, 305, 302, 280, 280, 302, -93, 248,
	248, 98, 167, -208, -205, -136, -74, 301, 301, -40,
	92, 223, -112, 98, -45, 98, -45, 248, -111, 62,
	-84, -84, 248, 234, 300, -86, 207, 61, 302, -86,
	-129, -88, -79, -156, 302, 300, 7, 7, 302, 159,
	122, 158, -108, 158, -108, -108, 7, -49, -66, 127,
	-128, 301, -50, 301, 301, 30, 30, 301, -49, -46,
	302, -143, 120, 43, -162, 173, 142, 142, -162, -100,
	142, -98, 182, -98, -98, -159, -194, 307, -49, 301,
	302, -136, -136, -137, -137, 113, 301, -136, -145, 26,
	26, 302, -84, 302, 305, 302, -144, 302, 270, -71,
	-71, -71, 5, 95, -136, 244, -231, -49, 301, 274,
	-70, 302, -171, -171, -136, -140, -136, -171, -171, -137,
	-137, -137, -137, -137, -137, -137, -137, -137, -137, -137,
	-137, -137, -137, -137, -137, -137, -137, -137, 89, 167,
	173, -137, 305, -84, 302, -141, -140, -136, -136, -171,
	302, 302, 302, -84, -136, -136, -136, 302, 7, -143,
	-49, -49, -127, 98, -209, 62, -210, 54, 103, 66,
	167, 169, 259, 194, 52, 84, 201, 302, 302, -74,
	-74, 167, 84, 167, 84, 77, 255, -49, -49, -56,
	-49, -49, 302, 302, -49, -86, -118, 301, 176, -26,
	-96, 286, 300, 300, 302, 126, -73, -161, -49, -219,
	301, -216, -217, -54, 301, -74, -64, -26, -26, -73,
	176, -226, 275, -136, -84, 240, -162, -162, -99, 264,
	176, 142, -162, -135, -134, 111, 165, 301, -74, -158,
	26, 26, -136, -145, 302, -136, -136, 302, -136, 5,
	-136, 302, 302, 302, -136, -235, -49, -136, 302, 302,
	302, -141, 113, 89, 173, 301, -136, 302, 302, 305,
	302, 302, 302, -226, -127, -49, -82, -49, 103, 123,
	169, 143, 301, -137, -56, -126, -243, 65, 237, 302,
	302, 169, 169, -136, -171, -45, -45, 248, 248, 90,
	-74, 62, -92, -36, 301, 186, 302, 305, -55, -90,
	54, -55, -136, 301, -73, 302, 302, 302, -56, -227,
	-229, -49, 245, -99, 301, -136, -162, 305, 308, 286,
	-74, 302, -136, -136, 302, 302, -71, -228, 188, 302,
	-137, 113, 301, -145, 302, -136, -210, -50, 167, -136,
	-51, 301, -66, 301, 201, -44, 54, -49, -49, 261,
	168, 302, -49, -49, -126, -161, -41, -82, -41, 302,
	-84, 302, -66, -126, 301, 305, 30, 5, -74, -134,
	-194, 302, 302, -71, 43, -137, -145, 302, 302, 98,
	302, -213, 157, -49, -74, -56, -39, 264, -82, 223,
	-129, 301, -66, -55, -71, -126, -66, -73, -229, -231,
	302, -232, 196, 213, -84, 302, 103, -211, -214, -212,
	176, 114, 187, 226, 302, 302, -69, -136, -87, -74,
	-41, 302, -66, 302, 302, -233, -234, 35, 256, 69,
	-136, -233, -49, -212, 176, -214, 176, 261, 87, -213,
	-129, 302, -126, -234, 191, 109, 212, 191, 109, -215,
	164, 206, 46, 223, -215, -211, -45, -66, 26, 20,
	169, 84, -234,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 0, 0, 58, 59,
	60, 61, 62, 63, 0, 0, 367, 0, 0, 0,
	0, 0, 0, 341, -2, 0, 126, 0, 297, 0,
	297, 297, 301, 0, 369, 265, 366, -2, 377, 0,
	0, 0, 375, 355, 0, 0, -2, 0, 0, 0,
	0, 770, 797, 798, 799, 816, 817, 818, 819, 820,
	821, 822, 823, 824, 825, 826, 827, 828, 829, 830,
	831, 832, 833, 834, 835, 836, 837, 838, 839, 840,
	841, 842, 843, 844, 845, 846, 847, 848, 849, 850,
	851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
	861, 862, 863, 864, 865, 866, 867, 868, 869, 870,
	871, 872, 873, 874, 875, 876, 877, 878, 879, 880,
	881, 882, 883, 884, 885, 886, 887, 888, 889, 890,
	891, 892, 893, 894, 895, 896, 897, 898, 899, 900,
	901, 902, 903, 904, 905, 906, 907, 908, 909, 910,
	911, 912, 913, 914, 915, 916, 917, 918, 919, 920,
	921, 922, 923, 924, 925, 926, 927, 928, 929, 930,
	931, 932, 933, 934, 935, 936, 937, 938, 939, 940,
	941, 942, 943, 944, 945, 946, 947, 948, 949, 950,
	951, 952, 953, 954, 955, 956, 957, 958, 959, 960,
	961, 962, 963, 964, 965, 966, 967, 968, 969, 970,
	971, 972, 973, 974, 975, 976, 977, 0, 0, 0,
	0, 0, 0, 0, 77, 0, 79, 80, 81, 82,
	83, 84, 85, 86, 0, 92, 99, 100, 880, 102,
	0, 109, 110, 111, 113, 114, 115, 116, 117, 118,
	119, 0, 290, 895, 303, 122, 859, 899, 965, 913,
	129, 139, 0, 971, -2, 143, 73, 172, 173, 0,
	175, 190, 0, 0, 0, 0, 0, 183, 0, 0,
	187, 0, 308, 296, 308, 293, 294, 295, 298, 0,
	289, 0, 368, 0, 0, 0, 0, 0, 264, -2,
	351, 352, -2, 0, 372, 372, 372, 0, 0, 352,
	0, 360, 884, 363, 780, 361, 0, 0, 374, 373,
	0, 356, 436, 0, 397, 0, 2, 0, 950, 436,
	0, 950, 0, 0, 0, 0, 771, 749, 743, 744,
	0, 0, 0, 0, 0, 0, 442, 65, 950, 50,
	950, 766, 50, 950, 71, 0, 87, 89, 807, 808,
	809, 810, 976, 978, 979, 980, 981, 982, 983, 984,
	985, 986, 987, 988, 989, 990, 991, 0, 0, 0,
	97, 0, 101, 103, 0, 0, 0, 302, 123, 940,
	125, 0, 128, 130, 131, 0, 0, 0, 0, 0,
	0, 142, 167, 168, 74, 0, 0, 192, 0, 0,
	0, 0, 0, 0, 0, 184, 0, 186, 0, 291,
	304, 305, 292, 0, 300, 50, 440, 0, 950, 239,
	0, 801, 313, 950, -2, 0, 347, 384, 385, 0,
	0, 0, 370, 371, 0, 0, 0, 343, 344, 0,
	362, 0, 0, 400, 758, 762, 763, 529, 0, 0,
	0, 0, 0, 0, 618, 619, 620, 0, 622, 623,
	624, 945, 0, 628, 629, 965, 770, 783, 784, 785,
	786, 0, 0, 0, 791, 792, 793, 742, 668, 638,
	-2, -2, 781, 466, 467, 468, 469, -2, 978, 642,
	644, 646, 647, 648, 649, 0, 929, 946, 961, 962,
	970, 974, 975, 950, 958, 951, 941, 948, 957, 840,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 806, 491, 492, 497, 498, 500, 400, 398, 437,
	438, 0, 0, 755, 753, 754, 27, 286, 29, 0,
	286, 286, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 0, 0, 764, 750, 0, 747, 748, 811, 812,
	813, 814, 815, 992, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
	1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018,
	1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028,
	1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038,
	1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
	1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
	1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068,
	1069, 1070, 1071, 446, 0, 319, 0, 0, 443, 0,
	0, 67, 0, 48, 49, 0, 69, 0, 0, 367,
	0, 0, 950, 367, 0, 702, 452, 453, 454, 455,
	456, 526, 459, 460, 461, 462, 463, 464, 465, 473,
	474, 475, 476, 477, 478, 479, 488, 0, 472, 472,
	472, 485, 486, 489, 490, 495, 496, 507, 508, 510,
	512, 506, 506, 506, 503, 504, 0, 700, 0, 106,
	0, 835, 768, 773, 774, 112, 0, 0, 0, 0,
	0, 0, 134, 154, 155, 156, 135, 137, 144, 146,
	147, 148, 157, 158, 159, 160, 256, 0, 258, 170,
	171, 794, 0, 136, 138, 140, 141, 161, 162, 0,
	164, 165, 166, 0, 75, 174, 176, 0, 189, 177,
	178, 179, 180, 181, 182, 185, 188, 0, 0, 299,
	259, 0, 200, 0, 0, 0, 0, 0, 0, 950,
	800, 310, 0, 0, 350, 382, 383, 386, 389, 390,
	387, 529, 357, 358, 359, 378, 379, 275, 364, 0,
	0, 777, 446, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 752,
	0, 0, 761, 534, 535, 536, 558, 559, 0, -2,
	700, 0, 625, 626, 627, 0, 0, -2, 0, 788,
	526, 0, 0, 741, 670, 0, 0, 0, 0, 0,
	0, 0, 0, 721, 727, 0, 0, 0, 0, 0,
	0, 0, 0, 481, 494, 505, 502, 501, 483, 0,
	482, 480, 0, 484, 0, 0, 0, 446, 0, 0,
	757, 0, 0, 0, 0, 285, 31, 950, 0, 41,
	0, 0, 229, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 772, 0, 0,
	0, 0, 745, 0, 330, 0, 330, 321, 0, 0,
	0, 317, 333, 334, 336, 337, 0, 0, 444, 66,
	767, 50, 72, 50, 78, 88, 0, 90, 93, 94,
	95, 96, 91, 0, 447, 449, 457, 0, 513, 514,
	515, 516, 517, 518, 527, 98, 0, 0, 0, 107,
	108, 775, 776, 0, 0, 127, 132, 133, 309, 0,
	151, 0, 153, 0, 257, 796, 795, 526, 76, 191,
	120, 306, 307, 441, 0, 199, 201, 203, 204, 205,
	206, 801, 0, 801, 197, 0, 0, 0, 239, 0,
	0, 0, 0, 388, 391, 392, 0, 381, 273, 274,
	367, 0, 779, 394, 759, 427, 401, 409, 425, 412,
	0, 530, 531, 532, 0, 537, 538, 539, 540, 541,
	542, 543, 544, 545, 546, -2, -2, -2, 550, 551,
	552, -2, -2, -2, 556, 557, -2, 0, 0, 0,
	752, 0, -2, 0, 566, -2, -2, -2, 570, 0,
	573, 575, 577, 0, 0, 0, 0, 751, 587, 733,
	0, 760, 572, 0, 0, 621, 0, 0, 0, 706,
	707, 0, -2, 630, 377, 0, 0, 0, 0, 789,
	0, 740, 736, 0, 678, 0, 0, 0, 643, 645,
	0, 0, 0, 0, 710, 711, 712, 713, 714, 715,
	716, 0, 0, 0, 0, 589, 0, 0, 0, 0,
	965, 0, 700, 726, 0, 0, 0, 0, 0, 700,
	0, 732, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 394, 439, 756, 30, 277, 0,
	0, 0, 33, 950, 211, 0, 0, 0, 0, 0,
	288, 42, 950, 50, 950, 50, 43, 28, 286, 0,
	0, 279, 0, 276, 56, 0, 765, 0, 64, 0,
	445, 314, 315, 0, 0, 323, 320, 0, 446, 0,
	0, 0, 0, 68, 70, 0, 703, 0, 0, 0,
	0, 0, 0, 0, 0, 701, 104, 769, 105, 124,
	149, 150, 152, 145, 163, 0, 208, 0, 0, 801,
	0, 0, 260, 238, 0, 0, 0, 312, 313, 380,
	0, 778, 396, 0, 399, 0, 0, 0, 0, 0,
	0, 433, 433, 433, 431, 425, 0, 411, 424, 0,
	423, -2, 412, 0, 0, -2, -2, 0, 0, 0,
	588, -2, 571, 574, 576, 578, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 701, 704, 705, 0, -2,
	0, 0, 376, 377, 377, 377, 636, 0, 0, 737,
	0, 0, 637, 0, 0, 0, 0, 0, 0, 652,
	0, 653, 0, 0, 654, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 592, 593,
	594, 0, 0, 655, 724, 725, 0, 0, 0, 0,
	0, 0, 660, 0, 731, 0, 0, 0, 664, 665,
	666, 0, 470, 0, 487, 509, 511, 499, 396, 0,
	0, 0, 0, 209, 228, 0, 0, 0, 0, 35,
	0, 0, 0, 0, 39, 0, 45, 0, 0, 0,
	0, 0, 0, 57, 746, 329, 0, 328, 0, 318,
	330, 335, 332, 338, 0, 450, 0, 0, 458, 519,
	520, 521, 522, 523, 524, 525, 0, 121, 195, 0,
	202, 0, 0, 0, 200, 0, 0, 0, 0, 311,
	365, 672, 0, 0, 402, 0, 0, 0, 0, 0,
	0, 428, 432, 429, 430, 410, 407, 0, 421, 0,
	414, 533, -2, 0, 0, 0, 0, -2, 0, 0,
	0, 734, 0, 695, 0, -2, 708, 631, 0, 0,
	0, 0, 790, 735, 739, 0, 676, 677, 681, 0,
	0, 641, 0, 0, 709, 718, 719, 590, 591, 595,
	596, 597, 598, 599, 600, 601, 602, 603, 604, -2,
	-2, -2, 608, 609, 610, -2, -2, -2, 0, 0,
	0, 720, 0, 0, 698, 722, 723, 728, 729, 0,
	657, 658, 659, 730, 0, 0, 0, 493, 0, 672,
	281, 283, 32, 0, 210, 0, 213, 0, 0, 0,
	0, 219, 220, 0, 0, 0, 0, 230, 237, 0,
	0, 0, 47, 0, 0, 287, 0, 50, 50, 278,
	0, 0, 193, 194, 280, 316, 0, 0, 0, 322,
	331, 0, 451, 448, 528, 0, 0, 266, 272, 272,
	0, 639, 640, 0, 0, 0, 0, 198, 261, 0,
	0, 353, 0, 395, 393, 0, 415, 0, 417, 0,
	0, 0, 419, 0, 405, 0, 404, 0, 0, 413,
	0, 0, -2, 0, 581, -2, -2, 694, 701, 787,
	377, 632, 634, 635, 738, 683, 680, 0, 667, 650,
	651, 717, 0, 0, 0, 0, 701, 697, 656, 0,
	662, 663, 471, 354, 34, 0, 214, 215, 801, 0,
	218, 221, 0, 223, 803, 208, 0, 234, 235, 232,
	0, 36, 37, 46, 52, 38, 44, 0, 0, 0,
	0, 0, 339, 340, 0, 0, 237, 0, 275, 782,
	0, 275, 0, 0, 0, 227, 208, 237, 0, 671,
	673, 0, 0, 416, 0, 435, 418, 0, 408, 0,
	0, 422, -2, -2, 582, 696, 0, 377, 0, 669,
	-2, 0, 0, 0, 699, 0, 212, 216, 0, 0,
	243, 0, 231, 0, 0, 54, 0, 282, 284, 0,
	325, 446, 327, 0, 208, 267, 268, 271, 269, 272,
	377, 237, 196, 208, 0, 0, 0, 426, 0, 406,
	403, 420, 633, 686, 0, -2, 0, 616, 661, 0,
	222, 248, 0, 0, 0, 239, 40, 0, 51, 0,
	326, 0, 225, 275, 0, 208, 262, 0, 674, 675,
	434, 0, 0, 0, 682, 617, 0, 224, 244, 245,
	0, 240, 241, 242, 802, 236, 243, 53, 446, 0,
	270, 631, 226, 237, 679, 684, 687, -2, 916, 832,
	0, 685, 217, 246, 0, 247, 0, 0, 0, 248,
	324, 50, 208, 0, 689, 690, 691, 692, 693, 249,
	0, 252, 253, 0, 250, 233, 207, 263, 0, 251,
	254, 255, 688,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 290, 3, 296, 291, 3,
	301, 302, 294, 292, 305, 293, 303, 295, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 309, 304,
	284, 286, 285, 3, 306, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 299, 3, 300, 289, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 307, 288, 308, 298,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 287, 57627, 297, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:717
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:723
		{
			if sqlDollar[3].union.stmt() != nil {
				sqlVAL.union.val = append(sqlDollar[1].union.stmts(), sqlDollar[3].union.stmt())
			}
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:729
		{
			if sqlDollar[1].union.stmt() != nil {
				sqlVAL.union.val = []Statement{sqlDollar[1].union.stmt()}
			} else {
				sqlVAL.union.val = []Statement(nil)
			}
		}
	case 18:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:753
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 26:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:764
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 27:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:770
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[3].union.normalizableTableName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:774
		{
			sqlVAL.union.val = &AlterTable{Table: sqlDollar[5].union.normalizableTableName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 29:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:780
		{
			sqlVAL.union.val = AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:784
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:791
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:796
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: false, IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:801
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:806
		{
			sqlVAL.union.val = &AlterTableAddColumn{columnKeyword: true, IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:811
		{
			sqlVAL.union.val = &AlterTableSetDefault{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:816
		{
			sqlVAL.union.val = &AlterTableDropNotNull{columnKeyword: sqlDollar[2].union.bool(), Column: Name(sqlDollar[3].str)}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:820
		{
			unimplemented()
		}
	case 38:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:823
		{
			sqlVAL.union.val = &AlterTableDropColumn{columnKeyword: sqlDollar[2].union.bool(), IfExists: true, Column: Name(sqlDollar[5].str)}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:828
		{
			sqlVAL.union.val = &AlterTableDropColumn{
				columnKeyword: sqlDollar[2].union.bool(),
				IfExists:      false,
				Column:        Name(sqlDollar[3].str),
				DropBehavior:  sqlDollar[4].union.dropBehavior(),
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:838
		{
			unimplemented()
		}
	case 41:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:841
		{
			sqlVAL.union.val = &AlterTableAddConstraint{ConstraintDef: sqlDollar[2].union.constraintDef()}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:845
		{
			unimplemented()
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:847
		{
			unimplemented()
		}
	case 44:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:850
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:859
		{
			sqlVAL.union.val = &AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:869
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 47:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:873
		{
			sqlVAL.union.val = nil
		}
	case 48:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:879
		{
			sqlVAL.union.val = DropCascade
		}
	case 49:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:883
		{
			sqlVAL.union.val = DropRestrict
		}
	case 50:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:887
		{
			sqlVAL.union.val = DropDefault
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:892
		{
			unimplementedWithIssue(2473)
		}
	case 52:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:893
		{
		}
	case 53:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:896
		{
			unimplemented()
		}
	case 54:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:897
		{
		}
	case 55:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:901
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:905
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Stdin: true}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:909
		{
			sqlVAL.union.val = &CopyFrom{Table: sqlDollar[2].union.normalizableTableName(), Columns: sqlDollar[4].union.unresolvedNames(), Stdin: true}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:925
		{
			sqlVAL.union.val = &Delete{Table: sqlDollar[4].union.tblExpr(), Where: newWhere(astWhere, sqlDollar[5].union.expr()), Returning: sqlDollar[6].union.retExprs()}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:932
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[3].str), IfExists: false}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:936
		{
			sqlVAL.union.val = &DropDatabase{Name: Name(sqlDollar[5].str), IfExists: true}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:940
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[3].union.tableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:948
		{
			sqlVAL.union.val = &DropIndex{
				IndexList:    sqlDollar[5].union.tableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:956
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[3].union.tableNameReferences(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:960
		{
			sqlVAL.union.val = &DropTable{Names: sqlDollar[5].union.tableNameReferences(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:966
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:970
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 73:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:976
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:980
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 75:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:986
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[2].str)}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:990
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), Name(sqlDollar[3].str))
		}
	case 77:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:997
		{
			sqlVAL.union.val = &Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1001
		{
			sqlVAL.union.val = &Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1007
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1016
		{ /* SKIP DOC */
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1020
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1024
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 90:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1034
		{
			sqlVAL.union.val = &Prepare{
				Name:      Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1044
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 92:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1048
		{
			sqlVAL.union.val = []ColumnType(nil)
		}
	case 93:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1054
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1064
		{
			sqlVAL.union.val = &Execute{
				Name:   Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1075
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 99:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1079
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 100:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1086
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[2].str),
			}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1092
		{
			sqlVAL.union.val = &Deallocate{
				Name: Name(sqlDollar[3].str),
			}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1098
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1102
		{
			sqlVAL.union.val = &Deallocate{}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1109
		{
			sqlVAL.union.val = &Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1116
		{
			sqlVAL.union.val = &Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1123
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1127
		{
			sqlVAL.union.val = TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1131
		{
			sqlVAL.union.val = TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1138
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1141
		{
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1145
		{
			sqlVAL.union.val = privilege.List{sqlDollar[1].union.privilegeType()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1149
		{
			sqlVAL.union.val = append(sqlDollar[1].union.privilegeList(), sqlDollar[3].union.privilegeType())
		}
	case 113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1156
		{
			sqlVAL.union.val = privilege.CREATE
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1160
		{
			sqlVAL.union.val = privilege.DROP
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1164
		{
			sqlVAL.union.val = privilege.GRANT
		}
	case 116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1168
		{
			sqlVAL.union.val = privilege.SELECT
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1172
		{
			sqlVAL.union.val = privilege.INSERT
		}
	case 118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1176
		{
			sqlVAL.union.val = privilege.DELETE
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1180
		{
			sqlVAL.union.val = privilege.UPDATE
		}
	case 120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1188
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1204
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1208
		{
			sqlVAL.union.val = &SetDefaultIsolation{Isolation: sqlDollar[6].union.isoLevel()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1212
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1215
		{ /* SKIP DOC */
		}
	case 127:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1221
		{
			sqlVAL.union.val = &Set{Values: sqlDollar[4].union.exprs()}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1227
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1234
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1238
		{
			sqlVAL.union.val = &SetTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1242
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1246
		{
			sqlVAL.union.val = &SetTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1259
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1263
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName(), Values: sqlDollar[3].union.exprs()}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1267
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.union.val = &Set{Name: sqlDollar[1].union.unresolvedName()}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1278
		{
			unimplemented()
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1281
		{
			sqlVAL.union.val = &SetTimeZone{Value: sqlDollar[3].union.expr()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1284
		{
			unimplemented()
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1291
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1295
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1303
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1309
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1313
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1317
		{
			sqlVAL.union.val = SnapshotIsolation
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1321
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1325
		{
			sqlVAL.union.val = SerializableIsolation
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1331
		{
			sqlVAL.union.val = Low
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1335
		{
			sqlVAL.union.val = Normal
		}
	case 156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1339
		{
			sqlVAL.union.val = High
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1345
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1349
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1353
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1372
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1376
		{
			d, err := ParseDInterval(sqlDollar[2].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1390
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1395
		{
			unimplemented()
		}
	case 168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1396
		{
			unimplemented()
		}
	case 169:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1397
		{
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1405
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1411
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1415
		{
			sqlVAL.union.val = &Show{Name: sqlDollar[2].str}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1419
		{
			sqlVAL.union.val = &ShowColumns{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1423
		{
			sqlVAL.union.val = &ShowDatabases{}
		}
	case 176:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.union.val = &ShowGrants{Targets: sqlDollar[3].union.targetListPtr(), Grantees: sqlDollar[4].union.nameList()}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1431
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1435
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1439
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 180:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.union.val = &ShowConstraints{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1447
		{
			sqlVAL.union.val = &ShowIndex{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1451
		{
			sqlVAL.union.val = &ShowTables{Database: Name(sqlDollar[4].str)}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.union.val = &ShowTables{}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.union.val = &Show{Name: "TIME ZONE"}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION ISOLATION LEVEL"}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.union.val = &Show{Name: "TRANSACTION PRIORITY"}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1471
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 188:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1475
		{
			sqlVAL.union.val = &ShowCreateTable{Table: sqlDollar[4].union.normalizableTableName()}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1481
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 190:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1486
		{
			sqlVAL.union.val = (*TargetList)(nil)
		}
	case 191:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1492
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 192:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1496
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 193:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1502
		{
			sqlVAL.union.val = &Split{Table: sqlDollar[3].union.normalizableTableName(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.union.val = &Split{Index: sqlDollar[3].union.tableWithIdx(), Exprs: sqlDollar[7].union.exprs()}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1513
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: sqlDollar[7].union.interleave(), Defs: sqlDollar[5].union.tblDefs(), AsSource: nil}
		}
	case 196:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1517
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: sqlDollar[10].union.interleave(), Defs: sqlDollar[8].union.tblDefs(), AsSource: nil}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1523
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[3].union.normalizableTableName(), IfNotExists: false, Interleave: nil, Defs: nil, AsSource: sqlDollar[5].union.slct()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1527
		{
			sqlVAL.union.val = &CreateTable{Table: sqlDollar[6].union.normalizableTableName(), IfNotExists: true, Interleave: nil, Defs: nil, AsSource: sqlDollar[8].union.slct()}
		}
	case 200:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1534
		{
			sqlVAL.union.val = TableDefs(nil)
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1540
		{
			sqlVAL.union.val = TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1544
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1550
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 206:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1556
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 207:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1562
		{
			/* SKIP DOC */
			sqlVAL.union.val = &InterleaveDef{
				Parent:       NormalizableTableName{UnresolvedName{Name(sqlDollar[4].str)}},
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1570
		{
			sqlVAL.union.val = (*InterleaveDef)(nil)
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1576
		{
			sqlVAL.union.val = newColumnTableDef(Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 211:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1586
		{
			sqlVAL.union.val = []NamedColumnQualification(nil)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1592
		{
			sqlVAL.union.val = NamedColumnQualification{Name: Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1596
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 214:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1599
		{
			unimplemented()
		}
	case 215:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1601
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[2].str)}}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1605
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[3].str), Create: true}}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1609
		{
			sqlVAL.union.val = NamedColumnQualification{Qualification: &ColumnFamilyConstraint{Family: Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1627
		{
			sqlVAL.union.val = NotNullConstraint{}
		}
	case 219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1631
		{
			sqlVAL.union.val = NullConstraint{}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1635
		{
			sqlVAL.union.val = UniqueConstraint{}
		}
	case 221:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1639
		{
			sqlVAL.union.val = PrimaryKeyConstraint{}
		}
	case 222:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1643
		{
			sqlVAL.union.val = &ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1647
		{
			sqlVAL.union.val = &ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 224:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1651
		{
			sqlVAL.union.val = &ColumnFKConstraint{
				Table: sqlDollar[2].union.normalizableTableName(),
				Col:   Name(sqlDollar[3].str),
			}
		}
	case 225:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:1660
		{
			sqlVAL.union.val = &IndexTableDef{
				Name:       Name(sqlDollar[2].str),
				Columns:    sqlDollar[4].union.idxElems(),
				Storing:    sqlDollar[6].union.nameList(),
				Interleave: sqlDollar[7].union.interleave(),
			}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1669
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Name:       Name(sqlDollar[3].str),
					Columns:    sqlDollar[5].union.idxElems(),
					Storing:    sqlDollar[7].union.nameList(),
					Interleave: sqlDollar[8].union.interleave(),
				},
			}
		}
	case 227:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1682
		{
			sqlVAL.union.val = &FamilyTableDef{
				Name:    Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1694
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(ConstraintTableDef).setName(Name(sqlDollar[2].str))
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1699
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1705
		{
			sqlVAL.union.val = &CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns:    NameListToIndexElems(sqlDollar[3].union.nameList()),
					Storing:    sqlDollar[5].union.nameList(),
					Interleave: sqlDollar[6].union.interleave(),
				},
			}
		}
	case 232:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1721
		{
			sqlVAL.union.val = &UniqueConstraintTableDef{
				IndexTableDef: IndexTableDef{
					Columns: NameListToIndexElems(sqlDollar[4].union.nameList()),
				},
				PrimaryKey: true,
			}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1731
		{
			sqlVAL.union.val = &ForeignKeyConstraintTableDef{
				Table:    sqlDollar[7].union.normalizableTableName(),
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
			}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1754
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 237:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1758
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1764
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 239:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1768
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1773
		{
			unimplemented()
		}
	case 241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1774
		{
			unimplemented()
		}
	case 242:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1775
		{
			unimplemented()
		}
	case 243:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1776
		{
		}
	case 244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1783
		{
			unimplemented()
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1784
		{
			unimplemented()
		}
	case 246:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1785
		{
			unimplemented()
		}
	case 247:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1786
		{
			unimplemented()
		}
	case 248:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1787
		{
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1790
		{
			unimplemented()
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1793
		{
			unimplemented()
		}
	case 251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1796
		{
			unimplemented()
		}
	case 252:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1797
		{
			unimplemented()
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1798
		{
			unimplemented()
		}
	case 254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1799
		{
			unimplemented()
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1800
		{
			unimplemented()
		}
	case 256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1804
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1808
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1812
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 259:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1819
		{
			sqlVAL.union.val = &Truncate{Tables: sqlDollar[3].union.tableNameReferences(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1826
		{
			sqlVAL.union.val = &CreateView{
				Name:            sqlDollar[3].union.normalizableTableName(),
				ReplaceIfExists: false,
				ToCols:          sqlDollar[4].union.nameList(),
				AsSource:        sqlDollar[6].union.slct(),
			}
		}
	case 261:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1838
		{
			sqlVAL.union.val = &CreateView{
				Name:            sqlDollar[5].union.normalizableTableName(),
				ReplaceIfExists: true,
				ToCols:          sqlDollar[6].union.nameList(),
				AsSource:        sqlDollar[8].union.slct(),
			}
		}
	case 262:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql.y:1852
		{
			sqlVAL.union.val = &CreateIndex{
				Name:       Name(sqlDollar[4].str),
				Table:      sqlDollar[6].union.normalizableTableName(),
				Unique:     sqlDollar[2].union.bool(),
				Columns:    sqlDollar[8].union.idxElems(),
				Storing:    sqlDollar[10].union.nameList(),
				Interleave: sqlDollar[11].union.interleave(),
			}
		}
	case 263:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql.y:1863
		{
			sqlVAL.union.val = &CreateIndex{
				Name:        Name(sqlDollar[7].str),
				Table:       sqlDollar[9].union.normalizableTableName(),
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[11].union.idxElems(),
				Storing:     sqlDollar[13].union.nameList(),
				Interleave:  sqlDollar[14].union.interleave(),
			}
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1877
		{
			sqlVAL.union.val = true
		}
	case 265:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1881
		{
			sqlVAL.union.val = false
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1887
		{
			sqlVAL.union.val = IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1891
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1900
		{
			sqlVAL.union.val = IndexElem{Column: Name(sqlDollar[1].str), Direction: sqlDollar[3].union.dir()}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1903
		{
			unimplemented()
		}
	case 270:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1904
		{
			unimplemented()
		}
	case 271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1907
		{
			unimplemented()
		}
	case 272:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1908
		{
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1912
		{
			sqlVAL.union.val = Ascending
		}
	case 274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1916
		{
			sqlVAL.union.val = Descending
		}
	case 275:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1920
		{
			sqlVAL.union.val = DefaultDirection
		}
	case 276:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1927
		{
			sqlVAL.union.val = &RenameDatabase{Name: Name(sqlDollar[3].str), NewName: Name(sqlDollar[6].str)}
		}
	case 277:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1931
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[3].union.normalizableTableName(), NewName: sqlDollar[6].union.normalizableTableName(), IfExists: false}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1935
		{
			sqlVAL.union.val = &RenameTable{Name: sqlDollar[5].union.normalizableTableName(), NewName: sqlDollar[8].union.normalizableTableName(), IfExists: true}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:1939
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[3].union.tableWithIdx(), NewName: Name(sqlDollar[6].str), IfExists: false}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1943
		{
			sqlVAL.union.val = &RenameIndex{Index: sqlDollar[5].union.tableWithIdx(), NewName: Name(sqlDollar[8].str), IfExists: true}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1947
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[3].union.normalizableTableName(), Name: Name(sqlDollar[6].str), NewName: Name(sqlDollar[8].str), IfExists: false}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1951
		{
			sqlVAL.union.val = &RenameColumn{Table: sqlDollar[5].union.normalizableTableName(), Name: Name(sqlDollar[8].str), NewName: Name(sqlDollar[10].str), IfExists: true}
		}
	case 283:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:1955
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 284:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql.y:1959
		{
			sqlVAL.union.val = Statement(nil)
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1965
		{
			sqlVAL.union.val = true
		}
	case 286:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1969
		{
			sqlVAL.union.val = false
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1974
		{
		}
	case 288:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1975
		{
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1979
		{
			sqlVAL.union.val = &ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1985
		{
			sqlVAL.union.val = &Savepoint{Name: sqlDollar[2].str}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1992
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1996
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2000
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 294:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2004
		{
			sqlVAL.union.val = &CommitTransaction{}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2008
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &RollbackTransaction{}
			}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2017
		{
		}
	case 297:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2018
		{
		}
	case 298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2022
		{
			sqlVAL.str = ""
		}
	case 299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2026
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2030
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 301:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2034
		{
			sqlVAL.str = ""
		}
	case 302:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2040
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2044
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 304:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2050
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: UnspecifiedUserPriority}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2054
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2058
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[1].union.isoLevel(), UserPriority: sqlDollar[3].union.userPriority()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2062
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: sqlDollar[3].union.isoLevel(), UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2066
		{
			sqlVAL.union.val = &BeginTransaction{Isolation: UnspecifiedIsolation, UserPriority: UnspecifiedUserPriority}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2072
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 310:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2078
		{
			sqlVAL.union.val = &CreateDatabase{Name: Name(sqlDollar[3].str), Encoding: sqlDollar[4].union.strVal()}
		}
	case 311:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2082
		{
			sqlVAL.union.val = &CreateDatabase{IfNotExists: true, Name: Name(sqlDollar[6].str), Encoding: sqlDollar[7].union.strVal()}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2088
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[3].str}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2091
		{
			sqlVAL.union.val = (*StrVal)(nil)
		}
	case 314:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2101
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).Returning = sqlDollar[6].union.retExprs()
		}
	case 315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2107
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = sqlDollar[6].union.onConflict()
		}
	case 316:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2112
		{
			unimplementedWithIssue(6637)
		}
	case 317:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2114
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*Insert).OnConflict = &OnConflict{}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:2119
		{
			unimplementedWithIssue(6637)
		}
	case 319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2127
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2131
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2137
		{
			sqlVAL.union.val = &Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2141
		{
			sqlVAL.union.val = &Insert{Columns: sqlDollar[2].union.unresolvedNames(), Rows: sqlDollar[4].union.slct()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2145
		{
			sqlVAL.union.val = &Insert{Rows: &Select{}}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2151
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[8].union.expr())}
		}
	case 325:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2155
		{
			sqlVAL.union.val = &OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2161
		{
			// TODO(dan): Support the where_clause.
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2165
		{
			unimplemented()
		}
	case 328:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2167
		{
			sqlVAL.union.val = NameList(nil)
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2173
		{
			sqlVAL.union.val = sqlDollar[2].union.selExprs()
		}
	case 330:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2177
		{
			sqlVAL.union.val = SelectExprs(nil)
		}
	case 331:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2184
		{
			sqlVAL.union.val = &Update{Table: sqlDollar[3].union.tblExpr(), Exprs: sqlDollar[5].union.updateExprs(), Where: newWhere(astWhere, sqlDollar[7].union.expr()), Returning: sqlDollar[8].union.retExprs()}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2190
		{
			unimplementedWithIssue(7841)
		}
	case 333:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2191
		{
		}
	case 334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2195
		{
			sqlVAL.union.val = UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2199
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2209
		{
			sqlVAL.union.val = &UpdateExpr{Names: UnresolvedNames{sqlDollar[1].union.unresolvedName()}, Expr: sqlDollar[3].union.expr()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2221
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Tuple{Exprs: sqlDollar[5].union.exprs()}}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2225
		{
			sqlVAL.union.val = &UpdateExpr{Tuple: true, Names: sqlDollar[2].union.unresolvedNames(), Expr: &Subquery{Select: sqlDollar[5].union.selectStmt()}}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2269
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2275
		{
			sqlVAL.union.val = &ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2279
		{
			sqlVAL.union.val = &ParenSelect{Select: &Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2294
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2298
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2302
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2306
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2310
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 350:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2314
		{
			sqlVAL.union.val = &Select{Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 353:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2348
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:2360
		{
			sqlVAL.union.val = &SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    newWhere(astWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   newWhere(astHaving, sqlDollar[7].union.expr()),
			}
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2372
		{
			sqlVAL.union.val = &SelectClause{
				Exprs:       SelectExprs{starSelectExpr()},
				From:        &From{Tables: TableExprs{sqlDollar[2].union.newNormalizableTableName()}},
				tableSelect: true,
			}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2380
		{
			sqlVAL.union.val = &UnionClause{
				Type:  UnionOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2389
		{
			sqlVAL.union.val = &UnionClause{
				Type:  IntersectOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 359:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2398
		{
			sqlVAL.union.val = &UnionClause{
				Type:  ExceptOp,
				Left:  &Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2416
		{
			unimplemented()
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2417
		{
			unimplemented()
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2418
		{
			unimplemented()
		}
	case 363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2421
		{
			unimplemented()
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2422
		{
			unimplemented()
		}
	case 365:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:2425
		{
			unimplemented()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2428
		{
			unimplemented()
		}
	case 367:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2429
		{
		}
	case 368:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2432
		{
		}
	case 369:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2433
		{
		}
	case 370:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2437
		{
			sqlVAL.union.val = true
		}
	case 371:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2441
		{
			sqlVAL.union.val = false
		}
	case 372:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2445
		{
			sqlVAL.union.val = false
		}
	case 373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2451
		{
			sqlVAL.union.val = true
		}
	case 374:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2456
		{
		}
	case 375:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2457
		{
		}
	case 376:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2461
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 377:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2465
		{
			sqlVAL.union.val = OrderBy(nil)
		}
	case 378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2471
		{
			sqlVAL.union.val = OrderBy(sqlDollar[3].union.orders())
		}
	case 379:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2477
		{
			sqlVAL.union.val = []*Order{sqlDollar[1].union.order()}
		}
	case 380:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2481
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 381:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2487
		{
			sqlVAL.union.val = &Order{Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2495
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2504
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 386:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2515
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*Limit)(nil)
			} else {
				sqlVAL.union.val = &Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2528
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2535
		{
			sqlVAL.union.val = &Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2542
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2556
		{
		}
	case 392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2557
		{
		}
	case 393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2583
		{
			sqlVAL.union.val = GroupBy(sqlDollar[3].union.exprs())
		}
	case 394:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2587
		{
			sqlVAL.union.val = GroupBy(nil)
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2593
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 396:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2597
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2603
		{
			sqlVAL.union.val = &ValuesClause{[]*Tuple{{Exprs: sqlDollar[2].union.exprs()}}}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2607
		{
			valNode := sqlDollar[1].union.selectStmt().(*ValuesClause)
			valNode.Tuples = append(valNode.Tuples, &Tuple{Exprs: sqlDollar[3].union.exprs()})
			sqlVAL.union.val = valNode
		}
	case 399:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2619
		{
			sqlVAL.union.val = &From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2623
		{
			sqlVAL.union.val = &From{}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2629
		{
			sqlVAL.union.val = TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2633
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2639
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[3].str)}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2644
		{
			sqlVAL.union.val = &IndexHints{NoIndexJoin: true}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2650
		{
			sqlVAL.union.val = sqlDollar[1].union.indexHints()
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2655
		{
			a := sqlDollar[1].union.indexHints()
			b := sqlDollar[3].union.indexHints()
			index := a.Index
			if index == "" {
				index = b.Index
			} else if b.Index != "" {
				sqllex.Error("FORCE_INDEX specified multiple times")
				return 1
			}
			if a.NoIndexJoin && b.NoIndexJoin {
				sqllex.Error("NO_INDEX_JOIN specified multiple times")
				return 1
			}
			noIndexJoin := a.NoIndexJoin || b.NoIndexJoin
			sqlVAL.union.val = &IndexHints{Index: index, NoIndexJoin: noIndexJoin}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2675
		{
			sqlVAL.union.val = &IndexHints{Index: Name(sqlDollar[2].str)}
		}
	case 408:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2679
		{
			sqlVAL.union.val = sqlDollar[3].union.indexHints()
		}
	case 409:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2683
		{
			sqlVAL.union.val = (*IndexHints)(nil)
		}
	case 410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2690
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), Hints: sqlDollar[2].union.indexHints(), As: sqlDollar[3].union.aliasClause()}
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2694
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: &Subquery{Select: sqlDollar[1].union.selectStmt()}, As: sqlDollar[2].union.aliasClause()}
		}
	case 412:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2698
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2702
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[2].union.tblExpr(), As: sqlDollar[4].union.aliasClause()}
		}
	case 414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2722
		{
			sqlVAL.union.val = &ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2726
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2730
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2734
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2738
		{
			sqlVAL.union.val = &JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2742
		{
			sqlVAL.union.val = &JoinTableExpr{Join: astJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: NaturalJoinCond{}}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2748
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str), Cols: sqlDollar[4].union.nameList()}
		}
	case 421:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2752
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[2].str)}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2756
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2760
		{
			sqlVAL.union.val = AliasClause{Alias: Name(sqlDollar[1].str)}
		}
	case 425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2767
		{
			sqlVAL.union.val = AliasClause{}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2773
		{
			sqlVAL.union.val = AsOfClause{Expr: &StrVal{s: sqlDollar[5].str}}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2777
		{
			sqlVAL.union.val = AsOfClause{}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2783
		{
			sqlVAL.str = astFullJoin
		}
	case 429:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2787
		{
			sqlVAL.str = astLeftJoin
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2791
		{
			sqlVAL.str = astRightJoin
		}
	case 431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2795
		{
			sqlVAL.str = astInnerJoin
		}
	case 432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2801
		{
		}
	case 433:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2802
		{
		}
	case 434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2813
		{
			sqlVAL.union.val = &UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2817
		{
			sqlVAL.union.val = &OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2823
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 437:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2827
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2831
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 439:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2835
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2841
		{
			sqlVAL.union.val = TableNameReferences{sqlDollar[1].union.unresolvedName()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2845
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableNameReferences(), sqlDollar[3].union.unresolvedName())
		}
	case 442:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2858
		{
			sqlVAL.union.val = sqlDollar[1].union.newNormalizableTableName()
		}
	case 443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2862
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[2].str)}}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2866
		{
			sqlVAL.union.val = &AliasedTableExpr{Expr: sqlDollar[1].union.newNormalizableTableName(), As: AliasClause{Alias: Name(sqlDollar[3].str)}}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2872
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 446:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2876
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2888
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 448:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2892
		{
			unimplementedWithIssue(2115)
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:2893
		{
			unimplementedWithIssue(2115)
		}
	case 450:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2896
		{
			unimplementedWithIssue(2115)
		}
	case 451:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2897
		{
			unimplementedWithIssue(2115)
		}
	case 452:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2898
		{
		}
	case 458:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:2906
		{
			unimplemented()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2908
		{
			sqlVAL.union.val = bytesColTypeBlob
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2912
		{
			sqlVAL.union.val = bytesColTypeBytes
		}
	case 461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2916
		{
			sqlVAL.union.val = bytesColTypeBytea
		}
	case 462:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2920
		{
			sqlVAL.union.val = stringColTypeText
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2924
		{
			sqlVAL.union.val = intColTypeSerial
		}
	case 464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2928
		{
			sqlVAL.union.val = intColTypeSmallSerial
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2932
		{
			sqlVAL.union.val = intColTypeBigSerial
		}
	case 470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:2953
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec)}
		}
	case 471:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:2962
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			scale, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &DecimalColType{Prec: int(prec), Scale: int(scale)}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:2976
		{
			sqlVAL.union.val = nil
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2983
		{
			sqlVAL.union.val = intColTypeInt
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2987
		{
			sqlVAL.union.val = intColTypeInt8
		}
	case 475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2991
		{
			sqlVAL.union.val = intColTypeInt64
		}
	case 476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2995
		{
			sqlVAL.union.val = intColTypeInteger
		}
	case 477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:2999
		{
			sqlVAL.union.val = intColTypeSmallInt
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3003
		{
			sqlVAL.union.val = intColTypeBigInt
		}
	case 479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3007
		{
			sqlVAL.union.val = floatColTypeReal
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3011
		{
			prec, err := sqlDollar[2].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = newFloatColType(int(prec))
		}
	case 481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3020
		{
			sqlVAL.union.val = floatColTypeDouble
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3024
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDecimal
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DECIMAL"
			}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3033
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeDec
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "DEC"
			}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3042
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = decimalColTypeNumeric
			} else {
				sqlVAL.union.val.(*DecimalColType).Name = "NUMERIC"
			}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3051
		{
			sqlVAL.union.val = boolColTypeBoolean
		}
	case 486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3055
		{
			sqlVAL.union.val = boolColTypeBool
		}
	case 487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3061
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 488:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3065
		{
			sqlVAL.union.val = &NumVal{Value: constant.MakeInt64(0)}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3083
		{
			n, err := sqlDollar[4].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			bit, err := newIntBitType(int(n))
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3099
		{
			sqlVAL.union.val = intColTypeBit
		}
	case 499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3115
		{
			n, err := sqlDollar[3].union.numVal().asInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = sqlDollar[1].union.colType()
			if n != 0 {
				strType := &StringColType{N: int(n)}
				strType.Name = sqlVAL.union.val.(*StringColType).Name
				sqlVAL.union.val = strType
			}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3131
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3137
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3141
		{
			sqlVAL.union.val = stringColTypeChar
		}
	case 503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3145
		{
			sqlVAL.union.val = stringColTypeVarChar
		}
	case 504:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3149
		{
			sqlVAL.union.val = stringColTypeString
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3154
		{
		}
	case 506:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3155
		{
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3160
		{
			sqlVAL.union.val = dateColTypeDate
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3164
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 509:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3168
		{
			sqlVAL.union.val = timestampColTypeTimestamp
		}
	case 510:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3172
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3176
		{
			sqlVAL.union.val = timestampTzColTypeTimestampWithTZ
		}
	case 512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3181
		{
			sqlVAL.union.val = intervalColTypeInterval
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3186
		{
			unimplemented()
		}
	case 514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3187
		{
			unimplemented()
		}
	case 515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3188
		{
			unimplemented()
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3189
		{
			unimplemented()
		}
	case 517:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3190
		{
			unimplemented()
		}
	case 518:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3191
		{
			unimplemented()
		}
	case 519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3192
		{
			unimplemented()
		}
	case 520:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3193
		{
			unimplemented()
		}
	case 521:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3194
		{
			unimplemented()
		}
	case 522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3195
		{
			unimplemented()
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3196
		{
			unimplemented()
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3197
		{
			unimplemented()
		}
	case 525:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3198
		{
			unimplemented()
		}
	case 526:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3199
		{
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3202
		{
			unimplemented()
		}
	case 528:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3203
		{
			unimplemented()
		}
	case 530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3227
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3231
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3234
		{
			unimplemented()
		}
	case 533:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3235
		{
			unimplemented()
		}
	case 534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3244
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3248
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3252
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3256
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3260
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3264
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3268
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 541:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3272
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3276
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3280
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 544:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3284
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3288
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3292
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3296
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3300
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3304
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3308
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3312
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3316
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3320
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 554:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3324
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3328
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3332
		{
			sqlVAL.union.val = &AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3336
		{
			sqlVAL.union.val = &OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3340
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3344
		{
			sqlVAL.union.val = &NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 560:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3348
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3352
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3356
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3360
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3364
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3368
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3372
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3376
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3380
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3384
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3388
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3392
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3395
		{
			unimplemented()
		}
	case 573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3397
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3401
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(true)}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3405
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 576:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3409
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: MakeDBool(false)}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3413
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: Is, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3417
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNot, Left: sqlDollar[1].union.expr(), Right: DNull}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3421
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3425
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3429
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3433
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3437
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 584:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3441
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3445
		{
			sqlVAL.union.val = &RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3449
		{
			sqlVAL.union.val = &RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3453
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3457
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3474
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3478
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType()}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3482
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryPlus, Expr: sqlDollar[2].union.expr()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3486
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryMinus, Expr: sqlDollar[2].union.expr()}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3490
		{
			sqlVAL.union.val = &UnaryExpr{Operator: UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3494
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 596:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3498
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3502
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3506
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3510
		{
			sqlVAL.union.val = &BinaryExpr{Operator: FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3514
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3518
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3522
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3526
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3530
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3534
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3538
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3542
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3546
		{
			sqlVAL.union.val = &BinaryExpr{Operator: Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3550
		{
			sqlVAL.union.val = &BinaryExpr{Operator: LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3554
		{
			sqlVAL.union.val = &BinaryExpr{Operator: RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3558
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3562
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 613:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3566
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3570
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3574
		{
			sqlVAL.union.val = &ComparisonExpr{Operator: IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3578
		{
			sqlVAL.union.val = &IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:3582
		{
			sqlVAL.union.val = &IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3594
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3599
		{
			sqlVAL.union.val = Placeholder{Name: sqlDollar[1].str}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3603
		{
			sqlVAL.union.val = &ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3609
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3613
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3617
		{
			sqlVAL.union.val = &ExistsExpr{Subquery: &Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3623
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3627
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 629:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3631
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3639
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3643
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3646
		{
			unimplemented()
		}
	case 633:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3647
		{
			unimplemented()
		}
	case 634:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3649
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: All, Exprs: sqlDollar[4].union.exprs()}
		}
	case 635:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3653
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Type: Distinct, Exprs: sqlDollar[4].union.exprs()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3657
		{
			sqlVAL.union.val = &FuncExpr{Name: sqlDollar[1].union.normalizableFunctionName(), Exprs: Exprs{StarExpr()}}
		}
	case 637:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3670
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3674
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 639:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3683
		{
			unimplemented()
		}
	case 640:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3684
		{
			unimplemented()
		}
	case 641:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3688
		{
			unimplemented()
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3690
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3694
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3698
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3702
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str)}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3705
		{
			unimplemented()
		}
	case 647:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3706
		{
			unimplemented()
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3707
		{
			unimplemented()
		}
	case 649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3708
		{
			unimplemented()
		}
	case 650:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3710
		{
			sqlVAL.union.val = &CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3714
		{
			sqlVAL.union.val = &AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType()}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3718
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3722
		{
			sqlVAL.union.val = &OverlayExpr{FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}}
		}
	case 654:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3726
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("STRPOS"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3730
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 656:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3733
		{
			unimplemented()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3735
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3739
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("LTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3743
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("RTRIM"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3747
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName("BTRIM"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql.y:3751
		{
			sqlVAL.union.val = &IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3755
		{
			sqlVAL.union.val = &NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3759
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "IFNULL", Exprs: Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3763
		{
			sqlVAL.union.val = &CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3767
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3771
		{
			sqlVAL.union.val = &FuncExpr{Name: WrapQualifiedFunctionName(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3777
		{
			unimplemented()
		}
	case 668:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3778
		{
		}
	case 669:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3781
		{
			unimplemented()
		}
	case 670:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3782
		{
		}
	case 671:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3786
		{
			unimplemented()
		}
	case 672:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3787
		{
		}
	case 673:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3790
		{
			unimplemented()
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3791
		{
			unimplemented()
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3794
		{
			unimplemented()
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3797
		{
			unimplemented()
		}
	case 677:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3798
		{
			unimplemented()
		}
	case 678:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3799
		{
		}
	case 679:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:3803
		{
			unimplemented()
		}
	case 680:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3814
		{
			unimplemented()
		}
	case 681:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3815
		{
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3818
		{
			unimplemented()
		}
	case 683:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3819
		{
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3827
		{
			unimplemented()
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3828
		{
			unimplemented()
		}
	case 686:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:3829
		{
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3832
		{
			unimplemented()
		}
	case 688:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3833
		{
			unimplemented()
		}
	case 689:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3839
		{
			unimplemented()
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3840
		{
			unimplemented()
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3841
		{
			unimplemented()
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3842
		{
			unimplemented()
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3843
		{
			unimplemented()
		}
	case 694:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3854
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3858
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3862
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3868
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[3].union.exprs(), row: true}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3872
		{
			sqlVAL.union.val = &Tuple{Exprs: nil, row: true}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:3878
		{
			sqlVAL.union.val = &Tuple{Exprs: append(sqlDollar[2].union.exprs(), sqlDollar[4].union.expr())}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3921
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3925
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 702:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3931
		{
			sqlVAL.union.val = []ColumnType{sqlDollar[1].union.colType()}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3935
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3941
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3945
		{
			sqlVAL.union.val = &Array{sqlDollar[2].union.exprs()}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3949
		{
			sqlVAL.union.val = &Array{nil}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:3955
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3959
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 709:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3965
		{
			sqlVAL.union.val = Exprs{&StrVal{s: sqlDollar[1].str}, sqlDollar[3].union.expr()}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:3987
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:3991
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:3997
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4004
		{
			sqlVAL.union.val = Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4008
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 722:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4025
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4029
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4033
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4037
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr(), NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4041
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 727:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4045
		{
			sqlVAL.union.val = Exprs(nil)
		}
	case 728:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4051
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4057
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4063
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4067
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4071
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4077
		{
			sqlVAL.union.val = &Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4081
		{
			sqlVAL.union.val = &Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4092
		{
			sqlVAL.union.val = &CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4099
		{
			sqlVAL.union.val = []*When{sqlDollar[1].union.when()}
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4103
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 738:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:4109
		{
			sqlVAL.union.val = &When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4115
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 740:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4119
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 742:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4126
		{
			sqlVAL.union.val = Expr(nil)
		}
	case 743:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4132
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4136
		{
			sqlVAL.union.val = sqlDollar[1].union.namePart()
		}
	case 745:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4140
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4144
		{
			sqlVAL.union.val = &ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4150
		{
			sqlVAL.union.val = Name(sqlDollar[2].str)
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4156
		{
			sqlVAL.union.val = UnqualifiedStar{}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4162
		{
			sqlVAL.union.val = UnresolvedName{sqlDollar[1].union.namePart()}
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4166
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedName(), sqlDollar[2].union.namePart())
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4171
		{
		}
	case 752:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4172
		{
		}
	case 754:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4181
		{
			sqlVAL.union.val = DefaultVal{}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4187
		{
			sqlVAL.union.val = Exprs{sqlDollar[1].union.expr()}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4191
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 757:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4200
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 758:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4206
		{
			sqlVAL.union.val = SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4210
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 760:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4216
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[3].str)}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4225
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr(), As: Name(sqlDollar[2].str)}
		}
	case 762:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4229
		{
			sqlVAL.union.val = SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4233
		{
			sqlVAL.union.val = starSelectExpr()
		}
	case 764:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4241
		{
			sqlVAL.union.val = UnresolvedNames{sqlDollar[1].union.unresolvedName()}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4245
		{
			sqlVAL.union.val = append(sqlDollar[1].union.unresolvedNames(), sqlDollar[3].union.unresolvedName())
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4251
		{
			sqlVAL.union.val = TableNameWithIndexList{sqlDollar[1].union.tableWithIdx()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4255
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableWithIdxList(), sqlDollar[3].union.tableWithIdx())
		}
	case 768:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4261
		{
			sqlVAL.union.val = TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4265
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4276
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 771:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4280
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4286
		{
			sqlVAL.union.val = &TableNameWithIndex{Table: sqlDollar[1].union.normalizableTableName(), Index: Name(sqlDollar[3].str)}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4297
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4301
		{
			sqlVAL.union.val = UnresolvedName{UnqualifiedStar{}}
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4305
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4309
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str), sqlDollar[2].union.namePart()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4315
		{
			sqlVAL.union.val = NameList{Name(sqlDollar[1].str)}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4319
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), Name(sqlDollar[3].str))
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4325
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 780:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4328
		{
		}
	case 781:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4338
		{
			sqlVAL.union.val = UnresolvedName{Name(sqlDollar[1].str)}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4342
		{
			sqlVAL.union.val = append(UnresolvedName{Name(sqlDollar[1].str)}, sqlDollar[2].union.unresolvedName()...)
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4349
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4353
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4357
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4361
		{
			sqlVAL.union.val = &StrVal{s: sqlDollar[1].str, bytesEsc: true}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:4364
		{
			unimplemented()
		}
	case 788:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4366
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4370
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[2].str}, Type: sqlDollar[1].union.colType()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:4374
		{
			sqlVAL.union.val = &CastExpr{Expr: &StrVal{s: sqlDollar[5].str}, Type: sqlDollar[1].union.colType()}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4378
		{
			sqlVAL.union.val = MakeDBool(true)
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4382
		{
			sqlVAL.union.val = MakeDBool(false)
		}
	case 793:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:4386
		{
			sqlVAL.union.val = DNull
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4393
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:4397
		{
			sqlVAL.union.val = &NumVal{Value: constant.UnaryOp(token.SUB, sqlDollar[2].union.numVal().Value, 0)}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4419
		{
			sqlVAL.str = ""
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:4425
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 803:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:4429
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
